
#line 3 "lex.yy.c"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 31
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined __STDC_VERSION__ && __STDC_VERSION__ >= 199901L
#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef unsigned int yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart (FILE *input_file  );
void yy_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer (FILE *file,int size  );
void yy_delete_buffer (YY_BUFFER_STATE b  );
void yy_flush_buffer (YY_BUFFER_STATE b  );
void yypush_buffer_state (YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state (void );

static void yyensure_buffer_stack (void );
static void yy_load_buffer_state (void );
static void yy_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE yy_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes (yyconst char *bytes,int len  );

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

typedef unsigned char YY_CHAR;

FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;

typedef int yy_state_type;

#define YY_FLEX_LEX_COMPAT
extern int yylineno;

int yylineno = 1;

extern char yytext[];

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	if ( yyleng + (yy_more_offset) >= YYLMAX ) \
		YY_FATAL_ERROR( "token too large, exceeds YYLMAX" ); \
	yy_flex_strncpy( &yytext[(yy_more_offset)], (yytext_ptr), yyleng + 1 ); \
	yyleng += (yy_more_offset); \
	(yy_prev_more_offset) = (yy_more_offset); \
	(yy_more_offset) = 0; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 197
#define YY_END_OF_BUFFER 198
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_acclist[258] =
    {   0,
        9,    9,  198,  196,  197,    1,  196,  197,    2,  197,
        3,  196,  197,    4,  196,  197,  196,  197,  196,  197,
      196,  197,  196,  197,  196,  197,  196,  197,  196,  197,
      196,  197,  196,  197,  196,  197,  196,  197,  196,  197,
      196,  197,  196,  197,  196,  197,  196,  197,  196,  197,
      196,  197,  196,  197,  196,  197,  196,  197,  196,  197,
      196,  197,    1,  172,   42,    8,    8,    6,  171,    7,
       31,   44,  102,   41,    5,  107,    9,   43,   40,   46,
      163,   23,  170,  143,   45,   77,   78,   79,  106,   75,
        9,  142,   33,   32,   85,   86,   82,   83,   84,  173,

       47,   49,  164,   61,   67,   55,   60,   66,   54,   63,
       69,   57,   62,   68,   56,   59,   65,   53,   58,   64,
       52,  169,   30,   48,  180,  179,  181,  178,   70,   71,
       50,   38,   37,   39,   36,  167,   89,   90,   80,   81,
       11,  100,  139,  151,   24,  138,  110,  140,  174,  150,
      149,  148,   73,   12,   51,   16,   98,  141,  104,  105,
       15,   72,   88,   87,   35,   74,  175,  162,  161,   20,
      176,  165,  166,   14,  137,   13,  136,  156,  155,  154,
       27,  111,  109,  112,  177,  115,   28,   26,  101,  145,
      144,  114,  108,  146,   29,  193,  113,   91,  158,  157,

      159,  168,   21,   76,  120,  122,  119,  117,  123,  121,
      116,  118,  133,  132,  134,  153,   34,  147,  186,  191,
      194,  189,  103,  160,   22,  135,  152,  184,  187,  182,
       17,   25,   10,   99,  195,   93,   94,   95,   96,   97,
      188,  192,  190,   17,  185,  183,  128,  130,  127,  125,
      131,  129,  124,  126,   92,   18,   19
    } ;

static yyconst flex_int16_t yy_accept[784] =
    {   0,
        1,    2,    3,    4,    6,    9,   11,   14,   17,   19,
       21,   23,   25,   27,   29,   31,   33,   35,   37,   39,
       41,   43,   45,   47,   49,   51,   53,   55,   57,   59,
       61,   63,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   66,   66,   67,   68,

       68,   68,   68,   68,   68,   68,   68,   68,   68,   69,
       69,   69,   69,   69,   69,   69,   69,   69,   69,   69,
       70,   70,   70,   70,   71,   71,   71,   72,   72,   73,
       74,   75,   75,   75,   75,   75,   75,   75,   76,   76,
       76,   76,   77,   77,   77,   77,   78,   78,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   80,   80,   80,   80,   80,   80,   81,
       81,   81,   81,   81,   81,   81,   81,   81,   82,   82,
       82,   82,   82,   82,   82,   82,   82,   82,   82,   82,
       82,   82,   82,   82,   82,   83,   83,   84,   84,   84,

       85,   85,   85,   85,   86,   86,   86,   86,   86,   86,
       86,   86,   86,   87,   88,   89,   89,   89,   89,   89,
       90,   91,   92,   93,   93,   93,   93,   93,   93,   93,
       93,   93,   93,   93,   93,   93,   94,   94,   94,   94,
       95,   95,   96,   97,   97,   98,   99,  100,  100,  100,
      101,  101,  101,  101,  101,  102,  103,  103,  103,  103,
      103,  103,  104,  104,  104,  104,  104,  104,  104,  104,
      104,  104,  104,  104,  104,  104,  104,  104,  104,  104,
      104,  104,  104,  104,  104,  105,  106,  107,  108,  109,
      110,  111,  112,  113,  114,  115,  116,  117,  118,  119,

      120,  121,  122,  122,  123,  123,  123,  123,  123,  123,
      123,  123,  123,  123,  123,  123,  123,  123,  123,  123,
      123,  123,  123,  124,  125,  125,  125,  125,  125,  125,
      125,  125,  125,  125,  125,  125,  125,  125,  125,  125,
      125,  125,  125,  125,  125,  125,  125,  126,  127,  128,
      128,  128,  129,  129,  129,  129,  129,  129,  130,  131,
      131,  131,  131,  131,  131,  131,  131,  131,  131,  132,
      132,  132,  132,  132,  132,  132,  133,  133,  133,  134,
      135,  135,  135,  135,  135,  135,  136,  136,  137,  137,
      137,  137,  137,  137,  137,  138,  139,  140,  141,  141,

      141,  142,  142,  143,  143,  143,  143,  143,  143,  143,
      143,  143,  143,  143,  144,  144,  144,  144,  144,  144,
      145,  146,  147,  147,  147,  147,  147,  147,  147,  148,
      149,  149,  149,  150,  150,  150,  150,  150,  150,  150,
      150,  151,  152,  153,  153,  153,  153,  153,  153,  153,
      153,  153,  154,  154,  154,  154,  154,  154,  154,  155,
      155,  155,  156,  156,  156,  156,  156,  156,  156,  156,
      156,  156,  156,  156,  156,  156,  156,  156,  156,  157,
      157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
      157,  157,  157,  157,  157,  157,  157,  157,  157,  157,

      157,  157,  157,  157,  157,  157,  158,  158,  158,  158,
      158,  158,  158,  158,  158,  158,  159,  159,  159,  159,
      159,  159,  159,  159,  159,  159,  159,  160,  161,  161,
      162,  163,  164,  165,  165,  166,  167,  167,  168,  168,
      168,  168,  168,  168,  168,  169,  169,  169,  169,  169,
      170,  171,  172,  172,  173,  174,  174,  174,  174,  174,
      175,  175,  175,  175,  175,  175,  176,  176,  176,  177,
      177,  178,  178,  179,  180,  180,  180,  181,  181,  182,
      182,  183,  184,  184,  184,  184,  184,  185,  185,  185,
      185,  185,  185,  185,  185,  185,  185,  185,  185,  185,

      185,  185,  185,  185,  186,  186,  186,  187,  187,  188,
      188,  188,  188,  188,  188,  188,  188,  188,  188,  188,
      188,  189,  189,  189,  189,  189,  190,  190,  190,  190,
      190,  191,  191,  191,  192,  193,  194,  195,  195,  195,
      196,  196,  196,  196,  196,  196,  196,  196,  196,  197,
      197,  197,  197,  197,  197,  198,  199,  199,  199,  200,
      201,  202,  202,  203,  203,  203,  204,  204,  205,  205,
      206,  207,  208,  209,  210,  211,  212,  213,  214,  215,
      216,  216,  217,  217,  217,  218,  219,  219,  219,  220,
      220,  220,  220,  221,  222,  223,  224,  224,  224,  224,

      224,  225,  225,  225,  226,  226,  227,  228,  228,  228,
      229,  230,  231,  231,  231,  231,  231,  232,  232,  233,
      234,  234,  235,  235,  235,  235,  235,  236,  236,  236,
      236,  236,  237,  238,  239,  240,  241,  241,  241,  242,
      242,  242,  243,  244,  244,  245,  245,  245,  246,  247,
      247,  247,  247,  247,  247,  247,  247,  247,  247,  247,
      247,  248,  249,  250,  251,  252,  253,  254,  255,  255,
      255,  255,  255,  255,  255,  255,  256,  256,  256,  256,
      257,  258,  258
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    1,    1,    1,    1,    1,    1,    4,
        5,    1,    6,    1,    6,    7,    8,    9,   10,   11,
       12,   13,   14,    9,    9,   15,   15,    1,    1,    1,
        1,   16,    1,    1,   17,   18,   19,   20,   21,   22,
       23,   24,   25,    1,   26,   27,   28,   29,   30,   31,
       32,   33,   34,   35,   36,   37,   38,   39,   40,   41,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[42] =
    {   0,
        1,    2,    3,    1,    1,    4,    4,    1,    5,    5,
        5,    5,    5,    5,    6,    1,    7,    7,    7,    7,
        7,    7,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1
    } ;

static yyconst flex_int16_t yy_base[791] =
    {   0,
        0,    0,  837,  838,  834,  838,  838,  838,  808,   15,
       18,   53,   42,  795,   44,  806,   43,  795,  798,   32,
       35,   61,   45,   68,  794,   69,   85,  799,  799,   33,
       29,  825,  801,  804,  799,  800,   23,  820,  794,   45,
      787,   71,   66,  798,  816,   73,  782,   97,   68,  789,
      786,  797,  777,  810,  794,  793,  780,  790,  784,  775,
      785,  767,  786,  767,  762,  767,  771,  796,  769,  763,
      766,  763,  768,  758,  774,  111,  759,  762,   95,  755,
      762,  769,  102,   40,  108,  754,  759,  750,  757,  760,
      759,  756,  761,  743,  746,  758,  745,  838,  771,  736,

      738,  751,  740,  750,  750,  741,  737,  735,  761,  745,
      736,  730,  734,  725,  102,  103,  104,  736,  731,  728,
      719,  726,  731,  749,  730,  722,  838,  727,  123,  725,
      729,  724,  717,  707,  707,  713,  130,  134,  713,  722,
      721,  838,  709,  712,  715,    0,  147,  838,  713,  141,
      712,  119,  711,  706,  699,  700,  709,  708,  695,  704,
      140,  152,  707,  688,  703,  686,  695,  702,  159,  698,
      693,  685,  696,  694,  692,  163,  686,  838,  690,  690,
      680,  687,  151,  671,  678,  677,  681,  686,  171,  174,
      178,  179,  184,  187,  838,  675,  674,  204,  664,  206,

      678,  662,  670,  680,  678,  664,  674,  182,  656,  658,
      663,  672,  838,  838,  838,  667,  659,  659,   75,  838,
      838,    0,  190,  140,  654,  649,  664,  657,  651,  660,
      660,  654,  641,  647,  646,  838,  639,  652,  647,  838,
      636,  838,  838,  637,  838,  838,  838,  636,  649,  838,
      643,  639,  642,  644,  647,  838,  641,  640,  626,  640,
      641,  838,  638,  625,  618,  627,  618,  136,  615,  630,
      135,  630,  615,  621,  626,  623,  616,  617,  616,  615,
      123,  167,  612,  606,  838,  838,  838,  838,  838,  838,
      838,  838,  838,  838,  838,  838,  838,  838,  838,  838,

      838,  838,  599,  838,  149,  614,  188,  600,  609,  598,
      597,  616,  611,  595,  609,  605,  592,  195,  587,  606,
      592,  603,  838,  838,  605,  593,  602,  590,  598,  593,
      586,  595,  598,  597,  586,  575,  590,  575,  217,  584,
      578,  576,  571,  585,  570,  568,  838,  838,  838,  582,
      570,  838,  565,  582,  571,  579,  570,  838,  838,  578,
      575,  563,  562,  572,  573,  568,  564,  566,  570,  552,
      559,  552,  561,  548,  545,  838,  562,  542,  838,  838,
      560,  559,  546,  543,  546,  838,  536,  838,  538,  536,
      534,  533,  531,  531,  838,  838,  838,  838,  202,  534,

      838,  543,  838,  542,  215,  537,  544,  524,  542,  541,
      529,  527,  528,  517,  536,  525,  518,  517,  518,  838,
      838,  511,  520,  511,  524,  506,  521,  519,  838,  504,
      513,  506,  838,  517,  502,  496,  501,  499,  513,  501,
      838,  838,  838,  510,  513,  218,  512,  506,  494,  505,
      500,  838,  497,  499,  491,  490,  499,  486,  838,  483,
      484,  838,  482,  492,  497,  484,  472,  490,  483,  488,
      481,  480,  489,  484,  483,  475,  468,  482,  838,  460,
      478,  465,  472,  467,  478,  477,  474,  471,  489,  449,
      462,  467,  460,  459,  464,  467,  462,  465,  448,  459,

      454,  457,  456,  459,  454,  838,  445,  444,  437,  447,
      453,  447,  445,  440,  445,  428,  443,  446,  221,  445,
      427,  421,  429,  437,  418,  426,  838,  838,  420,  430,
      838,  838,  838,  424,  838,  838,  418,  838,  427,  431,
      414,  429,  414,  410,  838,  409,  408,  416,  425,  838,
      838,  838,  417,  838,  838,  404,  398,  413,  418,  838,
      410,  406,  244,  413,  397,  838,  396,  395,  838,  403,
      838,  402,  838,  838,  399,  392,  838,  399,  838,  390,
      838,  838,  389,  396,  392,  400,  838,  387,  402,  384,
      378,  386,  394,  375,  386,  387,  378,  377,  384,  379,

      373,  385,  370,  838,  369,  378,  838,  378,  838,  380,
      379,  378,  363,  362,  375,  368,  373,  358,  371,  357,
      838,  223,  231,  233,  226,  838,  369,  368,  367,  352,
      838,  360,  366,  838,  838,  838,  838,  355,  350,  838,
      355,  354,  355,  346,  345,  352,  359,  341,  838,  339,
      339,  337,  354,  331,  838,  838,  340,  351,  838,  838,
      838,  327,  838,  338,  344,  838,  330,  838,  321,  838,
      838,  838,  838,  838,  838,  838,  838,  838,  838,  838,
      316,  838,  325,  311,  838,  838,  328,  306,  838,  304,
      301,  305,  310,  838,  306,  838,  301,  320,  298,  287,

      838,  298,  283,  838,  289,  838,  838,  296,  285,  293,
      838,  292,  274,  283,  281,   30,  106,  262,  838,  838,
      157,  838,  164,  181,  206,  227,  838,  220,  223,  238,
        0,  838,  838,  838,  838,  838,  236,  230,  838,  230,
      231,  838,  838,  240,  267,  251,  276,  838,  838,  263,
      255,  280,  260,  255,  258,  268,  269,  261,  287,  269,
      838,  838,  838,  838,  838,  838,  838,  838,  290,  259,
      278,  263,  263,  272,  264,  838,  267,  281,  284,  838,
      838,  838,  325,  331,  336,  342,  346,  348,  353,  356
    } ;

static yyconst flex_int16_t yy_def[791] =
    {   0,
      782,    1,  782,  782,  782,  782,  782,  782,  782,  782,
      782,  782,  782,  782,  782,  782,  782,  782,  782,  782,
      782,  782,  782,  782,  782,  782,  782,  782,  782,  782,
      782,  782,  782,  782,  782,  782,  782,  783,  782,  782,
      782,  782,  782,  782,  784,  782,  782,  782,  782,  782,
      782,  782,  782,  785,  782,  782,  782,  782,  782,  782,
      782,  782,  782,  782,  782,  782,  782,  786,  782,  782,
      782,  782,  782,  782,  782,  787,  782,  782,  782,  782,
      782,  782,  782,  782,  782,  782,  782,  782,  782,  782,
      782,  782,  782,  782,  782,  782,  782,  782,  783,  782,

      782,  782,  782,  782,  782,  782,  782,  782,  784,  782,
      782,  782,  782,  782,  782,  782,  782,  782,  782,  782,
      782,  782,  782,  785,  782,  782,  782,  782,  782,  782,
      782,  782,  782,  782,  782,  782,  782,  782,  782,  782,
      782,  782,  782,  782,  782,  788,  787,  782,  782,  782,
      782,  782,  782,  782,  782,  782,  782,  782,  782,  782,
      782,  782,  782,  782,  782,  782,  782,  782,  782,  782,
      782,  782,  782,  782,  782,  782,  782,  782,  782,  782,
      782,  782,  782,  782,  782,  782,  782,  782,  782,  782,
      782,  782,  782,  782,  782,  782,  782,  782,  782,  782,

      782,  782,  782,  782,  782,  782,  782,  782,  782,  782,
      782,  782,  782,  782,  782,  782,  782,  782,  782,  782,
      782,  788,  782,  782,  782,  782,  782,  782,  782,  782,
      782,  782,  782,  782,  782,  782,  782,  782,  782,  782,
      782,  782,  782,  782,  782,  782,  782,  782,  782,  782,
      782,  782,  782,  782,  782,  782,  782,  782,  782,  782,
      782,  782,  782,  782,  782,  782,  782,  782,  782,  782,
      782,  782,  782,  782,  782,  782,  782,  782,  782,  782,
      782,  782,  782,  782,  782,  782,  782,  782,  782,  782,
      782,  782,  782,  782,  782,  782,  782,  782,  782,  782,

      782,  782,  782,  782,  782,  782,  782,  782,  782,  782,
      782,  782,  782,  782,  782,  782,  782,  782,  782,  782,
      782,  782,  782,  782,  782,  782,  782,  782,  782,  782,
      782,  782,  782,  782,  782,  782,  782,  782,  782,  782,
      782,  782,  782,  782,  782,  782,  782,  782,  782,  782,
      782,  782,  782,  782,  782,  782,  782,  782,  782,  782,
      782,  782,  782,  782,  782,  782,  782,  782,  782,  782,
      782,  782,  782,  782,  782,  782,  782,  782,  782,  782,
      782,  782,  782,  782,  782,  782,  782,  782,  782,  782,
      782,  782,  782,  782,  782,  782,  782,  782,  782,  782,

      782,  782,  782,  782,  782,  782,  782,  782,  782,  782,
      782,  782,  782,  782,  782,  782,  782,  782,  782,  782,
      782,  782,  782,  782,  782,  782,  782,  782,  782,  782,
      782,  782,  782,  782,  782,  782,  782,  782,  782,  782,
      782,  782,  782,  782,  782,  782,  782,  782,  782,  782,
      782,  782,  782,  782,  782,  782,  782,  782,  782,  782,
      782,  782,  782,  782,  782,  782,  782,  782,  782,  782,
      782,  782,  782,  782,  782,  782,  782,  782,  782,  782,
      782,  782,  782,  782,  782,  782,  782,  782,  782,  782,
      782,  782,  782,  782,  782,  782,  782,  782,  782,  782,

      782,  782,  782,  782,  782,  782,  782,  782,  782,  782,
      782,  782,  782,  782,  782,  782,  782,  782,  782,  782,
      782,  782,  782,  782,  782,  782,  782,  782,  782,  782,
      782,  782,  782,  782,  782,  782,  782,  782,  782,  782,
      782,  782,  782,  782,  782,  782,  782,  782,  782,  782,
      782,  782,  782,  782,  782,  782,  782,  782,  782,  782,
      782,  782,  782,  782,  782,  782,  782,  782,  782,  782,
      782,  782,  782,  782,  782,  782,  782,  782,  782,  782,
      782,  782,  782,  782,  782,  782,  782,  782,  782,  782,
      782,  782,  782,  782,  782,  782,  782,  782,  782,  782,

      782,  782,  782,  782,  782,  782,  782,  782,  782,  782,
      782,  782,  782,  782,  782,  782,  782,  782,  782,  782,
      782,  782,  782,  782,  782,  782,  782,  782,  782,  782,
      782,  782,  782,  782,  782,  782,  782,  782,  782,  782,
      782,  782,  782,  782,  782,  782,  782,  782,  782,  782,
      782,  782,  782,  782,  782,  782,  782,  782,  782,  782,
      782,  782,  782,  782,  782,  782,  782,  782,  782,  782,
      782,  782,  782,  782,  782,  782,  782,  782,  782,  782,
      782,  782,  782,  782,  782,  782,  782,  782,  782,  782,
      782,  782,  782,  782,  782,  782,  782,  782,  782,  782,

      782,  782,  782,  782,  782,  782,  782,  782,  782,  782,
      782,  782,  782,  782,  782,  782,  789,  782,  782,  782,
      782,  782,  782,  782,  782,  782,  782,  782,  782,  782,
      790,  782,  782,  782,  782,  782,  782,  782,  782,  782,
      782,  782,  782,  782,  789,  782,  782,  782,  782,  782,
      782,  782,  782,  782,  782,  782,  782,  782,  782,  782,
      782,  782,  782,  782,  782,  782,  782,  782,  782,  782,
      782,  782,  782,  782,  782,  782,  782,  782,  782,  782,
      782,    0,  782,  782,  782,  782,  782,  782,  782,  782
    } ;

static yyconst flex_int16_t yy_nxt[880] =
    {   0,
        4,    5,    6,    7,    8,    4,    4,    9,    4,    4,
        4,    4,    4,    4,    4,    4,   10,   11,   12,   13,
       14,   15,   16,   17,   18,   19,   20,   21,   22,   23,
       24,   25,   26,   27,   28,   29,   30,    4,   31,    4,
        4,   34,   36,   45,   54,   48,   68,   37,   58,   88,
      730,   60,   90,   35,   38,   91,   59,   96,   97,   61,
       49,  101,   46,   55,   62,  102,   69,   89,   50,  159,
       76,   63,  160,   51,   76,   39,   40,   64,   41,   42,
       52,   65,   43,   44,   70,  106,  118,  104,   71,   77,
       66,  105,  339,  107,  110,  119,   67,   72,   48,  111,

       73,  112,  340,   74,   78,   79,  113,  717,   80,  341,
       81,   82,   76,  150,  115,   83,   76,  146,  157,   84,
       85,  151,  158,  116,  117,  161,  189,  191,  193,  152,
      204,  153,  395,  396,  190,  192,  194,  232,  162,  213,
      214,  215,  138,  138,  138,  138,  138,  138,  782,  242,
      243,  233,  782,  146,  380,  384,  345,  205,  224,  244,
      225,  245,  246,  247,  226,  227,  255,  278,  228,  346,
      385,  248,  381,  279,  256,  229,  397,  398,  230,  263,
      737,  402,  264,  403,  265,  266,  267,  268,  738,  285,
      269,  286,  288,  270,  289,  271,  291,  294,  292,  295,

      272,  328,  297,  287,  298,  300,  290,  301,  329,  342,
      293,  296,  405,  343,  330,  739,  299,  331,  417,  302,
      305,  406,  306,  307,  316,  308,  309,  344,  310,  418,
      740,  311,  312,  437,  313,  483,  314,  484,  317,  318,
      319,  523,  488,  320,  592,  563,  438,  489,  672,  670,
      674,  741,  676,  742,  524,  671,  743,  593,  677,  744,
      746,  622,  747,  748,  749,  673,  750,  675,  782,  751,
      623,  732,  733,  734,  735,  736,  624,  752,  625,  753,
      754,  752,  759,  760,  761,  763,  765,  767,  769,  770,
      762,  769,  773,  768,  774,  775,  776,  755,  777,  778,

      779,  780,  764,  766,  781,  729,  756,  728,  727,  726,
      725,  771,  757,  724,  758,  723,  722,  721,  720,  719,
      718,  717,  716,  715,  772,   98,   98,  714,   98,   98,
       98,   98,  109,  713,  712,  109,  109,  124,  711,  710,
      124,  124,  124,  138,  709,  708,  138,  147,  707,  147,
      147,  147,  222,  222,  731,  706,  705,  731,  731,  731,
      745,  745,  745,  704,  703,  702,  701,  700,  699,  698,
      697,  696,  695,  694,  693,  692,  691,  690,  689,  688,
      687,  686,  685,  684,  683,  682,  681,  680,  679,  678,
      669,  668,  667,  666,  665,  664,  663,  662,  661,  660,

      659,  658,  657,  656,  655,  654,  653,  652,  651,  650,
      649,  648,  647,  646,  645,  644,  643,  642,  641,  640,
      639,  638,  637,  636,  635,  634,  633,  632,  631,  630,
      629,  628,  627,  626,  621,  620,  619,  618,  617,  616,
      615,  614,  613,  612,  611,  610,  609,  608,  607,  606,
      605,  604,  603,  602,  601,  600,  599,  598,  597,  596,
      595,  594,  591,  590,  589,  588,  587,  586,  585,  584,
      583,  582,  581,  580,  579,  578,  577,  576,  575,  574,
      573,  572,  571,  570,  569,  568,  567,  566,  565,  564,
      563,  562,  561,  560,  559,  558,  557,  556,  555,  554,

      553,  552,  551,  550,  549,  548,  547,  546,  545,  544,
      543,  542,  541,  540,  539,  538,  537,  536,  535,  534,
      533,  532,  531,  530,  529,  528,  527,  526,  525,  522,
      521,  520,  519,  518,  517,  516,  515,  514,  513,  512,
      511,  510,  509,  508,  507,  506,  505,  504,  503,  502,
      501,  500,  499,  498,  497,  496,  495,  494,  493,  492,
      491,  490,  487,  486,  485,  482,  481,  480,  479,  478,
      477,  476,  475,  474,  473,  472,  471,  470,  469,  468,
      467,  466,  465,  464,  463,  462,  461,  460,  459,  458,
      457,  456,  455,  454,  453,  452,  451,  450,  449,  448,

      447,  446,  445,  444,  443,  442,  441,  440,  439,  436,
      435,  434,  433,  432,  431,  430,  429,  428,  427,  426,
      425,  424,  423,  422,  421,  420,  419,  416,  415,  414,
      413,  412,  411,  410,  409,  408,  407,  404,  401,  400,
      399,  394,  393,  392,  391,  390,  389,  388,  387,  386,
      383,  382,  379,  378,  377,  376,  375,  374,  373,  372,
      371,  370,  369,  368,  367,  366,  365,  364,  363,  362,
      361,  360,  359,  358,  357,  356,  355,  354,  353,  352,
      351,  350,  349,  348,  347,  338,  337,  336,  335,  334,
      333,  332,  327,  326,  325,  324,  323,  322,  321,  315,

      304,  303,  284,  283,  282,  281,  280,  277,  276,  275,
      274,  273,  262,  261,  260,  259,  258,  257,  254,  253,
      252,  251,  250,  249,  241,  240,  239,  238,  237,  236,
      235,  234,  231,  223,  221,  220,  219,  218,  217,  216,
      212,  211,  210,  209,  208,  207,  206,  203,  202,  201,
      782,  200,  199,  198,  197,  196,  195,  188,  187,  186,
      185,  184,  782,  183,  182,  181,  180,  179,  178,  177,
      176,  175,   99,  174,  173,  172,  171,  170,  169,  168,
      167,  166,  165,  164,  163,  156,  155,  154,  149,  148,
      145,  144,  143,  142,  141,  140,  139,   68,  137,  136,

      135,  134,  133,  132,  131,  130,  129,  128,  127,  126,
      125,   54,  123,  122,  121,  120,  114,   45,  108,  103,
      100,   99,   95,   94,   93,   92,   32,   87,   86,   75,
       57,   56,   53,   47,   33,   32,  782,    3,  782,  782,
      782,  782,  782,  782,  782,  782,  782,  782,  782,  782,
      782,  782,  782,  782,  782,  782,  782,  782,  782,  782,
      782,  782,  782,  782,  782,  782,  782,  782,  782,  782,
      782,  782,  782,  782,  782,  782,  782,  782,  782
    } ;

static yyconst flex_int16_t yy_chk[880] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,   10,   11,   13,   17,   15,   23,   11,   20,   30,
      716,   21,   31,   10,   12,   31,   20,   37,   37,   21,
       15,   40,   13,   17,   21,   40,   23,   30,   15,   84,
       26,   21,   84,   15,   26,   12,   12,   22,   12,   12,
       15,   22,   12,   12,   24,   43,   49,   42,   24,   26,
       22,   42,  219,   43,   46,   49,   22,   24,   48,   46,

       24,   46,  219,   24,   26,   27,   46,  717,   27,  219,
       27,   27,   76,   79,   48,   27,   76,   76,   83,   27,
       27,   79,   83,   48,   48,   85,  115,  116,  117,   79,
      129,   79,  281,  281,  115,  116,  117,  152,   85,  137,
      137,  137,  138,  138,  138,  138,  138,  138,  147,  161,
      161,  152,  147,  147,  268,  271,  224,  129,  150,  161,
      150,  162,  162,  162,  150,  150,  169,  183,  150,  224,
      271,  162,  268,  183,  169,  150,  282,  282,  150,  176,
      721,  305,  176,  305,  176,  176,  176,  176,  723,  189,
      176,  189,  190,  176,  190,  176,  191,  192,  191,  192,

      176,  208,  193,  189,  193,  194,  190,  194,  208,  223,
      191,  192,  307,  223,  208,  724,  193,  208,  318,  194,
      198,  307,  198,  198,  200,  198,  198,  223,  198,  318,
      725,  198,  198,  339,  198,  399,  198,  399,  200,  200,
      200,  446,  405,  200,  519,  563,  339,  405,  623,  622,
      624,  726,  625,  728,  446,  622,  729,  519,  625,  730,
      737,  563,  738,  740,  741,  623,  744,  624,  745,  746,
      563,  718,  718,  718,  718,  718,  563,  747,  563,  750,
      751,  752,  753,  754,  755,  756,  757,  758,  759,  760,
      755,  769,  770,  758,  771,  772,  773,  752,  774,  775,

      777,  778,  756,  757,  779,  715,  752,  714,  713,  712,
      710,  769,  752,  709,  752,  708,  705,  703,  702,  700,
      699,  698,  697,  695,  769,  783,  783,  693,  783,  783,
      783,  783,  784,  692,  691,  784,  784,  785,  690,  688,
      785,  785,  785,  786,  687,  684,  786,  787,  683,  787,
      787,  787,  788,  788,  789,  681,  669,  789,  789,  789,
      790,  790,  790,  667,  665,  664,  662,  658,  657,  654,
      653,  652,  651,  650,  648,  647,  646,  645,  644,  643,
      642,  641,  639,  638,  633,  632,  630,  629,  628,  627,
      620,  619,  618,  617,  616,  615,  614,  613,  612,  611,

      610,  608,  606,  605,  603,  602,  601,  600,  599,  598,
      597,  596,  595,  594,  593,  592,  591,  590,  589,  588,
      586,  585,  584,  583,  580,  578,  576,  575,  572,  570,
      568,  567,  565,  564,  562,  561,  559,  558,  557,  556,
      553,  549,  548,  547,  546,  544,  543,  542,  541,  540,
      539,  537,  534,  530,  529,  526,  525,  524,  523,  522,
      521,  520,  518,  517,  516,  515,  514,  513,  512,  511,
      510,  509,  508,  507,  505,  504,  503,  502,  501,  500,
      499,  498,  497,  496,  495,  494,  493,  492,  491,  490,
      489,  488,  487,  486,  485,  484,  483,  482,  481,  480,

      478,  477,  476,  475,  474,  473,  472,  471,  470,  469,
      468,  467,  466,  465,  464,  463,  461,  460,  458,  457,
      456,  455,  454,  453,  451,  450,  449,  448,  447,  445,
      444,  440,  439,  438,  437,  436,  435,  434,  432,  431,
      430,  428,  427,  426,  425,  424,  423,  422,  419,  418,
      417,  416,  415,  414,  413,  412,  411,  410,  409,  408,
      407,  406,  404,  402,  400,  394,  393,  392,  391,  390,
      389,  387,  385,  384,  383,  382,  381,  378,  377,  375,
      374,  373,  372,  371,  370,  369,  368,  367,  366,  365,
      364,  363,  362,  361,  360,  357,  356,  355,  354,  353,

      351,  350,  346,  345,  344,  343,  342,  341,  340,  338,
      337,  336,  335,  334,  333,  332,  331,  330,  329,  328,
      327,  326,  325,  322,  321,  320,  319,  317,  316,  315,
      314,  313,  312,  311,  310,  309,  308,  306,  303,  284,
      283,  280,  279,  278,  277,  276,  275,  274,  273,  272,
      270,  269,  267,  266,  265,  264,  263,  261,  260,  259,
      258,  257,  255,  254,  253,  252,  251,  249,  248,  244,
      241,  239,  238,  237,  235,  234,  233,  232,  231,  230,
      229,  228,  227,  226,  225,  218,  217,  216,  212,  211,
      210,  209,  207,  206,  205,  204,  203,  202,  201,  199,

      197,  196,  188,  187,  186,  185,  184,  182,  181,  180,
      179,  177,  175,  174,  173,  172,  171,  170,  168,  167,
      166,  165,  164,  163,  160,  159,  158,  157,  156,  155,
      154,  153,  151,  149,  145,  144,  143,  141,  140,  139,
      136,  135,  134,  133,  132,  131,  130,  128,  126,  125,
      124,  123,  122,  121,  120,  119,  118,  114,  113,  112,
      111,  110,  109,  108,  107,  106,  105,  104,  103,  102,
      101,  100,   99,   97,   96,   95,   94,   93,   92,   91,
       90,   89,   88,   87,   86,   82,   81,   80,   78,   77,
       75,   74,   73,   72,   71,   70,   69,   68,   67,   66,

       65,   64,   63,   62,   61,   60,   59,   58,   57,   56,
       55,   54,   53,   52,   51,   50,   47,   45,   44,   41,
       39,   38,   36,   35,   34,   33,   32,   29,   28,   25,
       19,   18,   16,   14,    9,    5,    3,  782,  782,  782,
      782,  782,  782,  782,  782,  782,  782,  782,  782,  782,
      782,  782,  782,  782,  782,  782,  782,  782,  782,  782,
      782,  782,  782,  782,  782,  782,  782,  782,  782,  782,
      782,  782,  782,  782,  782,  782,  782,  782,  782
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[198] =
    {   0,
0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,     };

extern int yy_flex_debug;
int yy_flex_debug = 0;

static yy_state_type *yy_state_buf=0, *yy_state_ptr=0;
static char *yy_full_match;
static int yy_lp;
#define REJECT \
{ \
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */ \
yy_cp = (yy_full_match); /* restore poss. backed-over text */ \
++(yy_lp); \
goto find_rule; \
}

static int yy_more_offset = 0;
static int yy_prev_more_offset = 0;
#define yymore() ((yy_more_offset) = yy_flex_strlen( yytext ))
#define YY_NEED_STRLEN
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET \
	{ \
	(yy_more_offset) = (yy_prev_more_offset); \
	yyleng -= (yy_more_offset); \
	}
#ifndef YYLMAX
#define YYLMAX 8192
#endif

char yytext[YYLMAX];
char *yytext_ptr;
#line 1 "./pl.l"
#line 2 "./pl.l"
/* pl.l: Lexical analysis of property list files.

This file is part of Omega,
which is based on the web2c distribution of TeX,

Copyright (c) 1994--2001 John Plaice and Yannis Haralambous
Copyright (c) 2002 Roozbeh Pournader

Omega is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

Omega is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Omega; if not, write to the Free Software Foundation, Inc.,
59 Temple Place, Suite 330, Boston, MA 02111-1307, USA.

*/

#include <string.h>
#ifdef WIN32
#include <win32lib.h>
#endif
#include "parser.h"
#include "kpathsea/types.h"
#include "y_tab.h"
#include "manifests.h"
#include "error_routines.h"
#ifdef __cplusplus
#define yyinput input
#endif

int line_number = 1;
extern YYSTYPE yylval;

/* POTENTIAL BUG: saved_text could be run over; should check */
#define MAX_PTR 10000
char saved_text[MAX_PTR];

extern void scan_int(unsigned);
extern void scan_char(void);
extern void scan_fix(void);
extern void scan_string(char *, unsigned, unsigned);
extern void scan_hex_string();

/* from kpathsea, but avoid including kpathsea header files */
extern char *xstrdup (const char *);

#define KEEP_MIN      0
#define KEEP_NONE     0
#define KEEP_ALL      1
#define KEEP_CONVERT  2
#define KEEP_MAX      2

#define BASE_MIN       2
#define BASE_MAX      16

/* For Solaris's lex, to increase tables sizes --RP */
/* Space before number keeps ancient flex happy. */
#line 1036 "lex.yy.c"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap (void );
#else
extern int yywrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 80 "./pl.l"


#line 1190 "lex.yy.c"

	if ( (yy_init) )
		{
		(yy_init) = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

        if ( ! (yy_state_buf) )
            (yy_state_buf) = (yy_state_type *)yyalloc(YY_BUF_SIZE + 2  );

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer(yyin,YY_BUF_SIZE );
		}

		yy_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);

		(yy_state_ptr) = (yy_state_buf);
		*(yy_state_ptr)++ = yy_current_state;

yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 783 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*(yy_state_ptr)++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 838 );

yy_find_action:
		yy_current_state = *--(yy_state_ptr);
		(yy_lp) = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( (yy_lp) && (yy_lp) < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[(yy_lp)];
					{
					(yy_full_match) = yy_cp;
					break;
					}
				}
			--yy_cp;
			yy_current_state = *--(yy_state_ptr);
			(yy_lp) = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = (yy_prev_more_offset); yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
YY_RULE_SETUP
#line 82 "./pl.l"
{}
	YY_BREAK
case 2:
/* rule 2 can match eol */
YY_RULE_SETUP
#line 83 "./pl.l"
{line_number++; }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 85 "./pl.l"
return(LEFT);
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 86 "./pl.l"
return(RIGHT);
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 88 "./pl.l"
{scan_int(8);  return(NUMBER); }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 89 "./pl.l"
{scan_int(10); return(NUMBER); }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 90 "./pl.l"
{scan_int(16); return(NUMBER); }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 91 "./pl.l"
{scan_char();  return(NUMBER); }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 92 "./pl.l"
{scan_fix();   return(FIX);    }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 94 "./pl.l"
{scan_string("CODINGSCHEME", KEEP_CONVERT, LEN_CODING_SCHEME);
                 return(CODINGSCHEME); }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 96 "./pl.l"
{scan_string("FAMILY", KEEP_CONVERT, LEN_FAMILY);
                 return(FAMILY); }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 98 "./pl.l"
{scan_string("VTITLE", KEEP_ALL, LEN_VTITLE);
                 return(VTITLE); }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 100 "./pl.l"
{scan_string("FONTNAME", KEEP_ALL, LEN_FONT_NAME);
                 return(FONTNAME); }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 102 "./pl.l"
{scan_string("FONTAREA", KEEP_ALL, LEN_FONT_AREA);
                 return(FONTAREA); }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 104 "./pl.l"
{scan_string("SPECIAL", KEEP_ALL, 0);
                 return(SPECIAL); }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 106 "./pl.l"
{scan_string("COMMENT", KEEP_NONE, 0);
                 return(COMMENT); }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 109 "./pl.l"
{scan_hex_string(); return(SPECIALHEX); }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 112 "./pl.l"
{yylval.yint=1; return(SEVENBITSAFEFLAG); }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 113 "./pl.l"
{yylval.yint=0; return(SEVENBITSAFEFLAG); }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 115 "./pl.l"
return(CHECKSUM);
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 116 "./pl.l"
return(DESIGNSIZE);
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 117 "./pl.l"
return(DESIGNUNITS);
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 118 "./pl.l"
return(FACE);
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 119 "./pl.l"
return(HEADER);
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 120 "./pl.l"
return(BOUNDARYCHAR);
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 121 "./pl.l"
return(FONTDIMEN);
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 122 "./pl.l"
return(LIGTABLE);
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 123 "./pl.l"
return(CHARACTER);
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 125 "./pl.l"
return(PARAMETER);
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 126 "./pl.l"
return(LABEL);
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 127 "./pl.l"
return(KRN);
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 128 "./pl.l"
return(STOP);
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 129 "./pl.l"
return(SKIP);
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 130 "./pl.l"
return(NEXTLARGER);
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 131 "./pl.l"
return(VARCHAR);
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 133 "./pl.l"
{yylval.yint = C_WD; return(CHARMEASURE); }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 134 "./pl.l"
{yylval.yint = C_HT; return(CHARMEASURE); }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 135 "./pl.l"
{yylval.yint = C_DP; return(CHARMEASURE); }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 136 "./pl.l"
{yylval.yint = C_IC; return(CHARMEASURE); }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 138 "./pl.l"
{yylval.yint = E_TOP; return(EXTEN); }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 139 "./pl.l"
{yylval.yint = E_MID; return(EXTEN); }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 140 "./pl.l"
{yylval.yint = E_BOT; return(EXTEN); }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 141 "./pl.l"
{yylval.yint = E_REP; return(EXTEN); }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 143 "./pl.l"
{yylval.yint = L_0;    return(LIG); }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 144 "./pl.l"
{yylval.yint = L_B;    return(LIG); }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 145 "./pl.l"
{yylval.yint = L_A;    return(LIG); }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 146 "./pl.l"
{yylval.yint = L_AB;   return(LIG); }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 147 "./pl.l"
{yylval.yint = L_Bx;   return(LIG); }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 148 "./pl.l"
{yylval.yint = L_Ax;   return(LIG); }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 149 "./pl.l"
{yylval.yint = L_ABx;  return(LIG); }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 150 "./pl.l"
{yylval.yint = L_ABxx; return(LIG); }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 152 "./pl.l"
{yylval.yint = F_MRR; return(NUMBER); }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 153 "./pl.l"
{yylval.yint = F_MIR; return(NUMBER); }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 154 "./pl.l"
{yylval.yint = F_BRR; return(NUMBER); }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 155 "./pl.l"
{yylval.yint = F_BIR; return(NUMBER); }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 156 "./pl.l"
{yylval.yint = F_LRR; return(NUMBER); }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 157 "./pl.l"
{yylval.yint = F_LIR; return(NUMBER); }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 158 "./pl.l"
{yylval.yint = F_MRC; return(NUMBER); }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 159 "./pl.l"
{yylval.yint = F_MIC; return(NUMBER); }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 160 "./pl.l"
{yylval.yint = F_BRC; return(NUMBER); }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 161 "./pl.l"
{yylval.yint = F_BIC; return(NUMBER); }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 162 "./pl.l"
{yylval.yint = F_LRC; return(NUMBER); }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 163 "./pl.l"
{yylval.yint = F_LIC; return(NUMBER); }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 164 "./pl.l"
{yylval.yint = F_MRE; return(NUMBER); }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 165 "./pl.l"
{yylval.yint = F_MIE; return(NUMBER); }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 166 "./pl.l"
{yylval.yint = F_BRE; return(NUMBER); }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 167 "./pl.l"
{yylval.yint = F_BIE; return(NUMBER); }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 168 "./pl.l"
{yylval.yint = F_LRE; return(NUMBER); }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 169 "./pl.l"
{yylval.yint = F_LIE; return(NUMBER); }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 171 "./pl.l"
{yylval.yint = P_SLANT;      return(NAMEDPARAMETER); }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 172 "./pl.l"
{yylval.yint = P_SPACE;      return(NAMEDPARAMETER); }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 173 "./pl.l"
{yylval.yint = P_STRETCH;    return(NAMEDPARAMETER); }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 174 "./pl.l"
{yylval.yint = P_SHRINK;     return(NAMEDPARAMETER); }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 175 "./pl.l"
{yylval.yint = P_XHEIGHT;    return(NAMEDPARAMETER); }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 176 "./pl.l"
{yylval.yint = P_QUAD;       return(NAMEDPARAMETER); }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 177 "./pl.l"
{yylval.yint = P_EXTRASPACE; return(NAMEDPARAMETER); }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 178 "./pl.l"
{yylval.yint = P_NUM1;       return(NAMEDPARAMETER); }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 179 "./pl.l"
{yylval.yint = P_NUM2;       return(NAMEDPARAMETER); }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 180 "./pl.l"
{yylval.yint = P_NUM3;       return(NAMEDPARAMETER); }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 181 "./pl.l"
{yylval.yint = P_DENOM1;     return(NAMEDPARAMETER); }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 182 "./pl.l"
{yylval.yint = P_DENOM2;     return(NAMEDPARAMETER); }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 183 "./pl.l"
{yylval.yint = P_SUP1;       return(NAMEDPARAMETER); }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 184 "./pl.l"
{yylval.yint = P_SUP2;       return(NAMEDPARAMETER); }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 185 "./pl.l"
{yylval.yint = P_SUP3;       return(NAMEDPARAMETER); }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 186 "./pl.l"
{yylval.yint = P_SUB1;       return(NAMEDPARAMETER); }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 187 "./pl.l"
{yylval.yint = P_SUB2;       return(NAMEDPARAMETER); }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 188 "./pl.l"
{yylval.yint = P_SUPDROP;    return(NAMEDPARAMETER); }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 189 "./pl.l"
{yylval.yint = P_SUBDROP;    return(NAMEDPARAMETER); }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 190 "./pl.l"
{yylval.yint = P_DELIM1;     return(NAMEDPARAMETER); }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 191 "./pl.l"
{yylval.yint = P_DELIM2;     return(NAMEDPARAMETER); }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 192 "./pl.l"
{yylval.yint = P_AXISHEIGHT; return(NAMEDPARAMETER); }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 194 "./pl.l"
{yylval.yint = P_DEFAULTRULETHICKNESS;
			 return(NAMEDPARAMETER); }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 196 "./pl.l"
{yylval.yint = P_BIGOPSPACING1; return(NAMEDPARAMETER); }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 197 "./pl.l"
{yylval.yint = P_BIGOPSPACING2; return(NAMEDPARAMETER); }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 198 "./pl.l"
{yylval.yint = P_BIGOPSPACING3; return(NAMEDPARAMETER); }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 199 "./pl.l"
{yylval.yint = P_BIGOPSPACING4; return(NAMEDPARAMETER); }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 200 "./pl.l"
{yylval.yint = P_BIGOPSPACING5; return(NAMEDPARAMETER); }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 202 "./pl.l"
{return(MAPFONT); }
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 203 "./pl.l"
{return(FONTCHECKSUM); }
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 204 "./pl.l"
{return(FONTAT); }
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 205 "./pl.l"
{return(FONTDSIZE); }
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 206 "./pl.l"
{return(MAP); }
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 207 "./pl.l"
{return(SELECTFONT); }
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 208 "./pl.l"
{return(SETCHAR); }
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 209 "./pl.l"
{return(SETRULE); }
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 210 "./pl.l"
{return(PUSH); }
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 211 "./pl.l"
{return(POP); }
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 213 "./pl.l"
{yylval.yint = M_RIGHT; return(MOVE); }
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 214 "./pl.l"
{yylval.yint = M_LEFT;  return(MOVE); }
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 215 "./pl.l"
{yylval.yint = M_UP;    return(MOVE); }
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 216 "./pl.l"
{yylval.yint = M_DOWN;  return(MOVE); }
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 218 "./pl.l"
return(OFMLEVEL);
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 219 "./pl.l"
{yylval.yint = ACC_TOP; return(ACCENT); }
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 220 "./pl.l"
{yylval.yint = ACC_MID; return(ACCENT); }
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 221 "./pl.l"
{yylval.yint = ACC_BOT; return(ACCENT); }
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 223 "./pl.l"
{yylval.yint = DIR_ORD+DIR_TL; return(FONTDIR);}
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 224 "./pl.l"
{yylval.yint = DIR_ORD+DIR_LT; return(FONTDIR);}
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 225 "./pl.l"
{yylval.yint = DIR_ORD+DIR_TR; return(FONTDIR);}
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 226 "./pl.l"
{yylval.yint = DIR_ORD+DIR_LB; return(FONTDIR);}
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 227 "./pl.l"
{yylval.yint = DIR_ORD+DIR_BL; return(FONTDIR);}
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 228 "./pl.l"
{yylval.yint = DIR_ORD+DIR_RT; return(FONTDIR);}
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 229 "./pl.l"
{yylval.yint = DIR_ORD+DIR_BR; return(FONTDIR);}
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 230 "./pl.l"
{yylval.yint = DIR_ORD+DIR_RB; return(FONTDIR);}
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 231 "./pl.l"
{yylval.yint = DIR_NAT+DIR_TL; return(FONTDIR);}
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 232 "./pl.l"
{yylval.yint = DIR_NAT+DIR_LT; return(FONTDIR);}
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 233 "./pl.l"
{yylval.yint = DIR_NAT+DIR_TR; return(FONTDIR);}
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 234 "./pl.l"
{yylval.yint = DIR_NAT+DIR_LB; return(FONTDIR);}
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 235 "./pl.l"
{yylval.yint = DIR_NAT+DIR_BL; return(FONTDIR);}
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 236 "./pl.l"
{yylval.yint = DIR_NAT+DIR_RT; return(FONTDIR);}
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 237 "./pl.l"
{yylval.yint = DIR_NAT+DIR_BR; return(FONTDIR);}
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 238 "./pl.l"
{yylval.yint = DIR_NAT+DIR_RB; return(FONTDIR);}
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 240 "./pl.l"
return(FONTIVALUE);
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 241 "./pl.l"
return(FONTFVALUE);
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 242 "./pl.l"
return(FONTMVALUE);
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 243 "./pl.l"
return(FONTPENALTY);
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 244 "./pl.l"
return(FONTRULE);
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 245 "./pl.l"
return(FONTGLUE);
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 247 "./pl.l"
return(IVALUE);
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 248 "./pl.l"
return(FVALUE);
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 249 "./pl.l"
return(MVALUE);
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 250 "./pl.l"
return(PENALTY);
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 251 "./pl.l"
return(RULE);
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 252 "./pl.l"
return(GLUE);
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 254 "./pl.l"
return(IVALUEVAL);
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 255 "./pl.l"
return(FVALUEVAL);
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 256 "./pl.l"
return(MVALUEVAL);
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 257 "./pl.l"
return(PENALTYVAL);
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 259 "./pl.l"
{ yylval.yint = RULE_WD; return(RULEMEASURE); }
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 260 "./pl.l"
{ yylval.yint = RULE_HT; return(RULEMEASURE); }
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 261 "./pl.l"
{ yylval.yint = RULE_DP; return(RULEMEASURE); }
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 263 "./pl.l"
return(GLUEWD);
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 264 "./pl.l"
{ yylval.yint = GLUE_STRETCH; return(GLUESHRINKSTRETCH); }
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 265 "./pl.l"
{ yylval.yint = GLUE_SHRINK; return(GLUESHRINKSTRETCH); }
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 267 "./pl.l"
return(GLUETYPE);
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 268 "./pl.l"
return(GLUERULE);
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 269 "./pl.l"
return(GLUECHAR);
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 271 "./pl.l"
return(CHARIVALUE);
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 272 "./pl.l"
return(CHARFVALUE);
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 273 "./pl.l"
return(CHARMVALUE);
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 274 "./pl.l"
return(CHARPENALTY);
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 275 "./pl.l"
return(CHARRULE);
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 276 "./pl.l"
return(CHARGLUE);
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 278 "./pl.l"
return(CKRN);
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 279 "./pl.l"
return(CGLUE);
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 280 "./pl.l"
return(CPENALTY);
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 281 "./pl.l"
return(CPENGLUE);
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 282 "./pl.l"
return(CLABEL);
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 284 "./pl.l"
return(CHARREPEAT);
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 287 "./pl.l"
{yylval.yint = O_FILLL; return(GLUEORDER); }
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 288 "./pl.l"
{yylval.yint = O_FILL;  return(GLUEORDER); }
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 289 "./pl.l"
{yylval.yint = O_FIL;   return(GLUEORDER); }
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 290 "./pl.l"
{yylval.yint = O_FI;    return(GLUEORDER); }
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 291 "./pl.l"
{yylval.yint = O_UNIT;  return(GLUEORDER); }
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 293 "./pl.l"
{yylval.yint = K_NORMAL;   return(GLUEKIND); }
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 294 "./pl.l"
{yylval.yint = K_ALEADERS; return(GLUEKIND); }
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 295 "./pl.l"
{yylval.yint = K_CLEADERS; return(GLUEKIND); }
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 296 "./pl.l"
{yylval.yint = K_XLEADERS; return(GLUEKIND); }
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 298 "./pl.l"
{yylval.yint = C_SECWD;        return(CHARMEASURE); }
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 299 "./pl.l"
{yylval.yint = C_SECHT;        return(CHARMEASURE); }
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 300 "./pl.l"
{yylval.yint = C_SECDP;        return(CHARMEASURE); }
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 301 "./pl.l"
{yylval.yint = C_SECIC;        return(CHARMEASURE); }
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 303 "./pl.l"
{yylval.yint = C_P_TOPAXIS;    return(CHARMEASURE); }
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 304 "./pl.l"
{yylval.yint = C_P_TOPAXISBIs; return(CHARMEASURE); }
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 305 "./pl.l"
{yylval.yint = C_P_BOTAXIS;    return(CHARMEASURE); }
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 306 "./pl.l"
{yylval.yint = C_P_BOTAXISBIS; return(CHARMEASURE); }
	YY_BREAK
case 186:
YY_RULE_SETUP
#line 307 "./pl.l"
{yylval.yint = C_P_MIDHOR;     return(CHARMEASURE); }
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 308 "./pl.l"
{yylval.yint = C_P_MIDVERT;    return(CHARMEASURE); }
	YY_BREAK
case 188:
YY_RULE_SETUP
#line 309 "./pl.l"
{yylval.yint = C_P_BASESLANT;  return(CHARMEASURE); }
	YY_BREAK
case 189:
YY_RULE_SETUP
#line 311 "./pl.l"
{yylval.yint = C_S_TOPAXIS;    return(CHARMEASURE); }
	YY_BREAK
case 190:
YY_RULE_SETUP
#line 312 "./pl.l"
{yylval.yint = C_S_TOPAXISBIs; return(CHARMEASURE); }
	YY_BREAK
case 191:
YY_RULE_SETUP
#line 313 "./pl.l"
{yylval.yint = C_S_BOTAXIS;    return(CHARMEASURE); }
	YY_BREAK
case 192:
YY_RULE_SETUP
#line 314 "./pl.l"
{yylval.yint = C_S_BOTAXISBIS; return(CHARMEASURE); }
	YY_BREAK
case 193:
YY_RULE_SETUP
#line 315 "./pl.l"
{yylval.yint = C_S_MIDHOR;     return(CHARMEASURE); }
	YY_BREAK
case 194:
YY_RULE_SETUP
#line 316 "./pl.l"
{yylval.yint = C_S_MIDVERT;    return(CHARMEASURE); }
	YY_BREAK
case 195:
YY_RULE_SETUP
#line 317 "./pl.l"
{yylval.yint = C_S_BASESLANT;  return(CHARMEASURE); }
	YY_BREAK
case 196:
YY_RULE_SETUP
#line 319 "./pl.l"
{lex_error_1("unexpected character (%x); ignored",
                             yytext[0]);}
	YY_BREAK
case 197:
YY_RULE_SETUP
#line 321 "./pl.l"
ECHO;
	YY_BREAK
#line 2284 "lex.yy.c"
			case YY_STATE_EOF(INITIAL):
				yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart(yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	(yy_state_ptr) = (yy_state_buf);
	*(yy_state_ptr)++ = yy_current_state;

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 783 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*(yy_state_ptr)++ = yy_current_state;
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    
	register YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 783 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 782);
	if ( ! yy_is_jam )
		*(yy_state_ptr)++ = yy_current_state;

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart(yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		   
    yylineno++;
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin,YY_BUF_SIZE );
	}

	yy_init_buffer(YY_CURRENT_BUFFER,input_file );
	yy_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param str a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (yyconst char * yy_str )
{
    
	return yy_scan_bytes(yy_str,strlen(yy_str) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (yyconst char * bytes, int  len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) yyalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
        
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void yyset_lineno (int  line_number )
{
    
    yylineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  in_str )
{
        yyin = in_str ;
}

void yyset_out (FILE *  out_str )
{
        yyout = out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  bdebug )
{
        yy_flex_debug = bdebug ;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    yyfree ( (yy_state_buf) );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
    	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
    	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#undef YY_NEW_FILE
#undef YY_FLUSH_BUFFER
#undef yy_set_bol
#undef yy_new_buffer
#undef yy_set_interactive
#undef yytext_ptr
#undef YY_DO_BEFORE_ACTION

#ifdef YY_DECL_IS_OURS
#undef YY_DECL_IS_OURS
#undef YY_DECL
#endif
#line 321 "./pl.l"



/* added by Thomas Esser, suggested by Olaf Weber */
#ifdef yywrap
#undef yywrap
#endif

int
yywrap (void)
{ return 1; }

void
scan_int(unsigned base)
{
    register unsigned j, q = 0x10000 / base, c0=0, c1=0, i=1;

    if ((base<BASE_MIN) || (base>BASE_MAX))
        internal_error_1("scan_int (base=%d)", base);
    while ((yytext[i]==' ') || (yytext[i]=='\t')) {
        yytext[i] = ' ';
        i++;
        }
    for (; i<yyleng; i++) {
    	j = yytext[i];
    	if (j>='A') j = j + '0' + 10 - 'A' ;
    	c0 = base*c0 + (c1 / q);
    	c1 = base*(c1 % q) + j - '0';
    	if (c0 > 0xffff) {
      	    lex_error_s("numeric value (%s) too large; set to 0", yytext);
    	    c0=0; c1=0; break;
    	}
    }
    yylval.yint = c0 * 0x10000 + c1;
}

void
scan_fix(void)
{
    unsigned i=1;
    unsigned sign = 1;
    unsigned j=0;
    unsigned acc=0;
    unsigned int_part;
    unsigned fraction_digits[7];

    while ((yytext[i]==' ') || (yytext[i]=='\t') ||
           (yytext[i]=='+') || (yytext[i]=='-')) {
    	if (yytext[i]=='\t') yytext[i] = ' ';
    	if (yytext[i]=='-') sign *= -1;
    	i++;
    }
    acc=0;
    while ((i<yyleng) && (yytext[i]!='.')) {
    	acc = acc*10 + yytext[i]-'0';
    	i++;
    	if (acc >=0x800 ) {
    	    lex_error_s("fix value (%s) too large; set to 0", yytext);
    	    yylval.yfix = 0;
    	    return;
    	}
    }
    int_part = acc; acc = 0;
    if (i < yyleng) {
    	i++;
    	while ((i<yyleng) && j<7) {
    	    fraction_digits[j] = 0x200000*(yytext[i]-'0');
    	    i++; j++;
    	}
    	while (j>0) {acc = fraction_digits[--j] + acc / 10;}
    	acc = (acc + 10) / 20;
    }
    if ((acc > UNITY) && (int_part=2047)) {
    	lex_error_s("fix value (%s) too large; set to 0", yytext);
    	yylval.yfix = 0;
    	return;
    }
    yylval.yfix = sign * (int_part*UNITY + acc);
}

void
scan_char(void)
{
    register unsigned i=1;

    while ((yytext[i]==' ') || (yytext[i]=='\t')) i++;
    if ((yytext[i]<041) || (yytext[i]>0176) ||
        (yytext[i]=='(') || (yytext[i]==')')) {
        lex_error_1("C value (H %X) must be ASCII (not paren); "
                    "set to 'A'", yytext[i]);
    	yylval.yint = 'A';
    } else yylval.yint = yytext[i];
}

void
scan_string(char *attribute, unsigned keep, unsigned length)
{
    register unsigned c, saved_ptr = 0, paren_level = 0;
    unsigned error_msg = FALSE;

    if ((keep<KEEP_MIN) || (keep>KEEP_MAX))
        internal_error_1("scan_string (keep=%d)", keep);
    while (((c = input()) != EOF) &&
    	((c == ' ') || (c == '\t') || (c == '\n'))) {
    	if (c == '\n') {line_number++;}
    }
    if (c==EOF) fatal_error_s("EOF while scanning %s", attribute);
    while ((c != EOF) &&
    	((c != ')') || (paren_level>0))) {
    	if (c==')') {
            paren_level--;
            if (keep==KEEP_CONVERT) {
                lex_error_s_1("%s character (H %X) converted to slash",
                             attribute, c);
                c = '/';
            }
        } else if (c=='(') {
            paren_level++;
            if (keep==KEEP_CONVERT) {
                lex_error_s_1("%s character (H %X) converted to slash",
                             attribute, c);
                c = '/';
            }
    	} else if ((c<' ') || (c>='~')) {
            if (c=='\n') line_number++;
            if (keep==KEEP_CONVERT) {
                lex_error_s_1("%s character (H %X) converted to blank",
                             attribute, c);
                c = ' ';
            }
        }
    	if (saved_ptr<(MAX_PTR-3))
            saved_text[saved_ptr++] = c;
        else if (error_msg == FALSE) {
            lex_error_s_1("%s string longer than %d characters; truncating",
                          attribute, MAX_PTR);
            error_msg = TRUE;
        }
    	c = input();
    }
    if (c==EOF) fatal_error_s("EOF while scanning %s", attribute);
    unput(')');
    saved_text[saved_ptr++] = '\0';
    if (keep!=KEEP_NONE) {
        if ((length != 0) && (strlen(saved_text)>length)) {
            lex_error_s_1("%s string limited to %d characters; truncated",
                          attribute, length);
            saved_text[length] = '\0';
        }
        yylval.ystring = xstrdup(saved_text);
    } else {
        yylval.ystring = NULL;
    }
}

void
scan_hex_string(void)
{
    register unsigned i=10;

    while ((yytext[i]==' ') || (yytext[i]=='\t')) i++;
    yylval.ystring = xstrdup(yytext+i);
}

