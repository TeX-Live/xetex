dnl withenable.ac: --with and --enable options.

dnl The implementation of the defaults for the next three options is found
dnl in configure.in.

dnl Do we compile e-TeX?
dnl We default to yes if the sources are available.
AC_ARG_WITH([etex],
[  --without-etex             don't compile and install e-TeX])

dnl Do we compile Omega?
dnl We default to yes if the sources are available.
AC_ARG_WITH([omega],
[  --without-omega            don't compile and install Omega])

dnl Do we compile Aleph?
dnl We default to yes if the sources are available.
AC_ARG_WITH([aleph],
[  --without-aleph            don't compile and install Aleph])

dnl Do we compile pdfTeX?
dnl We default to yes if the sources are available.
AC_ARG_WITH([pdftex],
[  --without-pdftex           don't compile and install pdfTeX])

dnl Do we compile pdfeTeX?
dnl We default to yes if the sources are available.
AC_ARG_WITH([pdfetex],
[  --without-pdfetex          don't compile and install pdfeTeX])

dnl Do we compile luaTeX?
dnl We default to yes if the sources are available.
AC_ARG_WITH([luatex],
[  --without-luatex           don't compile and install luaTeX])

dnl Do we compile XeTeX?
dnl We default to yes if the sources are available.
AC_ARG_WITH([xetex],
[  --without-xetex            don't compile and install XeTeX])

dnl Try to link C++ runtime statically?
dnl Only important, if you want to create binaries which are slightly
dnl more portable.
AC_ARG_WITH([cxx-runtime-hack],
[  --with-cxx-runtime-hack    link C++ runtime statically])

AC_ARG_WITH([editor],
[  --with-editor=CMD       invoke CMD from the e option [vi +%d %s]],
  [], [with_editor="vi +%d %s"])
AC_DEFINE_UNQUOTED([EDITOR], ["$with_editor"],
  [web2c: Default editor for interactive `e' option.])

AC_ARG_ENABLE([ipc],
[  --enable-ipc            enable TeX's --ipc option, i.e., pipe to a program],
[if test "x$enableval" = xyes; then
  AC_DEFINE([IPC], , [tex: Define to enable --ipc.])
  # -lsocket is needed on Solaris, at least.  Maybe -lnsl on SCO, too?
  # See ac_path_xtra.
  AC_CHECK_FUNC(connect)
  if test x$ac_cv_func_connect = xno; then
    AC_CHECK_LIB(socket, connect, socketlibs="-lsocket $socketlibs")
  fi
fi
])
AC_SUBST(socketlibs)

AC_ARG_ENABLE([auto-core],
[  --enable-auto-core      cause TeX&MF to dump core given a certain filename],
  [AC_DEFINE([FUNNY_CORE_DUMP], ,
    [web2c: Define to enable HackyInputFileNameForCoreDump.tex.])
])

AC_ARG_ENABLE([dump-share],
[  --disable-dump-share    make fmt/base/mem files architecture-dependent],
[if test "x$enableval" = xno; then
  AC_DEFINE([NO_DUMP_SHARE], ,
    [web2c: Define to disable architecture-independent dump files.
     Faster on LittleEndian architectures.])
fi
])

AC_ARG_ENABLE([fmtutil],
[  --enable-fmtutil    use fmtutil for build dumps])

dnl Do we include Window system support in MF?
dnl Here we have three choices: yes, no, and as a separate executable mfw.
dnl We default to mf.
AC_ARG_WITH([mf-nowin],
[  --with-mf-nowin           build a separate non-windows-capable METAFONT])

# Window system support for Metafont.
AC_ARG_WITH([epsfwin],
  [  --with-epsfwin          include EPSF pseudo-window support],
[if test "x$withval" = xyes; then
  AC_DEFINE([EPSFWIN], ,
    [metafont: Define to include EPSF pseudo-window support])
fi
])
AC_ARG_WITH([hp2627win],
  [  --with-hp2627win        include HP 2627 window support in Metafont],
[if test "x$withval" = xyes; then
  AC_DEFINE([HP2627WIN], ,
    [metafont: Define to include HP 2627 window support])
fi
])
AC_ARG_WITH([mftalkwin],
  [  --with-mftalkwin        include mftalk (generic server) window support],
[if test "x$withval" = xyes; then
  AC_DEFINE([MFTALKWIN], ,
    [metafont: Define to include mftalk (generic server) window support])
fi
])
AC_ARG_WITH([nextwin],
  [  --with-nextwin          include NeXT window support],
[if test "x$withval" = xyes; then
  AC_DEFINE([NEXTWIN], ,
    [metafont: Define to include NeXT window support])
fi
])
AC_ARG_WITH([regiswin],
  [  --with-regiswin         include Regis window support],
[if test "x$withval" = xyes; then
  AC_DEFINE([REGISWIN], ,
    [metafont: Define to include Regis window support])
fi
])
AC_ARG_WITH([suntoolswin],
  [  --with-suntoolswin      include old Suntools window support (this is not X)],
[if test "x$withval" = xyes; then
  wlibs="-lsuntool -lsunwindow -lpixrect $wlibs"
  AC_DEFINE([SUNWIN], ,
    [metafont: Define to include old Suntools window support (this is not X)])
fi
])
AC_ARG_WITH([tektronixwin],
  [  --with-tektronixwin     include Tektronix window support],
[if test "x$withval" = xyes; then
  AC_DEFINE([TEKTRONIXWIN], ,
    [metafont: Define to include Tektronix window support])
fi
])
AC_ARG_WITH([unitermwin],
  [  --with-unitermwin       include Uniterm window support],
[if test "x$withval" = xyes; then
  AC_DEFINE([UNITERMWIN], ,
    [metafont: Define to include Uniterm window support])
fi
])

sinclude(../kpathsea/xt.ac)

AC_ARG_WITH([x11win],
  [  --with-x11win           same as --with-x],
  [with_x="$withval"])
AC_ARG_WITH([x11],
  [  --with-x11              same as --with-x],
  [with_x="$withval"])

dnl This defines --with-x implicitly (which is why we use that package
dnl name below), so put it here, so it comes first in the --help output.
dnl This reads best.

dnl Remember to add AC_PATH_XTRA when actually using X.

AC_ARG_WITH([mf-x-toolkit],
[  --with-mf-x-toolkit    Use X toolkit for mf.],
[         case "${withval}" in
            y | ye | yes )      val=yes ;;
            n | no )            val=no  ;;
            * )
AC_MSG_WARN([unknown --with-mf-x-toolkit argument \`$withval'; using yes.])
              val=yes;;
          esac
          with_mf_x_toolkit=$val
])
