#!/bin/sh

# Top-level script to compile xetex and xdvipdfmx (and xdv2pdf on OS X)
# from the source tree as found in Subversion

# where we'll do our build
WORKDIR=Work

# If we have an argument, put that into lots of *FLAGS variables
# (use this for "-arch ppc" on Mac OS X to build PPC binaries on Intel hardware;
#  unlikely to be useful for anything else)

if [ -n "$@" ]; then
	export CFLAGS="$@"
	export CXXFLAGS="$@"
	export LDFLAGS="$@"
	export XCFLAGS="$@"
	export XCXXFLAGS="$@"
	export XLDFLAGS="$@"
	export XXOBJCFLAGS="$@"
	WORKDIR=`echo "Work$@" | sed -e 's/ //g'`
fi

echo "###### BUILDING IN $WORKDIR"

real_path() # function to resolve symlinks in path, as not everyone has realpath(1)
{
	current_path=`pwd` && relative_path="$1"
	cd -P "${relative_path}"
	real_path=`pwd` && cd "${current_path}"
	echo "${real_path}"
}

test -z "${GNUMAKE}" && {
	GNUMAKE=`which gnumake`
	if [ ! -e "${GNUMAKE}" ]; then
		GNUMAKE=`which gmake`
	fi
	if [ ! -e "${GNUMAKE}" ]; then
		GNUMAKE=`which make`
	fi
	if [ ! -e "${GNUMAKE}" ]; then
		echo "### There is no 'make' in your system."
		exit 1
	fi
}

is_gnu_make=`${GNUMAKE} -v | grep -c -i "GNU Make"`
if [ "${is_gnu_make}" = "0" ]; then
	echo "### You need GNU Make (gmake, gnumake) to build XeTeX."
	exit 1
fi

# do some cleanup if needed
test ! -f Makefile || ${GNUMAKE} clean
rm -rf "$WORKDIR"
find . -name config.cache -print -exec rm -f {} \;

# set executable bits that ViewVC's tarball may have lost
find . -name configure -exec chmod +x {} \;
find . -name xdv2pdf_mergemarks -exec chmod +x {} \;

# fix up symlink possibly lost in ViewVC's tarball generation :(
test -d libs/icu-xetex -o -L libs/icu-xetex || ln -fs icu-release-3-8-1-source libs/icu-xetex

# workaround for configure problem on Leopard; to be removed later
export ac_cv_exeext=''

# create a $WORKDIR subtree and run the configure script

test -d "$WORKDIR" || mkdir "$WORKDIR"

echo "###### CONFIGURING XETEX"

(cd "$WORKDIR" &&
 sh ../runConfigure.sh || {
	echo "### configure script appears to have failed"
	exit 1
 })

echo "###### BUILDING LIBRARIES AND XETEX"

# make libraries first (not handled by the xetex makefile)
LIBS=`find $WORKDIR/libs -type d -maxdepth 1 -mindepth 1 | sed -e "s/$WORKDIR\/libs\///"`
if [ "`uname`" = "Darwin" ]; then
	# don't need xpdf on Darwin; we use Quartz
	LIBS=`echo "$LIBS" | grep -v 'xpdf'`
fi
echo "### Static libs to be built:"
echo "${LIBS}"
for f in ${LIBS}; do
	( cd $WORKDIR/libs/${f} && echo "### Running ${GNUMAKE} in `pwd`" && ${GNUMAKE} ) || {
		echo "### library build appears to have failed for ${f}"
		exit 1
	}
done

# make the xetex binary

	# -------
	# This is the copy of determining the presence of symlinks in
	# web2c path as reported by kpsewhich (as used in runConfigure.sh);
	# it would be nice if there is a more elegant way to pass it here.

	# try to figure out where the user's TeX is, and complain if we can't find it...
	KPSEWHICH=`which kpsewhich`
	if [ ! -e "${KPSEWHICH}" ]; then
		echo "### No kpsewhich found -- are you sure you have TeX installed?"
		echo "### Using default paths; hope that will be OK!"
		KPSEWHICH=
	else
		using_tex_dist=`dirname ${KPSEWHICH} | grep -c texbin`
		if [ "${using_tex_dist}" = "1" ]; then
			# Looks like we've got a Mac OS X "TeX Distributions" structure;
			# we can't use this as a build prefix - must find the real location
			kpsewhich_dir=`dirname ${KPSEWHICH}`
			echo "### Resolving TeXDist path ${kpsewhich_dir} to real location"
			real_bin_dir=`real_path ${kpsewhich_dir}`
			echo "### Real binaries location: ${real_bin_dir}"
			PREFIX=`echo ${real_bin_dir} | sed -e 's!/bin/.*!!;'`
		else
			PREFIX=`echo ${KPSEWHICH} | sed -e 's!/bin/.*!!;'`
		fi
		if [ ! -d "${PREFIX}" ]; then
			echo "### PREFIX ${PREFIX} is not a directory; cannot continue."
			exit 1
		fi
	fi
	
	if [ -z "$KPSEWHICH" ]; then
		WEB2CDIR="${DATADIR}/texmf/web2c"
	else
		WEB2CDIR=`dirname \`kpsewhich texmf.cnf\``
		REALPATHPREFIX=`real_path ${PREFIX}`
		if [ ! "${REALPATHPREFIX}" = "${PREFIX}" ]; then
			if [ "`echo ${WEB2CDIR} | sed -e 's!${REALPATHPREFIX}!!'`" = "${WEB2CDIR}" ]; then
				WEB2CDIR=`echo ${WEB2CDIR} | sed -e "s!${REALPATHPREFIX}!${PREFIX}!"`
				echo "### WEB2CDIR seems to contain symlink; honouring it."
			fi
		fi
	fi
	# -------

echo "### Making xetex binary using: 'cd $WORKDIR/texk/web2c && ${GNUMAKE} web2cdir=${WEB2CDIR} xetex'"
(cd "$WORKDIR/texk/web2c" && ${GNUMAKE} web2cdir=${WEB2CDIR} xetex) || {
	echo "### failed to build the xetex binary"
	exit 1
}
PRODUCTS="$WORKDIR/texk/web2c/xetex"

# xdv2pdf is for Mac OS X only, don't try to build on Linux or *BSD.
if [ "`uname`" = "Darwin" ]; then
	(cd "$WORKDIR/texk/xdv2pdf" && ${GNUMAKE} all) || {
		echo "### failed to build the xdv2pdf driver for Mac OS X"
		exit 1
	}
	PRODUCTS="${PRODUCTS} $WORKDIR/texk/xdv2pdf/xdv2pdf $WORKDIR/texk/xdv2pdf/T1Wrap"
fi

# build xdvipdfmx
(cd "$WORKDIR/texk/xdvipdfmx" && ${GNUMAKE}) || {
	echo "### failed to build the xdvipdfmx driver"
	exit 1
}
PRODUCTS="${PRODUCTS} $WORKDIR/texk/xdvipdfmx/src/xdvipdfmx"

# show the executables we made (assuming the build was successful)
echo "### Products built successfully:"
find ${PRODUCTS} -type f -exec strip {} \;
ls -l ${PRODUCTS}
