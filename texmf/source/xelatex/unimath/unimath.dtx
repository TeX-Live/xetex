% \iffalse meta-comment
%
%!TEX encoding = UTF-8 Unicode
%
% Copyright 2005 by Will Robertson <wspr81@gmail.com>
% 
% Distributable under the LaTeX Project Public License,
% version 1.3c or higher (your choice). The latest version of
% this license is at: http://www.latex-project.org/lppl.txt
%
% This work is "maintained" (as per LPPL maintenance status) 
% by Will Robertson.
% 
% This work consists of the file  unimath.dtx
%           and the derived files unimath.sty and unimath.pdf.
%
%
%<*internalbatchfile>
\begingroup
%</internalbatchfile>
%<*batchfile>
\input docstrip.tex
\keepsilent
\preamble

  ________________________________
  Copyright © 2006  Will Robertson

  License information appended.


\endpreamble
\postamble

Copyright © 2006 by Will Robertson <wspr81@gmail.com>

Distributable under the LaTeX Project Public License,
version 1.3c or higher (your choice). The latest version of
this license is at: http://www.latex-project.org/lppl.txt

This work is "maintained" (as per LPPL maintenance status) 
by Will Robertson.

This work consists of the file  \jobname.dtx
          and the derived files \jobname.sty and \jobname.pdf.

\endpostamble
\askforoverwritefalse
\generate{\file{\jobname.sty}{\from{\jobname.dtx}{package}}}
\generate{\file{\jobname-testing.tex}{\from{\jobname.dtx}{testing}}}
\generate{\file{\jobname.ins}{\from{\jobname.dtx}{batchfile}}}
\nopreamble\nopostamble
\generate{\file{dtx-style.sty}{\from{\jobname.dtx}{dtx-style}}}
\generate{\file{stix-extract.sh}{\from{\jobname.dtx}{awk-script}}}
%</batchfile>
%<batchfile>\endbatchfile
%<*internalbatchfile>
\endgroup
%</internalbatchfile>
%
%<*driver>
\documentclass{ltxdoc}
\EnableCrossrefs
\CodelineIndex
\RecordChanges
%\OnlyDescription
\usepackage{dtx-style}
\begin{document}
  \DocInput{\jobname.dtx}
\end{document}
%</driver>
%
% \fi
%
% \GetFileInfo{\jobname.sty}
% \CheckSum{0}
% \errorcontextlines=999
% \makeatletter
%
% \title{Experimental unicode mathematical typesetting: The \pkg{unimath} package}
% \author{Will Robertson}
% \date{\filedate \qquad \fileversion}
%
% \maketitle
%
% \tableofcontents
%
% \section{Introduction}
%
% This document describes the \pkg{unimath} package, which is an
% \emph{experimental} implementation of a macro to unicode glyph encoding for 
% mathematical characters. Its intended use is for \XeTeX, although it is conjectured 
% that small effect needs to be spent to create a cross-format package that would 
% also work with \OMEGA.
%
% As of \XeTeX\ v.\,0.995, maths characters can be accessed in unicode 
% ranges. Now, a proper method must be invented for real unicode maths support. Before
% any code is written, I'm writing a specification in order to work out what is required.
% Fairly significant pieces of the NFSS may have to be re-written, and I'm a little unsure where to start.
%
% \section{Current NFSS methods}
% 
% In the following, \meta{NFSS decl.} stands for something like |{T1}{lmr}{m}{n}|.
%
% \begin{description}
% \item[Maths symbol fonts] Fonts for symbols: $\propto$, $\leq$, $\rightarrow$
%
% \cmd\DeclareSymbolFont\marg{name}\meta{NFSS decl.}\\
% Declares a named maths font such as |operators| from which symbols are defined with \cmd\DeclareMathSymbol.
%
% \item[Maths alphabet fonts] Fonts for {\font\1=cmmi10 at 10pt\1 ABC}\,–\,{\font\1=cmmi10 at 10pt\1 xyz}, {\font\1=eufm10 at 10pt\1 ABC}\,–\,{\font\1=cmsy10 at 10pt\1 XYZ}, etc.
%
% \cmd\DeclareMathAlphabet\marg{cmd}\meta{NFSS decl.}
%
% For commands such as \cmd\mathbf, accessed
% through maths mode that are unaffected by the current text font, and which are used for
% alphabetic symbols in the \textsc{ascii} range.
%
% \cmd\DeclareSymbolFontAlphabet\marg{cmd}\marg{name}
%
% Alternative (and optimisation) for \cmd\DeclareMathAlphabet\ if a single font is being used
% for both alphabetic characters (as above) and symbols.
%
% \item[Maths `versions'] Different maths weights can be defined with the following, switched
% in text with the \cmd\mathversion\marg{maths version} command.
%
% \cmd\SetSymbolFont\marg{name}\marg{maths version}\meta{NFSS decl.}\\
% \cmd\SetMathAlphabet\marg{cmd}\marg{maths version}\meta{NFSS decl.}
%
% \item[Maths symbols] Symbol definitions in maths for both characters (=) and macros (\cmd\eqdef):
% \cmd\DeclareMathSymbol\marg{symbol}\marg{type}\marg{named font}\marg{slot}
% This is the macro that actually defines which font each symbol comes from and how they behave.
% \end{description}
% Delimiters, accents, and radicals are not dealt with yet.
%
% \section{Specification}
%
% In the ideal case, a single unicode font will contain all maths glyphs we need.
% Barbara Beeton's STIX table provides the mapping between unicode maths glyphs 
% and macro names (all 3298 of them!).
% A single command \codeline{\cmd\setmathsfont\oarg{font features}\marg{font name}} would implement this
% for every every symbol and alphabetic variant.
% That means |\alpha| to $\alpha$, |\leq| to $\leq$, etc., 
% |\mathcal{H}| to $\mathcal{H}$ and so on, all for unicode glyphs within a single font.
%
% Furthermore, this package should deal well with unicode characters for maths input, as well.
% This includes using literal Greek letters in formulae, resolving to upright or italic depending on preference.
% This, and alphabetic variants via such commands as \cmd\mathcal, will be dealt with via \XeTeX's `last minute' font mapping features. (Or maybe not!)
%
% Finally, maths versions must also be provided for. While I guess version selection in
% \LaTeX\ will remain the same, the specification for choosing the version fonts will
% probably be an optional argument:
% \codeline{\cmd\setmathsfont|[|version=bold,\meta{font features}|]|\marg{font name}}
% 
% All instances of `maths' in command names will be aliased to `math' for our 
% American (or abbreviatory-minded) friends. Instances above of 
% \codeline{\oarg{font features}\marg{font name}} 
% follow from my \pkg{fontspec} package, and therefore any additional \meta{font features}
% specific to maths fonts will hook into \pkg{fontspec}'s methods.
%
% \subsection{Dealing with real life}
%
% Let's face it; there will probably be few cases where a single unicode maths font suffices. The upcoming STIX font comes to mind as a notable exception. It will therefore be necessary to delegate specific unicode ranges of glyphs to separate fonts.
%
% At the lowest level, it will probably be necessary on occasion to simply use just one or two glyphs from another font; either because they look better or they're simply unavailable in the default font in use. This doesn't really require anything that won't already exist; a command analogous to \cmd\DeclareMathSymbol\ that accepts unicode \meta{slot} ranges.
%
% More generally, it would be nice to be able to say
%\codeline{\cmd\setmathsfont|[range=|\meta{unicode range}|,|\meta{font features}|]|\marg{font name}}
% where \meta{unicode range} is a comma-separated list of unicode slots and ranges such as |{27D0-27EB, 27FF, 295B-297F}|. Furthermore, preset names ranges could be used, such as |MiscMathSymbolsA|, with such ranges based on unicode chunks. The amount of optimisation required here to achieve acceptable performance has yet to be determined. Techniques such as saving out unicode subsets based on \meta{unicode range} data to be \cmd\input\ in the next \LaTeX\ run are certainly a possibility.
% 
% \StopEventually{}
%
% \part{The \textsf{unimath} package}
%\iffalse
%<*package>
%\fi
% This is the package.
%    \begin{macrocode}
\ProvidesPackage{unimath}
  [2006/02/20 v0.01 Unicode maths definitions]  
%    \end{macrocode}
%
% Things we need:
%    \begin{macrocode}
\newcounter{um@fam}

%% Kees can der Laan's simplification of Van der Groot's loop:
\def\um@Loop#1\um@Pool{#1\um@Loop#1\um@Pool} 
\def\um@Break#1\um@Pool{} 

\long\def\um@FOR #1 = [#2:#3] #4{%
  {\csname#1\endcsname =#2\relax
   \um@Loop #4%
     \expandafter\advance\csname#1\endcsname\@ne
     \expandafter\ifnum\csname#1\endcsname>#3\relax
       \expandafter\um@Break
     \fi 
   \um@Pool}}
%    \end{macrocode}
%
%    \begin{macrocode}
\RequirePackage{fontspec}
%    \end{macrocode}
%
% Test: $\propto\infty\rightangle\angle\measuredangle\sphericalangle\mid\nmid\parallel\nparallel\wedge\vee\cap\cup\int\iint\iiint$
%
% \section{Trying to understand \LaTeX}
%
% Here's \LaTeX's definition of \cmd\DeclareMathSymbol.
% Let's try an make sense of it.
%
% \DescribeMacro{\DeclareMathSymbol}
% \darg{Symbol, e.g., \cmd\alpha\ or `a'}
% \darg{Type, e.g., \cmd\mathalpha}
% \darg{Math font name, e.g., \texttt{operators}}
% \darg{Slot, e.g., \texttt{F1}}
%
%<*neveroutput>
%
%    \begin{macrocode}
\def\DeclareMathSymbol#1#2#3#4{%
%    \end{macrocode}
% First ensure the math font (e.g., |operators|) exists:
%    \begin{macrocode}
  \expandafter\in@\csname sym#3\expandafter\endcsname
     \expandafter{\group@list}%
  \ifin@
%    \end{macrocode}
% Convert the slot number to two hex digits stored in 
% \cmd\count\cmd\z@\ and \cmd\count\cmd\tw@, respectively:
%    \begin{macrocode}
    \begingroup
      \count\z@=#4\relax
      \count\tw@\count\z@
      \divide\count\z@\sixt@@n
      \count@\count\z@
      \multiply\count@\sixt@@n
      \advance\count\tw@-\count@
%    \end{macrocode}
% The symbol to be defined can be either a command (|\alpha|) or a character (|a|).
% Branch for the former:
%    \begin{macrocode}
      \if\relax\noexpand#1% is command?
        \edef\reserved@a{\noexpand\in@{\string\mathchar}{\meaning#1}}%
        \reserved@a
%    \end{macrocode}
% If the symbol command definition contains \cmd\mathchar, then
% we can provide the info that a previous symbol definition is being overwritten:
%    \begin{macrocode}
        \ifin@
          \expandafter\set@mathsymbol
             \csname sym#3\endcsname#1#2%
             {\hexnumber@{\count\z@}\hexnumber@{\count\tw@}}%
          \@font@info{Redeclaring math symbol \string#1}%
%    \end{macrocode}
% Otherwise, throw an error if the command name is already taken by a non-symbol definition:
%    \begin{macrocode}
        \else
            \expandafter\ifx
            \csname\expandafter\@gobble\string#1\endcsname
            \relax
            \expandafter\set@mathsymbol
               \csname sym#3\endcsname#1#2%
               {\hexnumber@{\count\z@}\hexnumber@{\count\tw@}}%
          \else
            \@latex@error{Command `\string#1' already defined}\@eha
          \fi
        \fi
%    \end{macrocode}
% And if the symbol input is a character:
%    \begin{macrocode}
      \else
        \expandafter\set@mathchar
          \csname sym#3\endcsname#1#2
          {\hexnumber@{\count\z@}\hexnumber@{\count\tw@}}%
      \fi
    \endgroup
%    \end{macrocode}
% Everything previous was skipped if the maths font doesn't exist in the first place:
%    \begin{macrocode}
  \else
    \@latex@error{Symbol font `#3' is not defined}\@eha
  \fi}
%    \end{macrocode}
% The final macros that actually define the maths symbol with \TeX\ primitives.
% If the symbol definition is for a macro:
%    \begin{macrocode}
\def\set@mathsymbol#1#2#3#4{%
  \global\mathchardef#2"\mathchar@type#3\hexnumber@#1#4\relax}
%    \end{macrocode}
% Or if it's for a character:
%    \begin{macrocode}
\def\set@mathchar#1#2#3#4{%
  \global\mathcode‘#2="\mathchar@type#3\hexnumber@#1#4\relax}
%    \end{macrocode}
%
%</neveroutput>
%
% \paragraph{Summary}
% For symbols, something like:
% \begin{verbatim}
% \def\DeclareMathSymbol#1#2#3#4{%
%   \global\mathchardef#1"\mathchar@type#2
%     \expandafter\hexnumber@\csname sym#2\endcsname
%     {\hexnumber@{\count\z@}\hexnumber@{\count\tw@}}}
% \end{verbatim}
% For characters, something like:
% \begin{verbatim}
% \def\DeclareMathSymbol#1#2#3#4{%
%   \global\mathcode`#1"\mathchar@type#2
%     \expandafter\hexnumber@\csname sym#2\endcsname
%     {\hexnumber@{\count\z@}\hexnumber@{\count\tw@}}}
% \end{verbatim}
%
% \section{This package}
% 
% We need to both redefine \cmd\DeclareMathSymbol\ to deal with unicode slots,
% as well as \cmd\DeclareSymbolFont\ to deal with 8-bit family numbers.
%
% \subsection{Enlarging the number of maths families}
%
% To start with, we've got a power of two as many \cmd\fam s as before. So (from |ltfssbas.dtx|) we want to redefine
%    \begin{macrocode}
\def\new@mathgroup{\alloc@8\mathgroup\chardef\@cclvi}
\let\newfam\new@mathgroup
%    \end{macrocode}
% This is sufficient for \LaTeX's \cmd\DeclareSymbolFont,\dots, commands to be able
% to define 256 named maths fonts. All we need now is a new \cmd\DeclareMathSymbol.
%
%\iffalse
%</package>
%\fi
%    \begin{macrocode}
%<*testing>
\newfam\mta\newfam\mtb\newfam\mtc\newfam\mtd
\newfam\mte\newfam\mtf\newfam\mtg\newfam\mth
\newfam\mti\newfam\mtj\newfam\mtk\newfam\mtl
\newfam\mtm\newfam\mtn\newfam\mto\newfam\mtp
\newfam\mtq\newfam\mtr\newfam\mts\newfam\mtt
\newfam\mtu
%</testing>
%    \end{macrocode}
%\iffalse
%<*package>
%\fi
%
% \string\mtu: math fam \the\mtu\ of 255. 
%
% \subsection{\cmd\DeclareMathSymbol\ for unicode ranges}
%
% This is mostly an adaptation from \LaTeX's definition.
%
%    \begin{macrocode}
\def\DeclareUnicodeMathSymbol#1#2#3#4{%
%    \end{macrocode}
% First ensure the math font (e.g., |operators|) exists:
%    \begin{macrocode}
  \expandafter\in@\csname sym#3\expandafter\endcsname
     \expandafter{\group@list}%
  \ifin@
%    \end{macrocode}
% No longer need to perform the obfuscated hex conversion, since
% \cmd\XeTeXextmathchar\ (and friends) has a more simplified input than \TeX's \cmd\mathchar.
%    \begin{macrocode}
    \begingroup
%    \end{macrocode}
% The symbol to be defined can be either a command (|\alpha|) or a character (|a|).
% Branch for the former:
%    \begin{macrocode}
      \if\relax\noexpand#1% is command?
        \edef\reserved@a{\noexpand\in@{\string\XeTeXextmathchar}{\meaning#1}}%
        \reserved@a
%    \end{macrocode}
% If the symbol command definition contains \cmd\XeTeXextmathchar, then
% we can provide the info that a previous symbol definition is being overwritten:
%    \begin{macrocode}
        \ifin@
          \expandafter\set@xmathsymbol
             \csname sym#3\endcsname#1#2{#4}%
          \@font@info{Redeclaring math symbol \string#1}%
%    \end{macrocode}
% Otherwise, overwrite it if the symbol command definition contains plain old \cmd\mathchar:
%    \begin{macrocode}
        \else
          %\edef\reserved@a{\noexpand\in@{\string\mathchar}{\meaning#1}}%
          %\reserved@a
          %\ifin@
          %  \expandafter\set@xmathsymbol
          %     \csname sym#3\endcsname#1#2{#4}%
%    \end{macrocode}
% Otherwise, throw an error if the command name is already taken by a non-symbol definition:
%    \begin{macrocode}
          %\else
            %\expandafter\ifx
            %\csname\expandafter\@gobble\string#1\endcsname
            %\relax
              \expandafter\set@xmathsymbol
                 \csname sym#3\endcsname#1#2{#4}%
            %\else
            %  \@latex@error{Command `\string#1' already defined}\@eha
            %\fi
          %\fi
        \fi
%    \end{macrocode}
% And if the symbol input is a character:
%    \begin{macrocode}
      \else
        \expandafter\set@xmathchar
          \csname sym#3\endcsname#1#2{#4}%
      \fi
    \endgroup
%    \end{macrocode}
% Everything previous was skipped if the maths font doesn't exist in the first place:
%    \begin{macrocode}
  \else
    \@latex@error{Symbol font `#3' is not defined}\@eha
  \fi}
%    \end{macrocode}
% The final macros that actually define the maths symbol with \XeTeX\ primitives.
% If the symbol definition is for a macro:
%    \begin{macrocode}
\def\set@xmathsymbol#1#2#3#4{%
  \global\XeTeXextmathchardef#2"\mathchar@type#3 #1 #4\relax}
%    \end{macrocode}
% Or if it's for a character:
%    \begin{macrocode}
\def\set@xmathchar#1#2#3#4{%
  \global\XeTeXextmathcode`#2="\mathchar@type#3 #1 #4\relax}
%    \end{macrocode}
% [For later] or if it's for a character code:
%    \begin{macrocode}
\def\DeclareUnicodeMathCode#1#2#3#4{%
  \expandafter\set@xmathcode
    \csname sym#3\endcsname{#1}{#2}{#4}}
\def\set@xmathcode#1#2#3#4{%
  \global\XeTeXextmathcode#2="\mathchar@type#3 #1 #4\relax}
%    \end{macrocode}
%
%\iffalse
%</package>
%\fi
%    \begin{macrocode}
%<*testing>
\zf@fontspec{}{Cambria Math}
\DeclareSymbolFont{test}{EU1}{CambriaMath(0)}{m}{n}
\DeclareUnicodeMathSymbol{\infinity}{\mathord}{test}{"221E}
\DeclareUnicodeMathCode{65}{\mathalpha}{test}{119860}
%</testing>
%    \end{macrocode}
%\iffalse
%<*package>
%\fi
%
% Test infinity: $A \infinity$
%
% \subsection{User interface to \cmd\DeclareSymbolFont}
%
% \begin{macro}{\setmathfont}
% \doarg{font features}
% \darg{font name}
% Use \pkg{fontspec} to select a font to use.
%    \begin{macrocode}
\newcommand\setmathfont[2][]{%
  \zf@fontspec{#1}{#2}%
%    \end{macrocode}
% We need to hook into \pkg{fontspec} here to check if a family
% is loaded twice. This might be important if loading lots of individual glyphs.
%    \begin{macrocode}
  \stepcounter{um@fam}%
  \DeclareSymbolFont{um@fam\theum@fam}{EU1}{\zf@family}{\mddefault}{\updefault}%
%    \end{macrocode}
% Now when the list of unicode symbols is input, we want a suitable definition of 
% its internal macro.
%    \begin{macrocode}
  \def\unicode@math@symbol##1##2##3##4{%
    \DeclareUnicodeMathSymbol{##2}{##3}{um@fam\theum@fam}{##1}}%
%    \end{macrocode}
% And now we input every single maths char. See File~\ref{part:awk-script} for
% the source to |stix-tex.tex|.
%    \begin{macrocode}
  \um@text@input{um@fam\theum@fam}%
  \input stix-tex.tex}
%    \end{macrocode}
% \end{macro}
%
%\iffalse
%</package>
%\fi
%    \begin{macrocode}
%<*testing>
\setmathfont{Cambria Math}
\DeclareUnicodeMathSymbol{\testalef}{\mathord}{um@fam\theum@fam}{"2135}
%</testing>
%    \end{macrocode}
%\iffalse
%<*package>
%\fi
%
% Test aleph: $\testalef$
%
% $\int Ax \eqdef \nabla \times \scrZ$
%
%
% \subsection{Setting up the \textsc{ascii} ranges}
%
% We want it to be convenient for users to actually type in maths.
% The \textsc{ascii} Latin characters should be used for italic maths,
% and the text Greek characters should be used for upright/italic
% (depending on preference) Greek, if desired.
%
% \begin{macro}{\um@mathcode@offset}
% This is a wrapper macro to save space:
%    \begin{macrocode}
\newcommand\um@mathcode@offset[3]{%
    \DeclareUnicodeMathCode
      {\numexpr\the\@tempcnta+#2\relax}
      {\mathalpha}{#1}
      {\numexpr\the\@tempcnta+#3\relax}%  
}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\um@text@input}
% And here're the text input to maths output mappings, wrapped up in a macro.
%    \begin{macrocode}
\newcommand\um@text@input[1]{%
%    \end{macrocode}
% Latin alphabet, uppercase and lowercase respectively:
%    \begin{macrocode}
  \um@FOR @tempcnta = [0:25] {%
    \um@mathcode@offset{#1}{65}{119860}%
    \um@mathcode@offset{#1}{97}{119886}%
  }%
%    \end{macrocode}
% Filling a hole for `h', which maps to \unichar{210E}{PLANCK CONSTANT}
% instead of the expected \unichar{1D455}{MATHEMATICAL ITALIC SMALL H} (which is not assigned):
%    \begin{macrocode}
  \DeclareUnicodeMathCode
    {104}{\mathalpha}{#1}{8462}%
%    \end{macrocode}
% Greek alphabet, uppercase (note the hole after \unichar{03A1}{GREEK CAPITAL LETTER RHO}):
%    \begin{macrocode}
  \um@FOR @tempcnta = [0:23] {%
    \DeclareUnicodeMathCode
      {\ifnum\@tempcnta>16
         \numexpr\the\@tempcnta+913\relax
       \else
         \numexpr\the\@tempcnta+913+1\relax       
       \fi}
      {\mathalpha}{#1}
      {\numexpr\the\@tempcnta+120546\relax}%
%    \end{macrocode}
% And Greek lowercase:
%    \begin{macrocode}
    \um@mathcode@offset{#1}{945}{120572}%
  }%
}
%    \end{macrocode}
% \end{macro}
% \begin{tabular}{@{}l>{$}l<{$}@{}}
% Uppercase Latin & ABCDEFGHIJKLMNOPQRSTUVWXYZ \\
% Lowercase Latin & abcdefghijklmnopqrstuvwxyz \\
% Uppercase Greek & ΑΒΓΔΕΖΗΘΙΚΛΜΝΞΟΠΡΣΤΥΦΧΨΩ \\
% Lowercase Greek & αβγδεζηθικλμνξοπρστυφχψω \\
% \end{tabular}
%
%\iffalse
%</package>
%\fi
%
% 
% \iffalse
% \section{Verification}
%
% The input files used to define the unicode maths symbols are
% processed with a different definition of \cmd\DeclareUnicodeMathSymbol\
% to typeset the defined symbols. The Code2000 font is used for
% Plane~0 characters, Code2001 for Plane~1.
%
% \renewcommand\DeclareUnicodeMathSymbol[4]{
%   \scshape\addfontfeature{Numbers=Monospaced}\MakeLowercase{#1} &
%   #2 & \cmd#2 & \scshape#4\\}
%
% \subsection{Plane 0}
% \setmathfont{Code2000}
% \begin{longtable}[l]{@{}cccp{6cm}@{}}
% \input stix-tex-plane0.tex
% \end{longtable}
%
% \subsection{Plane 1}
% \setmathfont{Code2001}
% \begin{longtable}[l]{@{}cccp{8cm}@{}}
% \input stix-tex-plane1.tex
% \end{longtable}
% \fi
%
%
% \part{STIX table data extraction}\label{part:awk-script}
%\iffalse
%<*awk-script>
%\fi
%
% The source for the \TeX\ names for the very large number of mathematical
% glyphs are provided via Barbara Beeton's table file for the STIX project
% (|ams.org/STIX|). A version is located at
% \url{http://www.ams.org/STIX/bnb/stix-tbl.asc}
% but it's not currently up to date.
%
% A single file is produced containing all 3298 symbols.
% Future optimisations might include generating various (possibly overlapping) subsets
% so not all definitions must be read just to redefine a small range of symbols..
%
%    \begin{macrocode}
#!/bin/sh

cat stix-tbl.asc | 
awk '
 BEGIN {OFS="|"} 
 {if (usv != substr($0,2,5) ) 
   {if (substr($0,2,1) != " ")
    {usv = substr($0,2,5);
     texname = substr($0,84,25);
     type = substr($0,57,1);
     description = tolower(substr($0,233,350));
     {if (texname ~ /[\\]/)
       print usv, texname, type, description;}}}}' - | 
awk -F"|" ' 
  (($3 != " ") && ($3 != "F") && ($3 != "D")) {
    print "\\unicode@math@symbol{" "\"" $1 "}{" $2 "}{" $3 "}{" $4 "}";
 }' - |
sed -e ' s/{N}/{\\mathord}/   ' \
    -e ' s/{A}/{\\mathalpha}/ ' \
    -e ' s/{P}/{\\mathpunct}/ ' \
    -e ' s/{B}/{\\mathbin}/   ' \
    -e ' s/{R}/{\\mathrel}/   ' \
    -e ' s/{L}/{\\mathop}/    ' \
    -e ' s/{O}/{\\mathopen}/  ' \
    -e ' s/{C}/{\\mathclose}/ ' > stix-tex.tex
%    \end{macrocode}
%\iffalse
%</awk-script>
%\fi
% \clearpage
% \PrintChanges
%
% \clearpage
% \PrintIndex
%
% \Finale
%
%\iffalse
%<*dtx-style>
%    \begin{macrocode}
\ProvidesPackage{dtx-style}

\def\@dotsep{1000}
\setcounter{tocdepth}{2}
\setlength\columnseprule{0.4pt}
\renewcommand\tableofcontents{\relax
  \begin{multicols}{2}[\section*{\contentsname}]\relax
    \@starttoc{toc}\relax
  \end{multicols}}

\setcounter{IndexColumns}{2}
\renewenvironment{theglossary}
  {\small\list{}{}
     \item\relax
     \glossary@prologue\GlossaryParms 
     \let\item\@idxitem \ignorespaces 
     \def\pfill{\hspace*{\fill}}}
  {\endlist}

\usepackage{array,booktabs,calc,color,fancyvrb,graphicx,ifthen,longtable,refstyle,url,varioref}
\usepackage{fontspec,xunicode,unimath}

\input unimath-testing.tex

\setromanfont[Mapping=tex-text,Numbers=Lowercase]{FPL Neu}
\setsansfont[Scale=MatchLowercase,Mapping=tex-text]{Gill Sans}
\setmonofont[
  Scale=MatchLowercase,
  ItalicFont=Latin Modern Typewriter Oblique 10,
  BoldFont=Latin Modern Typewriter Dark 10,
  BoldItalicFont=Latin Modern Typewriter Dark Oblique 10,
  SmallCapsFont=Latin Modern Typewriter Caps Oblique 10,
]{Latin Modern Typewriter Regular 10}
\setmathfont{Cambria Math}

\linespread{1.05}      % A bit more space between lines
\frenchspacing         % Remove ugly extra space after punctuation
  
\definecolor{niceblue}{rgb}{0.4,0.6,1.000}
\newenvironment{example}
  {\hrulefill\par\VerbatimEnvironment
   \begin{VerbatimOut}[gobble=4]{\examplefilename}}
  {\end{VerbatimOut}\relax
   \begingroup
     \color{niceblue}
     \typesetexample
   \endgroup\par\hrulefill}

\let\examplesize\normalsize
\let\auxwidth\relax

\newlength\examplewidth\newlength\verbatimwidth
\newlength\exoutdent   \newlength\exverbgap
\setlength\exverbgap{1em}
\setlength\exoutdent{-0.15\textwidth}
\newsavebox\verbatimbox
\edef\examplefilename{\jobname.example}

\newcommand\typesetexample{\relax
   \begin{lrbox}{\verbatimbox}\relax
     \BVerbatimInput[fontsize=\small]{\examplefilename}\relax
   \end{lrbox}
   \begin{list}{}{\setlength\itemindent{0pt}
                  \setlength\leftmargin\exoutdent
                  \setlength\rightmargin{0pt}}\item
   \ifx\auxwidth\relax
     \setlength\verbatimwidth{\wd\verbatimbox}\relax
   \else
     \setlength\verbatimwidth{\auxwidth}\relax
   \fi
   \begin{minipage}[c]{\textwidth-\exoutdent-\verbatimwidth-\exverbgap}
     \catcode`\%=14\centering\examplesize\input\examplefilename\relax
   \end{minipage}\hfill
   \begin{minipage}[c]{\verbatimwidth}
     \usebox\verbatimbox
   \end{minipage}
   \end{list}
   \global\let\examplesize\normalsize}

\newcommand*\setexsize[1]{\let\examplesize#1}
\newcommand*\setverbwidth[1]{\def\auxwidth{#1}}

\newcommand*\name[1]{{#1}}
\newcommand*\pkg[1]{\textsf{#1}}

\newcommand*\note[1]{\unskip\footnote{#1}}

\let\latin\textit
\def\eg{\latin{e.g.}}
\def\Eg{\latin{E.g.}}
\def\ie{\latin{i.e.}}
\def\etc{\@ifnextchar.{\latin{etc}}{\latin{etc.}\@}}

\def\TeX{\smash{T\kern-.15em\lower.5ex\hbox{E}\kern-.07em X}\spacefactor1000\relax}
\def\reflect#1{{\setbox0=\hbox{#1}\rlap{\kern0.5\wd0
  \special{x:gsave}\special{x:scale -1 1}}\box0 \special{x:grestore}}}
\def\XeTeX{%
  \smash{X\lower.5ex\hbox{\kern-.07em\reflect{E}}}\kern-.15em \TeX}
\def\MacOSX{Mac~OS~X}

\def\OMEGA{Ω}

\newcounter{argument}
\g@addto@macro\endmacro{\setcounter{argument}{0}}
\newcommand*\darg[1]{%
  \stepcounter{argument}%
  \noindent{\ttfamily\char`\#\theargument}:~#1\par}
\newcommand*\doarg[1]{%
  \stepcounter{argument}%
  \noindent{\ttfamily\makebox[0pt][r]{[}\char`\#\theargument]}:~#1\par}

\newcount\c@xm@testcommands
\newcommand\TestCommands[2][4]{%
  \begin{multicols}{#1}\parindent0pt
    \c@xm@testcommands\z@
    \@for\@ii:=#2\do{%
      \global\advance\c@xm@testcommands\@ne
      {\ttfamily\char`\\#1\@ii}\hfill
      \csname#1\@ii\endcsname\endgraf}
  \end{multicols}
  {\unskip\vspace{5pt}\noindent
   \small(\the\c@xm@testcommands~commands)\par}}

%% fix \meta for now
%\def\langle{\textrm{‹\,}}\def\rangle{\textrm{\,›}}

\newcommand\codeline[1]{\par{\hspace{3em}#1\par\noindent}\ignorespaces}

\newcommand\unichar[2]{\textsc{\MakeLowercase{u+#1: #2}}}

\setlength\parindent{2em}

%    \end{macrocode}
%</dtx-style>
%\fi
%
% \typeout{*************************************************************}
% \typeout{*}
% \typeout{* To finish the installation you have to move the following}
% \typeout{* file into a directory searched by XeTeX:}
% \typeout{*}
% \typeout{* \space\space\space unimath.sty}
% \typeout{*}
% \typeout{*************************************************************}
%
\endinput
 