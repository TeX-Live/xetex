% \iffalse meta-comment
%
%!TEX encoding = UTF-8 Unicode
%
% Copyright 2005 by Will Robertson <wspr81@gmail.com>
% 
% Distributable under the LaTeX Project Public License,
% version 1.3c or higher (your choice). The latest version of
% this license is at: http://www.latex-project.org/lppl.txt
%
% This work is "maintained" (as per LPPL maintenance status) 
% by Will Robertson.
% 
% This work consists of the file  unimath.dtx
%           and the derived files unimath.sty and unimath.pdf.
%
%
%<*internalbatchfile>
\begingroup
%</internalbatchfile>
%<*batchfile>
\input docstrip.tex
\keepsilent
\preamble

  ________________________________
  Copyright © 2006  Will Robertson

  License information appended.


\endpreamble
\postamble

Copyright © 2006 by Will Robertson <wspr81@gmail.com>

Distributable under the LaTeX Project Public License,
version 1.3c or higher (your choice). The latest version of
this license is at: http://www.latex-project.org/lppl.txt

This work is "maintained" (as per LPPL maintenance status) 
by Will Robertson.

This work consists of the file  \jobname.dtx
          and the derived files \jobname.sty and \jobname.pdf.

\endpostamble
\askforoverwritefalse
\generate{\file{\jobname.sty}{\from{\jobname.dtx}{package}}}
\generate{\file{\jobname.ins}{\from{\jobname.dtx}{batchfile}}}
\nopreamble\nopostamble
\generate{\file{dtx-style.sty}{\from{\jobname.dtx}{dtx-style}}}
\generate{\file{stix-extract.sh}{\from{\jobname.dtx}{awk-script}}}
%</batchfile>
%<batchfile>\endbatchfile
%<*internalbatchfile>
\endgroup
%</internalbatchfile>
%
%<*driver>
\documentclass{ltxdoc}
\EnableCrossrefs
\CodelineIndex
\RecordChanges
%\OnlyDescription
\usepackage{dtx-style}
\begin{document}
  \DocInput{\jobname.dtx}
\end{document}
%</driver>
%
% \fi
%
% \GetFileInfo{\jobname.sty}
% \CheckSum{0}
% \errorcontextlines=999
% \makeatletter
%
% \title{Experimental unicode mathematical typesetting: The \pkg{unimath} package}
% \author{Will Robertson}
% \date{\filedate \qquad \fileversion}
%
% \maketitle
%
% \tableofcontents
%
% \section{Introduction}
%
% This document describes the \pkg{unimath} package, which is an
% \emph{experimental} implementation of a macro to unicode glyph encoding for 
% mathematical characters. Its intended use is for \XeTeX, although it is conjectured 
% that small effect needs to be spent to create a cross-format package that would 
% also work with \OMEGA.
%
% As of \XeTeX\ v.\,0.995, maths characters can be accessed in unicode 
% ranges. Now, a proper method must be invented for real unicode maths support. Before
% any code is written, I'm writing a specification in order to work out what is required.
% Fairly significant pieces of the NFSS may have to be re-written, and I'm a little unsure where to start.
%
% \section{Current NFSS methods}
% 
% In the following, \meta{NFSS decl.} stands for something like |{T1}{lmr}{m}{n}|.
%
% \begin{description}
% \item[Maths symbol fonts] Fonts for symbols: $\propto$, $\leq$, $\rightarrow$
%
% \cmd\DeclareSymbolFont\marg{name}\meta{NFSS decl.}\\
% Declares a named maths font such as |operators| from which symbols are defined with \cmd\DeclareMathSymbol.
%
% \item[Maths alphabet fonts] Fonts for {\font\1=cmmi10 at 10pt\1 ABC}\,–\,{\font\1=cmmi10 at 10pt\1 xyz}, {\font\1=eufm10 at 10pt\1 ABC}\,–\,{\font\1=cmsy10 at 10pt\1 XYZ}, etc.
%
% \cmd\DeclareMathAlphabet\marg{cmd}\meta{NFSS decl.}
%
% For commands such as \cmd\mathbf, accessed
% through maths mode that are unaffected by the current text font, and which are used for
% alphabetic symbols in the \ascii\ range.
%
% \cmd\DeclareSymbolFontAlphabet\marg{cmd}\marg{name}
%
% Alternative (and optimisation) for \cmd\DeclareMathAlphabet\ if a single font is being used
% for both alphabetic characters (as above) and symbols.
%
% \item[Maths `versions'] Different maths weights can be defined with the following, switched
% in text with the \cmd\mathversion\marg{maths version} command.
%
% \cmd\SetSymbolFont\marg{name}\marg{maths version}\meta{NFSS decl.}\\
% \cmd\SetMathAlphabet\marg{cmd}\marg{maths version}\meta{NFSS decl.}
%
% \item[Maths symbols] Symbol definitions in maths for both characters (=) and macros (\cmd\eqdef):
% \cmd\DeclareMathSymbol\marg{symbol}\marg{type}\marg{named font}\marg{slot}
% This is the macro that actually defines which font each symbol comes from and how they behave.
% \end{description}
% Delimiters, accents, and radicals are not dealt with yet.
%
% \section{Specification}
%
% In the ideal case, a single unicode font will contain all maths glyphs we need.
% Barbara Beeton's STIX table provides the mapping between unicode maths glyphs 
% and macro names (all 3298 of them!).
% A single command \codeline{\cmd\setmathsfont\oarg{font features}\marg{font name}} would implement this
% for every every symbol and alphabetic variant.
% That means |x| to $x$, |\xi| to $\xi$, |\leq| to $\leq$, etc., 
% |\mathcal{H}| to $\mathcal{H}$ and so on, all for unicode glyphs within a single font.
%
% Furthermore, this package should deal well with unicode characters for maths input, as well.
% This includes using literal Greek letters in formulae, resolving to upright or italic depending on preference.
%
% Finally, maths versions must also be provided for. While I guess version selection in
% \LaTeX\ will remain the same, the specification for choosing the version fonts will
% probably be an optional argument:
% \codeline{\cmd\setmathsfont|[Version=Bold,|\meta{font features}|]|\marg{font name}}
% 
% All instances of `maths' in command names will be aliased to `math' for our 
% American (or abbreviatory-minded) friends. Instances above of 
% \codeline{\oarg{font features}\marg{font name}} 
% follow from my \pkg{fontspec} package, and therefore any additional \meta{font features}
% specific to maths fonts will hook into \pkg{fontspec}'s methods.
%
% \subsection{Dealing with real life}
%
% Let's face it; there will probably be few cases where a single unicode maths font suffices. The upcoming STIX font comes to mind as a notable exception. It will therefore be necessary to delegate specific unicode ranges of glyphs to separate fonts. This syntax will also hook into the \pkg{fontspec} font feature processing:
%\codeline{\cmd\setmathsfont|[Range=|\meta{unicode range}|,|\meta{font features}|]|\marg{font name}}
% where \meta{unicode range} is a comma-separated list of unicode slots and ranges such as |{27D0-27EB, 27FF, 295B-297F}|. Furthermore, preset names ranges could be used, such as |MiscMathSymbolsA|, with such ranges based on unicode chunks. The amount of optimisation required here to achieve acceptable performance has yet to be determined. Techniques such as saving out unicode subsets based on \meta{unicode range} data to be \cmd\input\ in the next \LaTeX\ run are a possibility, but at this stage, performance without such measures seems acceptable.
% 
% \StopEventually{}
%
% \part{The \pkg{unimath} package}
%\iffalse
%<*package>
%\fi
% This is the package.
%    \begin{macrocode}
\ProvidesPackage{unimath}
  [2006/02/20 v0.01 Unicode maths definitions]  
%    \end{macrocode}
%
% \section{Things we need}
%
% \subsection{Packages}
%    \begin{macrocode}
\RequirePackage{fontspec}
%    \end{macrocode}
%
% \subsection{Counters and conditionals}
%    \begin{macrocode}
\newcounter{um@fam}
\newif\if@um@fontspec@feature
%    \end{macrocode} 
%
% \subsection{Programming macros}
% \begin{macro}{\um@Loop}
% \begin{macro}{\um@Break}
% See Kees van der Laan's various articles on \TeX\ programming:
%    \begin{macrocode}
\def\um@Loop#1\um@Pool{#1\um@Loop#1\um@Pool} 
\def\um@Break#1\um@Pool{} 
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\um@FOR}
% A simple `for' loop implemented with the above.
% Takes a (predefined) counter \cmd\csname\ and increments it between two integers, iterating as we go.
%    \begin{macrocode}
\long\def\um@FOR #1 = [#2:#3] #4{%
  {\csname#1\endcsname =#2\relax
   \um@Loop #4%
     \expandafter\advance\csname#1\endcsname\@ne
     \expandafter\ifnum\csname#1\endcsname>#3\relax
       \expandafter\um@Break
     \fi 
   \um@Pool}}
%    \end{macrocode}
% \end{macro}
%
% \begin{example}{}
%   \newcount\@ii
%   \um@FOR @ii = [7:13] {\@alph\@ii/}
% \end{example}
%
% \subsection{Overcoming \cmd\@onlypreamble}
%
% This will be refined later!
%    \begin{macrocode}
\def\@preamblecmds{}
%    \end{macrocode}
%
% \section{Fundamentals}
%
% \subsection{Enlarging the number of maths families}
%
% To start with, we've got a power of two as many \cmd\fam s as before. So (from |ltfssbas.dtx|) we want to redefine
%    \begin{macrocode}
\def\new@mathgroup{\alloc@8\mathgroup\chardef\@cclvi}
\let\newfam\new@mathgroup
%    \end{macrocode}
%
% \begin{example}{}
%   \um@FOR @tempcnta = [1:20]
%     {\expandafter\newfam
%        \csname mt\@alph\@tempcnta\endcsname}
%   Up to math fam \the\mtt\ of 255. 
% \end{example}
%
% This is sufficient for \LaTeX's \cmd\DeclareSymbolFont-type commands to be able
% to define 256 named maths fonts. Now we need a new \cmd\DeclareMathSymbol.
%
% \subsection{\cmd\DeclareMathSymbol\ for unicode ranges}
%
% This is mostly an adaptation from \LaTeX's definition.
%
% \begin{macro}{\DeclareUnicodeMathSymbol}
% \darg{Symbol, \eg, \cmd\alpha\ or |a|}
% \darg{Type, \eg, \cmd\mathalpha}
% \darg{Math font name, \eg, \texttt{operators}}
% \darg{Slot, \eg, \texttt{"221E}}
%    \begin{macrocode}
\def\DeclareUnicodeMathSymbol#1#2#3#4{%
%    \end{macrocode}
% First ensure the math font (\eg, |operators|) exists:
%    \begin{macrocode}
  \expandafter\in@\csname sym#3\expandafter\endcsname
     \expandafter{\group@list}%
  \ifin@
%    \end{macrocode}
% No longer need here to perform the obfuscated hex conversion, since
% \cmd\XeTeXextmathchar\ (and friends) has a more simplified input than \TeX's \cmd\mathchar.
%    \begin{macrocode}
    \begingroup
%    \end{macrocode}
% The symbol to be defined can be either a command (|\alpha|) or a character (|a|).
% Branch for the former:
%    \begin{macrocode}
      \if\relax\noexpand#1% is command?
        \edef\reserved@a{\noexpand\in@{\string\XeTeXextmathchar}{\meaning#1}}%
        \reserved@a
%    \end{macrocode}
% If the symbol command definition contains \cmd\XeTeXextmathchar, then
% we can provide the info that a previous symbol definition is being overwritten:
%    \begin{macrocode}
        \ifin@
          \expandafter\um@set@mathsymbol
             \csname sym#3\endcsname#1#2{#4}%
          \@font@info{Redeclaring math symbol \string#1}%
%    \end{macrocode}
% Otherwise, overwrite it if the symbol command definition contains plain old \cmd\mathchar:
%    \begin{macrocode}
        \else
          %\edef\reserved@a{\noexpand\in@{\string\mathchar}{\meaning#1}}%
          %\reserved@a
          %\ifin@
          %  \expandafter\set@xmathsymbol
          %     \csname sym#3\endcsname#1#2{#4}%
%    \end{macrocode}
% Otherwise, throw an error if the command name is already taken by a non-symbol definition:
%    \begin{macrocode}
          %\else
            %\expandafter\ifx
            %\csname\expandafter\@gobble\string#1\endcsname
            %\relax
              \expandafter\um@set@mathsymbol
                 \csname sym#3\endcsname#1#2{#4}%
            %\else
            %  \@latex@error{Command `\string#1' already defined}\@eha
            %\fi
          %\fi
        \fi
%    \end{macrocode}
% And if the symbol input is a character:
%    \begin{macrocode}
      \else
        \expandafter\um@set@mathchar
          \csname sym#3\endcsname#1#2{#4}%
      \fi
    \endgroup
%    \end{macrocode}
% Everything previous was skipped if the maths font doesn't exist in the first place:
%    \begin{macrocode}
  \else
    \@latex@error{Symbol font `#3' is not defined}\@eha
  \fi}
%    \end{macrocode}
% \end{macro}
%
% The final macros that actually define the maths symbol with \XeTeX\ primitives.
%
% \begin{macro}{\um@set@mathsymbol}
% If the symbol definition is for a macro:
%    \begin{macrocode}
\def\um@set@mathsymbol#1#2#3#4{%
  \global\XeTeXextmathchardef#2="\mathchar@type#3 #1 #4\relax}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\um@set@mathchar}
% Or if it's for a character:
%    \begin{macrocode}
\def\um@set@mathchar#1#2#3#4{%
  \global\XeTeXextmathcode`#2="\mathchar@type#3 #1 #4\relax}
%    \end{macrocode}
% \end{macro}
%
% \begin{example}{firstline=2}
%   \Huge
%   \zf@fontspec{}{Cambria Math}
%   \let\glb@currsize\relax
%   \DeclareSymbolFont{test}{EU1}{\zf@family}{m}{n}
%   \DeclareUnicodeMathSymbol{\infinity}{\mathord}{test}{"221E}
%   $\infinity$
% \end{example}
%
% \begin{macro}{\DeclareUnicodeMathCode}
% [For later] or if it's for a character code: (just  a wrapper around the primitive)
%    \begin{macrocode}
\def\DeclareUnicodeMathCode#1#2#3#4{%
  \global\XeTeXextmathcode#1=
    "\mathchar@type#2 \csname sym#3\endcsname #4\relax}
%    \end{macrocode}
% \end{macro}
%
% \begin{example}{firstline=2}
%   \Huge
%   \zf@fontspec{}{Cambria Math}
%   \let\glb@currsize\relax
%   \DeclareSymbolFont{test2}{EU1}{\zf@family}{m}{n}
%   \DeclareUnicodeMathCode{65}{\mathalpha}{test2}{119860}
%   $A$
% \end{example}
%
%
% \subsection{User interface to \cmd\DeclareSymbolFont}
%
% \begin{macro}{\setmathfont}
% \doarg{font features}
% \darg{font name}
%    \begin{macrocode}
\newcommand\setmathfont[2][]{%
%    \end{macrocode}
% Erase any conception \LaTeX\ has of previously defined math symbol fonts;
% this allows \cmd\DeclareSymbolFont\ at any point in the document.
%
% To start with, assume we're defining every math symbol character.
%    \begin{macrocode}
  \let\glb@currsize\relax
  \let\um@char@range\@empty
%    \end{macrocode}
% Use \pkg{fontspec} to select a font to use:
%    \begin{macrocode}
  \@um@fontspec@featuretrue
  \zf@fontspec{#1}{#2}%
%    \end{macrocode}
% Probably want to check there that we're not creating multiple symbol fonts
% with the same NFSS declaration. On that note, \pkg{fontspec} doesn't seem to
% be keeping track of that, either |:(|
%    \begin{macrocode}
  \stepcounter{um@fam}%
  \DeclareSymbolFont{um@fam\theum@fam}
    {EU1}{\zf@family}{\mddefault}{\updefault}%
%    \end{macrocode}
% Now when the list of unicode symbols is input, we want a suitable definition of 
% its internal macro. By default, we want to define every single math char:
%    \begin{macrocode}
  \ifx\um@char@range\@empty
      \um@text@input{um@fam\theum@fam}%
      \PackageWarning{unimath}{Defining the default maths font as `#2'}
      \def\unicode@math@symbol##1##2##3##4{%
        \DeclareUnicodeMathSymbol
          {##2}{##3}{um@fam\theum@fam}{##1}}%
  \else
%    \end{macrocode}
% If the \feat{Range} font feature has been used, then only
% a subset of the unicode glyphs are to be defined.
% See \secref{rangeproc} for the code that enables this.
%    \begin{macrocode}
    \def\unicode@math@symbol##1##2##3##4{%
      \um@parse@term{##1}{##2}{%
        \PackageWarning{unimath}{Defining \string##2 as mathchar ##1 from font `#2'}
        \DeclareUnicodeMathSymbol
          {##2}{##3}{um@fam\theum@fam}{##1}}}%      
  \fi
%    \end{macrocode}
% And now we input every single maths char. See File~\ref{part:awk-script} for
% the source to |unimath.tex|.
%    \begin{macrocode}
  \input unimath.tex}
\let\setmathsfont\setmathfont
%    \end{macrocode}
% \end{macro}
%
% Here's the simplest usage:
% \begin{example}{}
%   \setmathfont{Cambria Math}
%   $Ax \eqdef \nabla \times \scrZ$
% \end{example}
%
% And an example of the \feat{Range} feature:
% \begin{example}{}
%   \setmathfont{Cambria Math}
%   $(a, \alpha, \scrM, \aleph, \scrH, \BbbH)$
%   \setmathfont[Range={"2133-"2135, \scrH,\BbbH}]{Lucida Sans}
%   $(a, \alpha, \scrM, \aleph, \scrH, \BbbH)$
%   \setmathfont[Range={"2133-"2135, \scrH,\BbbH}]{Apple Symbols}
%   $(a, \alpha, \scrM, \aleph, \scrH, \BbbH)$
% \end{example}
%
%
% \subsection{Big operators}
% \subsection{Maths accents}
% \subsection{Delimiters}
%
% \begin{example}{}
%   \setmathfont{Cambria Math}
%   \[ \left(\frac{%
%      \left(\sum^N_{i=n}\left(\int^1_0
%      \left(a\times b\right)
%      \right)\right)}{A^{B^C}_{D_E}}\right) \]
% \end{example}
%
%
%
%
% \subsection{Setting up the \ascii\ ranges}
%
% We want it to be convenient for users to actually type in maths.
% The \ascii\ Latin characters should be used for italic maths,
% and the text Greek characters should be used for upright/italic
% (depending on preference) Greek, if desired.
%
% \begin{macro}{\um@text@input}
% And here're the text input to maths output mappings, wrapped up in a macro.
%    \begin{macrocode}
\newcommand\um@text@input[1]{%
%    \end{macrocode}
% Latin alphabet, uppercase and lowercase respectively:
%    \begin{macrocode}
  \um@FOR @tempcnta = [0:25] {%
    \um@mathcode@offset{#1}{65}{119860}%
    \um@mathcode@offset{#1}{97}{119886}%
  }%
%    \end{macrocode}
% Filling a hole for `h', which maps to \unichar{210E}{PLANCK CONSTANT}
% instead of the expected \unichar{1D455}{MATHEMATICAL ITALIC SMALL H} (which is not assigned):
%    \begin{macrocode}
  \DeclareUnicodeMathCode{104}{\mathalpha}{#1}{8462}%
%    \end{macrocode}
% Greek alphabet, uppercase (note the hole after \unichar{03A1}{GREEK CAPITAL LETTER RHO}):
%    \begin{macrocode}
  \um@FOR @tempcnta = [0:23] {%
    \DeclareUnicodeMathCode
      {\ifnum\@tempcnta>16
         \numexpr\the\@tempcnta+913\relax
       \else
         \numexpr\the\@tempcnta+913+1\relax       
       \fi}
      {\mathalpha}{#1}
      {\numexpr\the\@tempcnta+120546\relax}%
%    \end{macrocode}
% And Greek lowercase:
%    \begin{macrocode}
    \um@mathcode@offset{#1}{945}{120572}%
  }%
}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\um@mathcode@offset}
% This is a wrapper macro to save space:
%    \begin{macrocode}
\newcommand\um@mathcode@offset[3]{%
  \DeclareUnicodeMathCode
    {\numexpr\the\@tempcnta+#2\relax}
    {\mathalpha}{#1}
    {\numexpr\the\@tempcnta+#3\relax}%  
}
%    \end{macrocode}
% \end{macro}
% 
% \begin{example}{}
%   \setmathsfont{Cambria Math}
%   $ABCDEFGHIJKLMNOPQRSTUVWXYZ$ \\
%   $abcdefghijklmnopqrstuvwxyz$ \\
%   $ΑΒΓΔΕΖΗΘΙΚΛΜΝΞΟΠΡΣΤΥΦΧΨΩ$ \\
%   $αβγδεζηθικλμνξοπρστυφχψω$ \\
% \end{example}
%
% \section{\pkg{fontspec} feature hooks}
%
% \begin{macro}{\um@zf@feature}
% Use the same method as \pkg{fontspec} for feature definition
% (\ie, using \pkg{xkeyval}) but with a conditional to restrict
% the scope of these features to \pkg{unimath} commands.
%    \begin{macrocode}
\newcommand\um@zf@feature[2]{%
  \define@key[zf]{options}{#1}{%
    \if@um@fontspec@feature
      #2
    \else
      \PackageError{fontspec/unimath}
        {The `#1' font feature can only be used for maths fonts}
        {The feature you tried to use can only be in commands
          like \protect\setmathsfont}
    \fi}}
%    \end{macrocode}
% \end{macro}
%
%
% \subsection{Range processing}\seclabel{rangeproc}
%
%    \begin{macrocode}
\um@zf@feature{Range}{\xdef\um@char@range{\zap@space#1 \@empty}}
%    \end{macrocode}
%
% Pretty basic comma separated range processing.
% Donald Arseneau's \pkg{selectp} package has a cleverer technique.
%
% \begin{macro}{\um@parse@term}
% This macro simply iterates over a comma separated list, passing
% each potential range value to \cmd\um@parse@range. Specified
% ranges $r$ may be 
%
% \begin{tabular}{>{\ttfamily\itshape}cc}
% Input & Range \\
% \hline
% x & $r=x$ \\
% x- & $r\geq x$ \\
% -x & $r\leq x$ \\
% x-y & $x \leq r \leq y$ \\
% \end{tabular}
%    \begin{macrocode}
\newcommand\um@parse@term[3]{%
  \@for\@ii:=\um@char@range\do{%
    \unless\ifx\@ii\@empty
      \@tempswafalse
      \expandafter\if\expandafter\relax\expandafter\noexpand\@ii
        \expandafter\ifx\@ii#2
          \@tempswatrue
        \fi
      \else
        \expandafter\um@parse@range\@ii-\@marker-\@nil#1\@nil
      \fi
      \if@tempswa
        #3
      \fi
    \fi}}
%    \end{macrocode}
% \end{macro}
%
% \begin{example}{}
%   \def\um@char@range{\yuck,2-4}
%   \um@parse@term{1}{\yuck}
%      {`1' or `\string\yuck' is included}
%   \um@parse@term{3}{\yum}
%      {`3' or `\string\yum' is included}
% \end{example}
%
% \begin{macro}{\um@parse@range}
% As mentioned, this macro can be passed four different input types via \cmd\um@parse@term.
%    \begin{macrocode}
\def\um@parse@range#1-#2-#3\@nil#4\@nil{%
  \def\@tempa{#1}%
  \def\@tempb{#2}%
%    \end{macrocode}
% \begin{tabular}{@{}ll}
% \hline
% Range & $r=x$ \\
% C-list input & \cmd\@ii=|X| \\
% Macro input & |\um@parse@range X-\@marker-\@nil#1\@nil| \\
% Arguments & 
%     \texttt{\textcolor{red}{\char`\#1}-\textcolor{blue}{\char`\#2}-\textcolor{green}{\char`\#3}}
%   = \texttt{\textcolor{red}{X}-\textcolor{blue}{\cmd\@marker}-\textcolor{green}{\char`\{\char`\}}} \\
% \hline
% \end{tabular}
%    \begin{macrocode}
  \ifx#2\@marker\relax
    \ifnum#4=#1\relax
      \@tempswatrue
    \fi
  \else
%    \end{macrocode}
% \begin{tabular}{@{}ll}
% \hline
% Range & $r\geq x$ \\
% C-list input & \cmd\@ii=|X-| \\
% Macro input & |\um@parse@range X--\@marker-\@nil#1\@nil|\\
% Arguments & 
%    \texttt{\textcolor{red}{\char`\#1}-\textcolor{blue}{\char`\#2}-\textcolor{green}{\char`\#3}}
% = \texttt{\textcolor{red}{X}-\textcolor{blue}{\char`\{\char`\}}-\textcolor{green}{\cmd\@marker-}} \\
% \hline
% \end{tabular}
%    \begin{macrocode}
    \ifx\@empty\@tempb
      \ifnum#4>\numexpr#1-1\relax
        \@tempswatrue
      \fi
    \else
%    \end{macrocode}
% \begin{tabular}{@{}ll}
% \hline
% Range & $r\leq x$ \\
% C-list input & \cmd\@ii=|-Y|  \\
% Macro input & |\um@parse@range -Y-\@marker-\@nil#1\@nil|\\
% Arguments & 
%    \texttt{\textcolor{red}{\char`\#1}-\textcolor{blue}{\char`\#2}-\textcolor{green}{\char`\#3}}
% = \texttt{\textcolor{red}{\char`\{\char`\}}-\textcolor{blue}{Y}-\textcolor{green}{\cmd\@marker-}}\\
% \hline
% \end{tabular}
%    \begin{macrocode}
      \ifx\@empty\@tempa
        \ifnum#4<\numexpr#2+1\relax
          \@tempswatrue
        \fi
%    \end{macrocode}
% \begin{tabular}{@{}ll}
% \hline
% Range & $x \leq r \leq y$  \\
% C-list input & \cmd\@ii=|X-Y|  \\
% Macro input & |\um@parse@range X-Y-\@marker-\@nil#1\@nil|\\
% Arguments & 
%     \texttt{\textcolor{red}{\char`\#1}-\textcolor{blue}{\char`\#2}-\textcolor{green}{\char`\#3}}
% =  \texttt{\textcolor{red}{X}-\textcolor{blue}{Y}-\textcolor{green}{\cmd\@marker-}}\\
% \hline
% \end{tabular}
%    \begin{macrocode}
      \else
        \ifnum#4>\numexpr#1-1\relax
          \ifnum#4<\numexpr#2+1\relax
            \@tempswatrue
          \fi
        \fi
      \fi
    \fi
  \fi}
%    \end{macrocode}
% \end{macro}
%
%\iffalse
%</package>
%\fi
%
% 
% \iffalse
% \section{Verification}
%
% The input files used to define the unicode maths symbols are
% processed with a different definition of \cmd\DeclareUnicodeMathSymbol\
% to typeset the defined symbols. The Code2000 font is used for
% Plane~0 characters, Code2001 for Plane~1.
%
% \renewcommand\DeclareUnicodeMathSymbol[4]{
%   \scshape\addfontfeature{Numbers=Monospaced}\MakeLowercase{#1} &
%   #2 & \cmd#2 & \scshape#4\\}
%
% \subsection{Plane 0}
% \setmathfont{Code2000}
% \begin{longtable}[l]{@{}cccp{6cm}@{}}
% \input unimath.tex
% \end{longtable}
%
%
% \part{STIX table data extraction}\label{part:awk-script}
%\iffalse
%<*awk-script>
%\fi
%
% The source for the \TeX\ names for the very large number of mathematical
% glyphs are provided via Barbara Beeton's table file for the STIX project
% (|ams.org/STIX|). A version is located at
% \url{http://www.ams.org/STIX/bnb/stix-tbl.asc}
% but it's not currently up to date.
%
% A single file is produced containing all 3298 symbols.
% Future optimisations might include generating various (possibly overlapping) subsets
% so not all definitions must be read just to redefine a small range of symbols..
%
%    \begin{macrocode}
#!/bin/sh

cat stix-tbl.asc | 
awk '
 BEGIN {OFS="|"} 
 {if (usv != substr($0,2,5) ) 
   {if (substr($0,2,1) != " ")
    {usv = substr($0,2,5);
     texname = substr($0,84,25);
     type = substr($0,57,1);
     description = tolower(substr($0,233,350));
     {if (texname ~ /[\\]/)
       print usv, texname, type, description;}}}}' - | 
awk -F"|" ' 
  (($3 != " ") && ($3 != "F") && ($3 != "D")) {
    print "\\unicode@math@symbol{" "\"" $1 "}{" $2 "}{" $3 "}{" $4 "}";
 }' - |
sed -e ' s/{N}/{\\mathord}/   ' \
    -e ' s/{A}/{\\mathalpha}/ ' \
    -e ' s/{P}/{\\mathpunct}/ ' \
    -e ' s/{B}/{\\mathbin}/   ' \
    -e ' s/{R}/{\\mathrel}/   ' \
    -e ' s/{L}/{\\mathop}/    ' \
    -e ' s/{O}/{\\mathopen}/  ' \
    -e ' s/{C}/{\\mathclose}/ ' > unimath.tex
%    \end{macrocode}
%\iffalse
%</awk-script>
%\fi
%
% \appendix
% \section{Documenting the NFSS}
% 
% This section contains an abridged and documented version
% of (bits and pieces of) \LaTeX's NFSS. Changes are mostly
% cosmetic and omission of irrelevant things.
% 
%
% \iffalse
%<*neveroutput>
% \fi
%
% \subsection{Maths symbols}
%
% \begin{macro}{\DeclareMathSymbol}
% \darg{Symbol, e.g., \cmd\alpha\ or `a'}
% \darg{Type, e.g., \cmd\mathalpha}
% \darg{Math font name, e.g., \texttt{operators}}
% \darg{Slot, e.g., \texttt{F1}}
%
 %   \begin{macrocode}
\def\DeclareMathSymbol#1#2#3#4{%
%    \end{macrocode}
% First ensure the math font (e.g., |operators|) exists:
%    \begin{macrocode}
  \expandafter\in@\csname sym#3\expandafter\endcsname
     \expandafter{\group@list}%
  \ifin@
%    \end{macrocode}
% Convert the slot number to two hex digits stored in 
% \cmd\count\cmd\z@\ and \cmd\count\cmd\tw@, respectively:
%    \begin{macrocode}
    \begingroup
      \count\z@=#4\relax
      \count\tw@\count\z@
      \divide\count\z@\sixt@@n
      \count@\count\z@
      \multiply\count@\sixt@@n
      \advance\count\tw@-\count@
%    \end{macrocode}
% The symbol to be defined can be either a command (|\alpha|) or a character (|a|).
% Branch for the former:
%    \begin{macrocode}
      \if\relax\noexpand#1% is command?
        \edef\reserved@a{\noexpand\in@{\string\mathchar}{\meaning#1}}%
        \reserved@a
%    \end{macrocode}
% If the symbol command definition contains \cmd\mathchar, then
% we can provide the info that a previous symbol definition is being overwritten:
%    \begin{macrocode}
        \ifin@
          \expandafter\set@mathsymbol
             \csname sym#3\endcsname#1#2%
             {\hexnumber@{\count\z@}\hexnumber@{\count\tw@}}%
          \@font@info{Redeclaring math symbol \string#1}%
%    \end{macrocode}
% Otherwise, throw an error if the command name is already taken by a non-symbol definition:
%    \begin{macrocode}
        \else
            \expandafter\ifx
            \csname\expandafter\@gobble\string#1\endcsname
            \relax
            \expandafter\set@mathsymbol
               \csname sym#3\endcsname#1#2%
               {\hexnumber@{\count\z@}\hexnumber@{\count\tw@}}%
          \else
            \@latex@error{Command `\string#1' already defined}\@eha
          \fi
        \fi
%    \end{macrocode}
% And if the symbol input is a character:
%    \begin{macrocode}
      \else
        \expandafter\set@mathchar
          \csname sym#3\endcsname#1#2
          {\hexnumber@{\count\z@}\hexnumber@{\count\tw@}}%
      \fi
    \endgroup
%    \end{macrocode}
% Everything previous was skipped if the maths font doesn't exist in the first place:
%    \begin{macrocode}
  \else
    \@latex@error{Symbol font `#3' is not defined}\@eha
  \fi}
%    \end{macrocode}
% \end{macro}
% The final macros that actually define the maths symbol with \TeX\ primitives.
% If the symbol definition is for a macro:
%    \begin{macrocode}
\def\set@mathsymbol#1#2#3#4{%
  \global\mathchardef#2"\mathchar@type#3\hexnumber@#1#4\relax}
%    \end{macrocode}
% Or if it's for a character:
%    \begin{macrocode}
\def\set@mathchar#1#2#3#4{%
  \global\mathcode‘#2="\mathchar@type#3\hexnumber@#1#4\relax}
%    \end{macrocode}
%
% \paragraph{Summary}
% For symbols, something like:
% \begin{verbatim}
% \def\DeclareMathSymbol#1#2#3#4{%
%   \global\mathchardef#1"\mathchar@type#2
%     \expandafter\hexnumber@\csname sym#2\endcsname
%     {\hexnumber@{\count\z@}\hexnumber@{\count\tw@}}}
% \end{verbatim}
% For characters, something like:
% \begin{verbatim}
% \def\DeclareMathSymbol#1#2#3#4{%
%   \global\mathcode`#1"\mathchar@type#2
%     \expandafter\hexnumber@\csname sym#2\endcsname
%     {\hexnumber@{\count\z@}\hexnumber@{\count\tw@}}}
% \end{verbatim}
%
% \subsection{Symbol fonts}
%
% \begin{macro}{\DeclareSymbolFont}
% \darg{font name, \eg, \texttt{letters}}
% \darg{font encoding, \eg, \texttt{OT1}}
% \darg{font family, \eg, \texttt{cmr}}
% \darg{font series, \eg, \texttt{m}}
% \darg{font shape, \eg, \texttt{n}}
%    \begin{macrocode}
\def\DeclareSymbolFont#1#2#3#4#5{%
%    \end{macrocode}
% First check that the font encoding is defined.
%    \begin{macrocode}
 \@tempswafalse
 \edef\reserved@b{#2}%
 \def\cdp@elt##1##2##3##4{\def\reserved@c{##1}%
      \ifx\reserved@b\reserved@c \@tempswatrue\fi}%
 \cdp@list
%    \end{macrocode}
% So far so good. Now branch depending if this symbol font has been declared yet or not. If not,
% the symbol font is defined as the macro |\sym#1|; \ie, for the |letters| symbol font,
% the associated command name is |\symletters|. (Funny it's not |\sym@#1|.)
%    \begin{macrocode}
 \if@tempswa
   \@ifundefined{sym#1}{%
      \expandafter\new@mathgroup\csname sym#1\endcsname
      \expandafter\new@symbolfont\csname sym#1\endcsname{#2}{#3}{#4}{#5}%
   }%
%    \end{macrocode}
% If the symbol font has been already declared:
%    \begin{macrocode}
     {\@font@info{Redeclaring symbol font `#1'}%
%    \end{macrocode}
% 
% [Update the group list.]
%    \begin{macrocode}
      \def\group@elt##1##2{%
           \noexpand\group@elt\noexpand##1%
           \expandafter\ifx\csname sym#1\endcsname##1%
             \expandafter\noexpand\csname#2/#3/#4/#5\endcsname
           \else
               \noexpand##2%
           \fi}%
      \xdef\group@list{\group@list}%
%    \end{macrocode}
% [Update the version list.]
%    \begin{macrocode}
      \def\version@elt##1{%
          \expandafter
          \SetSymbolFont@\expandafter##1\csname#2/#3/#4/#5\expandafter
              \endcsname \csname sym#1\endcsname
          }%
      \version@list
     }%
%    \end{macrocode}
% If the font encoding wasn't defined, all of the above was skipped.
%    \begin{macrocode}
  \else
    \@latex@error{Encoding scheme  `#2' unknown}\@eha
  \fi}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\new@symbolfont}
% \darg{internal symbol font name, \eg, \cmd\symletters}
% \darg{font encoding, \eg, \texttt{OT1}}
% \darg{font family, \eg, \texttt{cmr}}
% \darg{font series, \eg, \texttt{m}}
% \darg{font shape, \eg, \texttt{n}}
%    \begin{macrocode}
\def\new@symbolfont#1#2#3#4#5{%
%    \end{macrocode}
% Update the group list:
%    \begin{macrocode}
    \toks@\expandafter{\group@list}%
    \edef\group@list{\the\toks@\noexpand\group@elt\noexpand#1%
                     \expandafter\noexpand\csname#2/#3/#4/#5\endcsname}%
%    \end{macrocode}
% 
%    \begin{macrocode}
    \def\version@elt##1{\toks@\expandafter{##1}%
                   \edef##1{\the\toks@\noexpand\getanddefine@fonts
                   #1\expandafter\noexpand\csname#2/#3/#4/#5\endcsname}%
                  \global\advance\csname c@\expandafter
                                 \@gobble\string##1\endcsname\@ne
                 }%
    \version@list}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\SetSymbolFont}
% \darg{math font version, \eg, \texttt{normal}}
% \darg{font name, \eg, \texttt{letters}}
% \darg{font encoding, \eg, \texttt{OT1}}
% \darg{font family, \eg, \texttt{cmr}}
% \darg{font series, \eg, \texttt{m}}
% \darg{font shape, \eg, \texttt{n}}
%    \begin{macrocode}
\def\SetSymbolFont#1#2#3#4#5#6{%
 \@tempswafalse
 \edef\reserved@b{#3}%
 \def\cdp@elt##1##2##3##4{\def\reserved@c{##1}%
      \ifx\reserved@b\reserved@c \@tempswatrue\fi}%
 \cdp@list
 \if@tempswa
  \expandafter\SetSymbolFont@
    \csname mv@#2\expandafter\endcsname\csname#3/#4/#5/#6\expandafter
    \endcsname \csname sym#1\endcsname
 \else
  \@latex@error{Encoding scheme  `#3' unknown}\@eha
 \fi
}
%    \end{macrocode}
% \end{macro}
%
%
%
% \begin{macro}{\SetSymbolFont@}
% \darg{internal math font version, \eg, \cmd\mv@normal}
% \darg{NFSS font, \eg, \cs{OT1/cmr/m/n}}
% \darg{internal symbol name, \eg, \cmd\symletters}
%    \begin{macrocode}
\def\SetSymbolFont@#1#2#3{%
%    \end{macrocode}
% If the maths version has been defined:
%    \begin{macrocode}
  \expandafter\in@\expandafter#1\expandafter{\version@list}%
  \ifin@
%    \end{macrocode}
% If the symbol font has been defined:
%    \begin{macrocode}
    \expandafter\in@\expandafter#3\expandafter{\group@list}%
    \ifin@
      \begingroup
        \expandafter\get@cdp\string#2\@nil\reserved@a
        \toks@{}%
        \def\install@mathalphabet##1##2{%
             \addto@hook\toks@{\install@mathalphabet##1{##2}}%
            }%
        \def\getanddefine@fonts##1##2{%
          \ifnum##1=#3%
             \addto@hook\toks@{\getanddefine@fonts#3#2}%
             \expandafter\get@cdp\string##2\@nil\reserved@b
             \ifx\reserved@a\reserved@b\else
                \@font@warning{Encoding `\reserved@b' has changed
                    to `\reserved@a' for symbol font\MessageBreak
                   `\expandafter\@gobblefour\string#3' in the
                    math version `\expandafter
                    \@gobblefour\string#1'}%
             \fi
             \@font@info{%
                Overwriting symbol font
                `\expandafter\@gobblefour\string#3' in
                 version `\expandafter
                \@gobblefour\string#1'\MessageBreak
                \@spaces \expandafter\@gobble\string##2 -->
                         \expandafter\@gobble\string#2}%
          \else
             \addto@hook\toks@{\getanddefine@fonts##1##2}%
          \fi}%
         #1%
         \xdef#1{\the\toks@}%
      \endgroup
%    \end{macrocode}
% If the symbol font wasn't defined, all of the above was skipped:
%    \begin{macrocode}
    \else
       \@latex@error{Symbol font `\expandafter\@gobblefour\string#3' 
                  not defined}\@eha
    \fi
%    \end{macrocode}
% If the maths version wasn't defined, all of the above was skipped:
%    \begin{macrocode}
  \else
    \@latex@error{Math version `\expandafter\@gobblefour\string#1' 
       is not
       defined}{You probably mispelled the name of the math
       version.^^JOr you have to specify an additional package.}%
  \fi}
%    \end{macrocode}
% \end{macro}
%
%
%
% \iffalse
%</neveroutput>
% \fi
%
% \clearpage
% \PrintChanges
%
% \clearpage
% \PrintIndex
%
% \Finale
%
%\iffalse
%<*dtx-style>
%    \begin{macrocode}
\ProvidesPackage{dtx-style}

\def\@dotsep{1000}
\setcounter{tocdepth}{2}
\setlength\columnseprule{0.4pt}
\renewcommand\tableofcontents{\relax
  \begin{multicols}{2}[\section*{\contentsname}]\relax
    \@starttoc{toc}\relax
  \end{multicols}}

\setcounter{IndexColumns}{2}
\renewenvironment{theglossary}
  {\small\list{}{}
     \item\relax
     \glossary@prologue\GlossaryParms 
     \let\item\@idxitem \ignorespaces 
     \def\pfill{\hspace*{\fill}}}
  {\endlist}

\usepackage{array,booktabs,calc,color,enumitem,fancyvrb,graphicx,ifthen,longtable,refstyle,url,varioref}
\usepackage{fontspec,xltxtra,xunicode,unimath}

%\usepackage[rm,small]{titlesec}

\setromanfont[Mapping=tex-text,Numbers=Lowercase]{FPL Neu}
\setsansfont[Scale=MatchLowercase,Mapping=tex-text]{Lucida Sans}
\setmonofont[Scale=MatchLowercase]{Lucida Sans Typewriter}
\setmathfont{Cambria Math}

\linespread{1.069}      % A bit more space between lines
\frenchspacing         % Remove ugly extra space after punctuation
  
\definecolor{niceblue}{rgb}{0.2,0.4,0.8}
\newenvironment{example}[1]
  {\VerbatimEnvironment
   \def\Options{#1}%
   \begin{VerbatimOut}[gobble=4]{\examplefilename}}
  {\end{VerbatimOut}\relax
   \typesetexample}

\let\examplesize\normalsize
\let\auxwidth\relax

\newlength\examplewidth\newlength\verbatimwidth
\newlength\exoutdent   \newlength\exverbgap
\setlength\exverbgap{1em}
\setlength\exoutdent{-0.15\textwidth}
\newsavebox\verbatimbox
\edef\examplefilename{\jobname.example}

\newcommand\typesetexample{\relax
   \smallskip
   \noindent
   \begin{minipage}{\linewidth}
   \color{niceblue}
   \hrulefill\par
   \edef\@tempa{[gobble=0,fontsize=\noexpand\small,\Options]}%
   \begin{lrbox}{\verbatimbox}\relax
     \expandafter\BVerbatimInput\@tempa{\examplefilename}%
   \end{lrbox}
   \begin{list}{}{\setlength\itemindent{0pt}
                  \setlength\leftmargin\exoutdent
                  \setlength\rightmargin{0pt}}\item
   \ifx\auxwidth\relax
     \setlength\verbatimwidth{\wd\verbatimbox}%
   \else
     \setlength\verbatimwidth{\auxwidth}%
   \fi
   \begin{minipage}[c]{\textwidth-\exoutdent-\verbatimwidth-\exverbgap}
     \catcode`\%=14\centering\input\examplefilename\relax
   \end{minipage}\hfill
   \begin{minipage}[c]{\verbatimwidth}
     \usebox\verbatimbox
   \end{minipage}
   \end{list}
   \par\noindent\hrulefill
   \end{minipage}
   \smallskip}

\newcommand*\setverbwidth[1]{\def\auxwidth{#1}}

\newcommand*\name[1]{{#1}}
\newcommand*\pkg[1]{\textsf{#1}}
\newcommand*\feat[1]{\texttt{#1}}

\newcommand*\note[1]{\unskip\footnote{#1}}

\let\latin\textit
\def\eg{\latin{e.g.}}
\def\Eg{\latin{E.g.}}
\def\ie{\latin{i.e.}}
\def\etc{\@ifnextchar.{\latin{etc}}{\latin{etc.}\@}}

\def\MacOSX{Mac~OS~X}
\def\ascii{\textsc{ascii}}

\def\OMEGA{Ω}

\newcounter{argument}
\g@addto@macro\endmacro{\setcounter{argument}{0}}
\newcommand*\darg[1]{%
  \stepcounter{argument}%
  \noindent{\ttfamily\char`\#\theargument~:~}#1\par}
\newcommand*\doarg[1]{%
  \stepcounter{argument}%
  \noindent{\ttfamily\makebox[0pt][r]{[}\char`\#\theargument]:~}#1\par}

\newcommand\codeline[1]{\par{\hspace{3em}#1\par\noindent}\ignorespaces}

\newcommand\unichar[2]{\textsc{\MakeLowercase{u+#1: #2}}}

\setlength\parindent{2em}

%    \end{macrocode}
%</dtx-style>
%\fi
%
% \typeout{*************************************************************}
% \typeout{*}
% \typeout{* To finish the installation you have to move the following}
% \typeout{* file into a directory searched by XeTeX:}
% \typeout{*}
% \typeout{* \space\space\space unimath.sty}
% \typeout{*}
% \typeout{*************************************************************}
%
\endinput
 