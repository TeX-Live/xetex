% \iffalse meta-comment
%
%!TEX encoding = UTF-8 Unicode
%
% Copyright 2005 by Will Robertson <wspr81@gmail.com>
% 
% Distributable under the LaTeX Project Public License,
% version 1.3a or higher (your choice). The latest version of
% this license is at: http://www.latex-project.org/lppl.txt
%
% This work is "maintained" (as per LPPL maintenance status) 
% by Will Robertson.
% 
% This work consists of the file  unimath.dtx
%           and the derived files unimath.sty and unimath.pdf.
%
%
%<*internalbatchfile>
\begingroup
%</internalbatchfile>
%<*batchfile>
\input docstrip.tex
\keepsilent
\preamble

  ________________________________
  Copyright © 2006  Will Robertson

  License information appended.


\endpreamble
\postamble

Copyright © 2006 by Will Robertson <wspr81@gmail.com>

Distributable under the LaTeX Project Public License,
version 1.3a or higher (your choice). The latest version of
this license is at: http://www.latex-project.org/lppl.txt

This work is "maintained" (as per LPPL maintenance status) 
by Will Robertson.

This work consists of the file  \jobname.dtx
          and the derived files \jobname.sty and \jobname.pdf.

\endpostamble
\askforoverwritefalse
\generate{\file{\jobname.sty}{\from{\jobname.dtx}{package}}}
\generate{\file{\jobname-testing.tex}{\from{\jobname.dtx}{testing}}}
\generate{\file{\jobname.ins}{\from{\jobname.dtx}{batchfile}}}
\nopreamble\nopostamble
\generate{\file{dtx-style.sty}{\from{\jobname.dtx}{dtx-style}}}
\generate{\file{stix-extract.sh}{\from{\jobname.dtx}{awk-script}}}
%</batchfile>
%<batchfile>\endbatchfile
%<*internalbatchfile>
\endgroup
%</internalbatchfile>
%
%<*driver>
\documentclass{ltxdoc}
\EnableCrossrefs
\CodelineIndex
\RecordChanges
%\OnlyDescription
\usepackage{dtx-style}
\begin{document}
  \DocInput{\jobname.dtx}
\end{document}
%</driver>
%
% \fi
%
% \GetFileInfo{\jobname.sty}
% \CheckSum{0}
% \errorcontextlines=999
% \makeatletter
%
% \title{Experimental unicode mathematical typesetting:\\ The \pkg{unimath} package}
% \author{Will Robertson}
% \date{\filedate \qquad \fileversion}
%
% \maketitle
%
% \tableofcontents
%
% \section{Introduction}
%
% This document describes the \pkg{unimath} package, which is a proof-of-concept
% \emph{experimental} implementation of a macro to unicode glyph encoding for 
% mathematical glyphs. Its intended use is for \XeTeX, although it is conjectured 
% that small effect needs to be spent to create a cross-format package that would 
% also work with \OMEGA.
%
% \section{Methods}
%
% As of \XeTeX\ almost v.\,0.995, maths characters can be accessed in unicode 
% ranges. Previously, to use unicode characters as mathematical glyphs, Bruno Voisin
%   \note{Thread ‘Use of Apple Symbols font in XeLaTeX’ on the \XeTeX\ mailing list, September 17, 2004.}
% has used the method of inserting text boxes into the maths mode with the following
% code:
% \begin{Verbatim}[gobble=2]
%	\DeclareFontFamily{U}{appsym}{}
%	\DeclareFontShape{U}{appsym}{m}{n}{<-> "Apple Symbols"}{}
%	\DeclareTextFontCommand{\applesym}{%
%	  \normalfont\fontencoding{U}\fontfamily{appsym}\selectfont}
%	\DeclareRobustCommand{\textapplehighplus}    {\applesym{\char"253C}}
%	\DeclareRobustCommand{\textappleblacksquare} {\applesym{\char"25A0}}
%	...
%	\DeclareRobustCommand{\applehighplus}    {\text{\textapplehighplus}}
%	\DeclareRobustCommand{\appleblacksquare} {\text{\textappleblacksquare}}
%	...
% \end{Verbatim}
%
% A similar approach has been taken here for simple glyph access in the past.
% Now, a proper method must be invented for real unicode maths support. Before
% any code is written, I'm writing a specification in order to work out what is required.
% Fairly significant pieces of the NFSS may have to be re-written, and I'm a little unsure where
% to start.
%
% \section{Current NFSS methods}
% 
% In the following, \meta{NFSS decl.} stands for something like |{T1}{lmr}{m}{n}|.
%
% \begin{description}
% \item[Maths symbol fonts] \cmd\DeclareSymbolFont\marg{name}\meta{NFSS decl.}
%
% Declares a named maths font such as |operators| from which symbols are defined with \cmd\DeclareMathSymbol.
%
% \item[Maths alphabet fonts] \cmd\DeclareMathAlphabet\marg{cmd}\meta{NFSS decl.}
%
% For commands such as \cmd\mathbf, accessed
% through maths mode that are unaffected by the current text font, and which are used for
% alphabetic symbols.
%
% \cmd\DeclareSymbolFontAlphabet\marg{cmd}\marg{name}
%
% Alternative (and optimisation) for \cmd\DeclareMathAlphabet\ if a single font is being used
% for both alphabetic characters (in their expected \textsc{ascii} slots) and symbols.
%
% \item[Maths `versions'] Different maths weights can be defined with the following, switched
% in text with the \cmd\mathversion\marg{maths version} command.
%
% \cmd\SetSymbolFont\marg{name}\marg{maths version}\meta{NFSS decl.}\\
% \cmd\SetMathAlphabet\marg{cmd}\marg{maths version}\meta{NFSS decl.}
%
% \item[Maths symbols] \cmd\DeclareMathSymbol\marg{symbol}\marg{type}\marg{named font}\marg{slot}
% This is the macro that actually defines which font each symbol comes from and how they behave.
% \end{description}
%
% Delimiters, accents, and radicals are not dealt with at this point in time.
%
% \section{Specification}
%
% In the ideal case, a single unicode font will contain all maths glyphs we need.
% Barbara Beeton's STIX table provides the mapping between unicode maths glyphs and macro names (all 3298 of them!).
% A single command \cmd\setmathsfont\oarg{font features}\marg{font name} would implement this
% for every every symbol and alphabetic variant.
%
% That means |\alpha| to $\alpha$, |\leq| to $\leq$, etc., |\mathcal{H}| to $\mathcal{H}$ and so on, all for unicode glyphs within a single font.
%
% Furthermore, this package should deal well with unicode characters for maths input, as well.
% This includes using literal Greek letters in formulae, resolving to upright or italic depending on preference.
% This, and alphabetic variants via such commands as \cmd\mathcal, will be dealt with via \XeTeX's `last minute' font mapping features.
%
% Finally, maths versions must also be provided for. To avoid having to re-write and re-design yet more \LaTeX\ macros, let's leave it for now with a command such as \cmd\setmathsversionfont\marg{bold}\oarg{font features}\marg{font name}.
%
% All instances of `maths' in command names will be aliased to `math' for our American (or abbreviatory-minded) friends. Instances above of \oarg{font features}\marg{font name} follow from my \pkg{fontspec} package.
%
% \subsection{Dealing with real life}
%
% Let's face it; there will probably be few cases where a single unicode maths font suffices. The upcoming STIX font comes to mind as a notable exception. It will therefore be necessary to delegate specific unicode ranges of glyphs to separate fonts.
%
% At the lowest level, it will probably be necessary on occasion to simply use just one or two glyphs from another font; either because they look better or they're simply unavailable in the default font in use. This doesn't really require anything that won't already exist; a command analogous to \cmd\DeclareMathSymbol\ that accepts unicode \meta{slot} ranges.
%
% More generally, it would be nice to be able to say \\
%\cmd\setmathsfont|[range=|\meta{unicode range}|,|\meta{font features}|]|\marg{font name}\\
% where \meta{unicode range} is a comma-separated list of unicode slots and ranges such as |{27D0-27EB, 27FF, 295B-297F}|. Furthermore, preset names ranges could be used, such as |MiscMathSymbolsA|, with such ranges based on unicode chunks.
%
% 
% \StopEventually{}
%
% \part{The \textsf{unimath} package}
%\iffalse
%<*package>
%\fi
% This is the package.
%    \begin{macrocode}
\ProvidesPackage{unimath}
  [2006/02/20 v0.01 Unicode maths definitions]  
%    \end{macrocode} 
% We want \pkg{amsmath}'s \cmd\text\ macro; not much else at this stage.
%    \begin{macrocode}
\RequirePackage{amstext}
%    \end{macrocode}
% Things we need:
%    \begin{macrocode}
%    \end{macrocode}
% Through \pkg{fontspec}, select a font to use for \emph{all} subsequent
% maths glyphs. Remember: we're using unicode now!
%    \begin{macrocode}
\newcommand*\setmathfont[2][]{%
  \newfontfamily\mathfont[#1]{#2}}
\setmathfont{Cambria Math}  
%    \end{macrocode}
% \begin{macro}{\DeclareUnicodeMathSymbol}
% \darg{Unicode scalar value (hex.)}
% \darg{math group}
% \darg{command name}
% \darg{description}
% This command is unlike \cmd\DeclareMathSymbol\ in that it doesn't take
% a mandatory font family to be rendered in.
% Instead, the maths font is decided by the user (this being unicode, all
% glyphs hopefully come from the same font); at present we assume each
% glyph comes from the same font, but this assumption will surely be
% relaxed in the future.
%
% The description line is a bit of self-documenting that will surely come in handy.
%    \begin{macrocode}
\newcommand*\DeclareUnicodeMathSymbol[4]{%
  \DeclareRobustCommand#2{%
    \ensuremath{#3{\text{\mathfont\char"#1}}}}}
%    \end{macrocode}
% \end{macro}
%
% A question arises as to how multiple fonts should be incorporated.
% It is desired that one maths font supply all maths glyph required.
% For this reason I hesitate to provide a hook directly in 
% \cmd\DeclareUnicodeMathSymbol.
%
%</package>
% \section{Testing}
% After the macros this package uses are defined, a brief test verifies
% that they are working:
%
%<*testing>
%    \begin{macrocode}
\DeclareUnicodeMathSymbol
  {1D6FD}
  {\test@italic@beta}
  {\mathalpha}
  {example italic beta}
%    \end{macrocode}
%</testing>
%
% \cmd\test@italic@beta: \test@italic@beta
%
% \section{Trying to understand \LaTeX}
%
%<*neveroutput>
% Here's \LaTeX's definition of \cmd\DeclareMathSymbol.
% Let's try an make sense of it.
% \DescribeMacro{\DeclareMathSymbol}
% \darg{Symbol, e.g., \cmd\alpha\ or `a'}
% \darg{Type, e.g., \cmd\mathalpha}
% \darg{Math font name, e.g., \texttt{operators}}
% \darg{Slot, e.g., \texttt{F1}}
%    \begin{macrocode}
\def\DeclareMathSymbol#1#2#3#4{%
%    \end{macrocode}
% First ensure the math font (e.g., |operators|) exists:
%    \begin{macrocode}
  \expandafter\in@\csname sym#3\expandafter\endcsname
     \expandafter{\group@list}%
  \ifin@
%    \end{macrocode}
% Convert the slot number to two hex digits stored in 
% \cmd\count\cmd\z@\ and \cmd\count\cmd\tw@, respectively:
%    \begin{macrocode}
    \begingroup
      \count\z@=#4\relax
      \count\tw@\count\z@
      \divide\count\z@\sixt@@n
      \count@\count\z@
      \multiply\count@\sixt@@n
      \advance\count\tw@-\count@
%    \end{macrocode}
% The symbol to be defined can be either a command (|\alpha|) or a character (|a|).
% Branch for the former:
%    \begin{macrocode}
      \if\relax\noexpand#1% is command?
        \edef\reserved@a{\noexpand\in@{\string\mathchar}{\meaning#1}}%
        \reserved@a
%    \end{macrocode}
% If the symbol command definition contains \cmd\mathchar, then
% we can provide the info that a previous symbol definition is being overwritten:
%    \begin{macrocode}
        \ifin@
          \expandafter\set@mathsymbol
             \csname sym#3\endcsname#1#2%
             {\hexnumber@{\count\z@}\hexnumber@{\count\tw@}}%
          \@font@info{Redeclaring math symbol \string#1}%
%    \end{macrocode}
% Otherwise, throw an error if the command name is already taken by a non-symbol definition:
%    \begin{macrocode}
        \else
            \expandafter\ifx
            \csname\expandafter\@gobble\string#1\endcsname
            \relax
            \expandafter\set@mathsymbol
               \csname sym#3\endcsname#1#2%
               {\hexnumber@{\count\z@}\hexnumber@{\count\tw@}}%
          \else
            \@latex@error{Command `\string#1' already defined}\@eha
          \fi
        \fi
%    \end{macrocode}
% And if the symbol input is a character:
%    \begin{macrocode}
      \else
        \expandafter\set@mathchar
          \csname sym#3\endcsname#1#2
          {\hexnumber@{\count\z@}\hexnumber@{\count\tw@}}%
      \fi
    \endgroup
%    \end{macrocode}
% Everything previous was skipped if the maths font doesn't exist in the first place:
%    \begin{macrocode}
  \else
    \@latex@error{Symbol font `#3' is not defined}\@eha
  \fi}
%    \end{macrocode}
% The final macros that actually define the maths symbol with \TeX\ primitives.
% If the symbol definition is for a macro:
%    \begin{macrocode}
\def\set@mathsymbol#1#2#3#4{%
  \global\mathchardef#2"\mathchar@type#3\hexnumber@#1#4\relax}
%    \end{macrocode}
% Or if it's for a character:
%    \begin{macrocode}
\def\set@mathchar#1#2#3#4{%
  \global\mathcode‘#2="\mathchar@type#3\hexnumber@#1#4\relax}
%    \end{macrocode}
%
%</neveroutput>
%
% \paragraph{Summary}
% For symbols, something like:
% \begin{verbatim}
% \def\DeclareMathSymbol#1#2#3#4{%
%   \global\mathchardef#1"\mathchar@type#2
%     \expandafter\hexnumber@\csname sym#2\endcsname
%     {\hexnumber@{\count\z@}\hexnumber@{\count\tw@}}}
% \end{verbatim}
% For characters, something like:
% \begin{verbatim}
% \def\DeclareMathSymbol#1#2#3#4{%
%   \global\mathcode`#1"\mathchar@type#2
%     \expandafter\hexnumber@\csname sym#2\endcsname
%     {\hexnumber@{\count\z@}\hexnumber@{\count\tw@}}}
% \end{verbatim}
%
% We need to both redefine \cmd\DeclareMathSymbol\ to deal with unicode slots,
% as well as \cmd\DeclareSymbolFont\ to deal with |yy| families.
%
% To start with, we've got $^2$ as many \cmd\fam s as before. So we want to redefine
%    \begin{verbatim}
% \def\new@mathgroup{\alloc@8\mathgroup\chardef\sixt@@n}
%    \end{verbatim}
% to
%    \begin{macrocode}
\def\new@mathgroup{\alloc@8\mathgroup\chardef\@cclvi}
\let\newfam\new@mathgroup
%    \end{macrocode}
% This is sufficient for \LaTeX's \cmd\DeclareSymbolFont,\dots, commands to be able
% to define 256 named maths fonts. All we need is a new \cmd\DeclareMathSymbol.
%<*testing>
%    \begin{macrocode}
\newfam\mta
\newfam\mtb
\newfam\mtc
\newfam\mtd
\newfam\mte
\newfam\mtf
\newfam\mtg
\newfam\mth
\newfam\mti
\newfam\mtj
\newfam\mtk
\newfam\mtl
\newfam\mtm
\newfam\mtn
\newfam\mto
\newfam\mtp
\newfam\mtq
\newfam\mtr
\newfam\mts
\newfam\mtt
\newfam\mtu
%    \end{macrocode}
% \string\mtu: math fam \the\mtu\ of 255. 
%    \begin{macrocode}
\let \unicode@math@symbol \DeclareUnicodeMathSymbol
\unicode@math@symbol{0221D}{\propto                  }{\mathrel}{is proportional to}
\unicode@math@symbol{0221E}{\infty                   }{\mathord}{infinity}
\unicode@math@symbol{0221F}{\rightangle              }{\mathord}{right (90 degree) angle}
\unicode@math@symbol{02220}{\angle                   }{\mathord}{angle}
\unicode@math@symbol{02221}{\measuredangle           }{\mathord}{angle-measured}
\unicode@math@symbol{02222}{\sphericalangle          }{\mathord}{angle-spherical}
\unicode@math@symbol{02223}{\mid                     }{\mathrel}{/mid r:}
\unicode@math@symbol{02224}{\nmid                    }{\mathrel}{negated mid}
\unicode@math@symbol{02225}{\parallel                }{\mathrel}{parallel}
\unicode@math@symbol{02226}{\nparallel               }{\mathrel}{not parallel}
\unicode@math@symbol{02227}{\wedge                   }{\mathbin}{/wedge /land b: logical and}
\unicode@math@symbol{02228}{\vee                     }{\mathbin}{/vee /lor b: logical or}
\unicode@math@symbol{02229}{\cap                     }{\mathbin}{intersection}
\unicode@math@symbol{0222A}{\cup                     }{\mathbin}{union or logical sum}
\unicode@math@symbol{0222B}{\int                     }{\mathop}{integral operator}
\unicode@math@symbol{0222C}{\iint                    }{\mathop}{double integral operator}
\unicode@math@symbol{0222D}{\iiint                   }{\mathop}{triple integral operator}
%    \end{macrocode}
% Test: $\propto             \infty                \rightangle        \angle                \measuredangle \sphericalangle \mid                  \nmid                \parallel           \nparallel         \wedge               \vee                   \cap                   \cup                   \int                   \iint                  \iiint                 $
%
%</testing>
%
% \section{Symbol definitions}
%<*package>
% 
% The source for the \TeX\ names for the very large number of mathematical
% glyphs are provided via Barbara Beeton's table file for the STIX project
% (|ams.org/STIX|). The source file for the current version is:\\
% |http://www.ams.org/STIX/bnb/stix-tbl.ascii-2005-09-24|
%
% The (mostly \texttt{awk}, and fairly crude at that) script to generate the 
% appropriate input files
% is presented in Part~\ref{part:awk-script}.
%    \begin{macrocode}
%\input stix-tex-plane0.tex
%\input stix-tex-plane1.tex
%    \end{macrocode}
% 
% \iffalse
% \section{Verification}
%
% The input files used to define the unicode maths symbols are
% processed with a different definition of \cmd\DeclareUnicodeMathSymbol\
% to typeset the defined symbols. The Code2000 font is used for
% Plane~0 characters, Code2001 for Plane~1.
%
% \renewcommand\DeclareUnicodeMathSymbol[4]{
%   \scshape\addfontfeature{Numbers=Monospaced}\MakeLowercase{#1} &
%   #2 & \cmd#2 & \scshape#4\\}
%
% \subsection{Plane 0}
% \setmathfont{Code2000}
% \begin{longtable}[l]{@{}cccp{6cm}@{}}
% \input stix-tex-plane0.tex
% \end{longtable}
%
% \subsection{Plane 1}
% \setmathfont{Code2001}
% \begin{longtable}[l]{@{}cccp{8cm}@{}}
% \input stix-tex-plane1.tex
% \end{longtable}
% \fi
%
%\iffalse
%</package>
%\fi
%
% \part{STIX table data extraction}\label{part:awk-script}
%\iffalse
%<*awk-script>
%\fi
%
% A single file is produced containing all 3298 symbols.
% Future optimisations might include generating various (possibly overlapping) subsets
% so not all definitions must be read just to redefine a small range of symbols..
%
%    \begin{macrocode}
#!/bin/sh

cat stix-tbl.asc | 
awk '
 BEGIN {OFS="|"} 
 {if (usv != substr($0,2,5) ) 
   {usv = substr($0,2,5);
    texname = substr($0,84,25);
    type = substr($0,57,1);
    description = tolower(substr($0,233,350));
    {if (texname ~ /[\\]/)
      print usv, texname, type, description;}}
 }' - | 
awk -F"|" ' 
  (($3 != " ") && ($3 != "F") && ($3 != "D")) {
    print "\\unicode@math@symbol{" $1 "}{" $2 "}{" $3 "}{" $4 "}";
 }' - |
sed -e ' s/{N}/{\\mathord}/   ' \
    -e ' s/{A}/{\\mathalpha}/ ' \
    -e ' s/{P}/{\\mathpunct}/ ' \
    -e ' s/{B}/{\\mathbin}/   ' \
    -e ' s/{R}/{\\mathrel}/   ' \
    -e ' s/{L}/{\\mathop}/    ' \
    -e ' s/{O}/{\\mathopen}/  ' \
    -e ' s/{C}/{\\mathclose}/ ' > stix-tex.tex
%    \end{macrocode}
%\iffalse
%</awk-script>
%\fi
% \clearpage
% \PrintChanges
%
% \clearpage
% \PrintIndex
%
% \Finale
%
%\iffalse
%<*dtx-style>
%    \begin{macrocode}
\ProvidesPackage{dtx-style}

\def\@dotsep{1000}
\setcounter{tocdepth}{2}
\setlength\columnseprule{0.4pt}
\renewcommand\tableofcontents{\relax
  \begin{multicols}{2}[\section*{\contentsname}]\relax
    \@starttoc{toc}\relax
  \end{multicols}}

\setcounter{IndexColumns}{2}
\renewenvironment{theglossary}
  {\small\list{}{}
     \item\relax
     \glossary@prologue\GlossaryParms 
     \let\item\@idxitem \ignorespaces 
     \def\pfill{\hspace*{\fill}}}
  {\endlist}

\usepackage{array,booktabs,calc,color,fancyvrb,graphicx,ifthen,longtable,refstyle,varioref}
\usepackage{fontspec,xunicode,unimath}

\input unimath-testing.tex

\setromanfont[Mapping=tex-text]{FPL Neu}
\setsansfont[Scale=MatchLowercase,Mapping=tex-text]{Gill Sans}
\setmonofont[Scale=MatchLowercase]{Andale Mono}
\setmathfont{Cambria Math}

\linespread{1.05}      % A bit more space between lines
\frenchspacing         % Remove ugly extra space after punctuation
  
\definecolor{niceblue}{rgb}{0.4,0.6,1.000}
\newenvironment{example}
  {\hrulefill\par\VerbatimEnvironment
   \begin{VerbatimOut}[gobble=4]{\examplefilename}}
  {\end{VerbatimOut}\relax
   \begingroup
     \color{niceblue}
     \typesetexample
   \endgroup\par\hrulefill}

\let\examplesize\normalsize
\let\auxwidth\relax

\newlength\examplewidth\newlength\verbatimwidth
\newlength\exoutdent   \newlength\exverbgap
\setlength\exverbgap{1em}
\setlength\exoutdent{-0.15\textwidth}
\newsavebox\verbatimbox
\edef\examplefilename{\jobname.example}

\newcommand\typesetexample{\relax
   \begin{lrbox}{\verbatimbox}\relax
     \BVerbatimInput[fontsize=\small]{\examplefilename}\relax
   \end{lrbox}
   \begin{list}{}{\setlength\itemindent{0pt}
                  \setlength\leftmargin\exoutdent
                  \setlength\rightmargin{0pt}}\item
   \ifx\auxwidth\relax
     \setlength\verbatimwidth{\wd\verbatimbox}\relax
   \else
     \setlength\verbatimwidth{\auxwidth}\relax
   \fi
   \begin{minipage}[c]{\textwidth-\exoutdent-\verbatimwidth-\exverbgap}
     \catcode`\%=14\centering\examplesize\input\examplefilename\relax
   \end{minipage}\hfill
   \begin{minipage}[c]{\verbatimwidth}
     \usebox\verbatimbox
   \end{minipage}
   \end{list}
   \global\let\examplesize\normalsize}

\newcommand*\setexsize[1]{\let\examplesize#1}
\newcommand*\setverbwidth[1]{\def\auxwidth{#1}}

\newcommand*\name[1]{{#1}}
\newcommand*\pkg[1]{\textsf{#1}}

\newcommand*\note[1]{\unskip\footnote{#1}}

\let\latin\textit
\def\eg{\latin{e.g.}}
\def\Eg{\latin{E.g.}}
\def\ie{\latin{i.e.}}
\def\etc{\@ifnextchar.{\latin{etc}}{\latin{etc.}\@}}

\def\TeX{\smash{T\kern-.15em\lower.5ex\hbox{E}\kern-.07em X}\spacefactor1000\relax}
\def\reflect#1{{\setbox0=\hbox{#1}\rlap{\kern0.5\wd0
  \special{x:gsave}\special{x:scale -1 1}}\box0 \special{x:grestore}}}
\def\XeTeX{%
  \smash{X\lower.5ex\hbox{\kern-.07em\reflect{E}}}\kern-.15em \TeX}
\def\MacOSX{Mac~OS~X}

\def\OMEGA{Ω}

\newcounter{argument}
\g@addto@macro\endmacro{\setcounter{argument}{0}}
\newcommand*\darg[1]{%
  \stepcounter{argument}%
  \noindent{\ttfamily\#\theargument}:~#1\par}
\newcommand*\doarg[1]{%
  \stepcounter{argument}%
  \noindent{\ttfamily\makebox[0pt][r]{[}\#\theargument]}:~#1\par}

\newcount\c@xm@testcommands
\newcommand\TestCommands[2][4]{%
  \begin{multicols}{#1}\parindent0pt
    \c@xm@testcommands\z@
    \@for\@ii:=#2\do{%
      \global\advance\c@xm@testcommands\@ne
      {\ttfamily\char`\\#1\@ii}\hfill
      \csname#1\@ii\endcsname\endgraf}
  \end{multicols}
  {\unskip\vspace{5pt}\noindent
   \small(\the\c@xm@testcommands~commands)\par}}

%% fix \meta
\def\langle{\text{‹\,}}\def\rangle{\text{\,›}}

\setlength\parindent{2em}

%    \end{macrocode}
%</dtx-style>
%\fi
%
% \typeout{*************************************************************}
% \typeout{*}
% \typeout{* To finish the installation you have to move the following}
% \typeout{* file into a directory searched by XeTeX:}
% \typeout{*}
% \typeout{* \space\space\space unimath.sty}
% \typeout{*}
% \typeout{*************************************************************}
%
\endinput
 