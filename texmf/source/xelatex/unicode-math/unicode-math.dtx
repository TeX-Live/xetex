% \iffalse meta-comment
%
%!TEX encoding = UTF-8 Unicode
%
% Copyright 2005 by Will Robertson <wspr81@gmail.com>
% 
% Distributable under the LaTeX Project Public License,
% version 1.3c or higher (your choice). The latest version of
% this license is at: http://www.latex-project.org/lppl.txt
%
% This work is "maintained" (as per LPPL maintenance status) 
% by Will Robertson.
% 
% This work consists of the file  unicode-math.dtx
%           and the derived files unicode-math.sty and unicode-math.pdf.
%
%
%<*internalbatchfile>
\begingroup
%</internalbatchfile>
%<*batchfile>
\input docstrip.tex
\keepsilent
\preamble

  ________________________________
  Copyright © 2006  Will Robertson

  License information appended.


\endpreamble
\postamble

Copyright © 2006 by Will Robertson <wspr81@gmail.com>

Distributable under the LaTeX Project Public License,
version 1.3c or higher (your choice). The latest version of
this license is at: http://www.latex-project.org/lppl.txt

This work is "maintained" (as per LPPL maintenance status) 
by Will Robertson.

This work consists of the file  \jobname.dtx
          and the derived files \jobname.sty and \jobname.pdf.

\endpostamble
\askforoverwritefalse
\generate{\file{\jobname.sty}{\from{\jobname.dtx}{package}}}
\generate{\file{\jobname.ins}{\from{\jobname.dtx}{batchfile}}}
\nopreamble\nopostamble
\generate{\file{\jobname-test.ltx}{\from{\jobname.dtx}{test}}}
\generate{\file{\jobname-test-iso.ltx}{\from{\jobname.dtx}{test-iso}}}
\generate{\file{\jobname-test-tex.ltx}{\from{\jobname.dtx}{test-tex}}}
\generate{\file{\jobname-test-french.ltx}{\from{\jobname.dtx}{test-french}}}
\generate{\file{\jobname-testbf-iso.ltx}{\from{\jobname.dtx}{testbf-iso}}}
\generate{\file{\jobname-testbf-tex.ltx}{\from{\jobname.dtx}{testbf-tex}}}
\generate{\file{\jobname-testbf-french.ltx}{\from{\jobname.dtx}{testbf-french}}}
\generate{\file{\jobname-test-bf.ltx}{\from{\jobname.dtx}{test-bf}}}
\generate{\file{dtx-style.sty}{\from{\jobname.dtx}{dtx-style}}}
\generate{\file{stix-extract.sh}{\from{\jobname.dtx}{awk-script}}}
%</batchfile>
%<batchfile>\endbatchfile
%<*internalbatchfile>
\endgroup
\immediate\write18{makeindex -s gind.ist -o \jobname.ind  \jobname.idx}
\immediate\write18{makeindex -s gglo.ist -o \jobname.gls  \jobname.glo}
%</internalbatchfile>
%
%<*driver>
\documentclass{ltxdoc}
\EnableCrossrefs
\CodelineIndex
\RecordChanges
%\OnlyDescription
\usepackage{dtx-style}
\begin{document}
  \DocInput{\jobname.dtx}
\end{document}
%</driver>
%
% \fi
%
% \GetFileInfo{\jobname.sty}
% \CheckSum{0}
% \makeatletter
%
% \title{Experimental unicode mathematical typesetting: The \pkg{unicode-math} package}
% \author{Will Robertson}
% \date{\filedate \qquad \fileversion}
%
% \maketitle
%
% \tableofcontents
%
% \section{Introduction}
%
% This document describes the \pkg{unicode-math} package, which is an
% \emph{experimental} implementation of a macro to unicode glyph encoding for 
% mathematical characters. Its intended use is for \XeTeX, although it is conjectured 
% that small effect needs to be spent to create a cross-format package that would 
% also work with \OMEGA.
%
% As of \XeTeX\ v.\,0.995, maths characters can be accessed in unicode 
% ranges. Now, a proper method must be invented for real unicode maths support. Before
% any code is written, I'm writing a specification in order to work out what is required.
% Fairly significant pieces of the NFSS may have to be re-written, and I'm a little unsure where to start.
%
% \section{Specification}
%
% This section will turn into `User Interface' in time, presumably.
%
% In the ideal case, a single unicode font will contain all maths glyphs we need.
% Barbara Beeton's \STIX\ table provides the mapping between unicode maths glyphs 
% and macro names (all 3298 — or however many — of them!).
% A single command \codeline{\cmd\setmathfont\oarg{font features}\marg{font name}} would implement this
% for every every symbol and alphabetic variant.
% That means |x| to $x$, |\xi| to $\xi$, |\leq| to $\leq$, etc., 
% |\mathcal{H}| to $\mathcal{H}$ and so on, all for unicode glyphs within a single font.
%
% Furthermore, this package should deal well with unicode characters for maths input, as well.
% This includes using literal Greek letters in formulae, resolving to upright or italic depending on preference.
%
% Finally, maths versions must also be provided for. While I guess version selection in
% \LaTeX\ will remain the same, the specification for choosing the version fonts will
% probably be an optional argument:
% \codeline{\cmd\setmathfont|[Version=Bold,|\meta{font features}|]|\marg{font name}}
% 
% Instances above of 
% \codeline{\oarg{font features}\marg{font name}} 
% follow from my \pkg{fontspec} package, and therefore any additional \meta{font features}
% specific to maths fonts will hook into \pkg{fontspec}'s methods.
%
% \subsection{Using multiple fonts}
%
% There will probably be few cases where a single unicode maths font suffices. The upcoming \STIX\ font comes to mind as a possible exception. It will therefore be necessary to delegate specific unicode ranges of glyphs to separate fonts. This syntax will also hook into the \pkg{fontspec} font feature processing:
%\codeline{\cmd\setmathfont|[Range=|\meta{unicode range}|,|\meta{font features}|]|\marg{font name}}
% where \meta{unicode range} is a comma-separated list of unicode slots and ranges such as |{27D0-27EB,27FF,295B-297F}|. Furthermore, preset names ranges could be used, such as |MiscMathSymbolsA|, with such ranges based on unicode chunks. The amount of optimisation required here to achieve acceptable performance has yet to be determined. Techniques such as saving out unicode subsets based on \meta{unicode range} data to be \cmd\input\ in the next \LaTeX\ run are a possibility, but at this stage, performance without such measures seems acceptable.
%
% \subsection{Script and scriptscript fonts/features}
% Cambria Math uses OpenType font features to activate smaller optical sizes for scriptsize and scriptscriptsize symbols (the $B$ and $C$, respectively, in $A_{B_C}$.
%
% Other fonts will no doubt use entirely separate fonts. Both of these options must be taken into account. I hope this will be mostly automatic from the users' points of view. The |+ssty| feature can be detected and applied automatically, and appropriate optical size information embedded in the fonts will ensure this latter case. Fine tuning should be possible automatically with \pkg{fontspec} options. We might have to wait until MnMath, for example, before we really know.
% 
% \section{Maths input}
%
% \XeTeX's unicode support allows maths input through two methods. Like classical \TeX, macros such as \cmd\alpha, \cmd\sum, \cmd\pm, \cmd\leq, and so on, provide verbose access to the entire repertoire of characters defined by unicode. The literal characters themselves may be used instead, for more readable input files.
%
%: TODO: describe alphabet inputs
%
% \section{Package options}
%
% \subsection{Math `style'}
%
% Classically, \TeX\ uses italic lowercase Greek letters and \emph{upright} uppercase Greek letters for variables in mathematics. This is contrary to the ISO standards of using italic forms for both upper- and lowercase. Furthermore, the French (contrary again, \emph{quelle surprise}) have been known to use upright uppercase \emph{Latin} letters as well as upright upper- and lowercase Greek.
%
% The \pkg{unicode-math} package accommodates these possibilities with an interface heavily inspired by Walter Schmidt's \pkg{lucimatx} package: a package option \opt{math-style} that takes one of three arguments: \opt{TeX}, \opt{ISO}, or \opt{French} (case \emph{in}-sensitive).
%
% The philosophy behind the interface to the mathematical alphabet symbols lies in \LaTeX's attempt of separating content and formatting. Because input source text may come from a variety of places, the upright and `mathematical' italic Latin and Greek alphabets are \emph{unified} from the point of view of having a specified meaning in the source text. That is, to get a mathematical ‘$x$’, either the ascii (`keyboard') letter |x| may be typed, or the actual unicode character may be used. Similarly for Greek letters. The upright or italic forms are then chosen based on the |math-style| package option.
%
% If glyphs are desired that do not map as per the package option (for example, an upright `g' is desired but typing |$g$| yields `$g$'), \emph{markup} is required to specify this; to follow from the example: |\mathup{g}|. Maths alphabets commands such as \cmd\mathup\ are detailed later.
%
% \paragraph{Alternative interface} However, some users may not like this convention. For them, an upright |x| is an upright `x' and that's that. (This will be the case when obtaining source text from copy/pasting PDF or Microsoft Word documents, for example.) For these users, the |literal| option to |math-style| will effect this behaviour. 
%
% The \opt{math-style} options' effects are shown in brief in \tabref{math-style}. \Tabref[vref]{math-style-check} shows every character under the effect of this package option.
%
% \begin{table}
%   \centering
%   \topcaption{Effects of the \opt{math-style} package option.}
%   \tablabel{math-style}
%   \begin{tabular}{@{}>{\ttfamily}lcc@{}}
%     \toprule
%       & \multicolumn{2}{c}{Example} \\ 
%        \cmidrule(l){2-3}
%       \rmfamily Package option & |(a,z,B,X)| & |(α,β,Γ,Ξ)| \\
%     \midrule
%       math-style=ISO & $(a,z,B,X)$ & $(\italpha,\itbeta,\itGamma,\itXi)$ \\
%       math-style=TeX & $(a,z,B,X)$ & $(\italpha,\itbeta,\upGamma,\upXi)$ \\
%       math-style=French & $(a,z,\upB,\upX)$ & $(\upalpha,\upbeta,\upGamma,\upXi)$ \\
%     \bottomrule
%   \end{tabular}
% \end{table}
%
% \subsection{Bold switching}
%
% Similar as in the previous section, ISO standards differ somewhat to \TeX's conventions (and classical typesetting) for `boldness' in mathematics. In the past, it has been customary to use bold \emph{upright} letters to denote things like vectors and matrices. For example, \( \bfM = (\itM_x,\itM_y,\itM_z) \). Presumably, this was due to the relatively scarcity of bold italic fonts in the pre-digital typesetting era. It has been suggested that \emph{italic} bold symbols are used nowadays instead.
%
% Bold Greek letters have simply been bold variant glyphs of their regular weight, as in \( \bfitxi = (\itxi_x,\itxi_y,\itxi_z) \). Confusingly, the syntax in \LaTeX\ has been different for these two examples: \cmd\mathbf\ in the former (`$\bfM$'), and \cmd\bm\ (or \cmd\boldsymbol, deprecated) in the latter (`$\bfitxi$').
%
% In \pkg{unicode-math}, the \cmd\mathbf\ command works directly with both Greek and Latin maths alphabet characters and depending on package option either switches to upright for Latin letters (|bold-style=TeX|) as well or keeps them italic (|bold-style=ISO|).
%
% For completeness, for |bold-style=French| all bold characters are upright, and |bold-style=literal| does not change the upright/italic shape of the letter.
%
% Upright and italic bold mathematical letters input as direct unicode characters are normalised with the same rules.
% Note that \opt{bold-style} is independent of \opt{math-style}, although if the former is not specified then sensible defaults are chosen based on the latter.
% 
% The \opt{bold-style} options' effects are shown in brief in \tabref{bold-style}. \Tabref[vref]{bold-style-check} shows every character under the effect of this package option.
%
% \begin{table}
%   \centering
%   \topcaption{Effects of the \opt{bold-style} package option.}
%   \tablabel{bold-style}
%   \begin{tabular}{@{}>{\ttfamily}lcc@{}}
%     \toprule
%       & \multicolumn{2}{c}{Example} \\ 
%        \cmidrule(l){2-3}
%       \rmfamily Package option & |(a,z,B,X)| & |(α,β,Γ,Ξ)| \\
%     \midrule
%       bold-style=ISO & $(\bfita,\bfitz,\bfitB,\bfitX)$ & $(\bfitalpha,\bfitbeta,\bfitGamma,\bfitXi)$ \\
%       bold-style=TeX & $(\bfa,\bfz,\bfB,\bfX)$ & $(\bfitalpha,\bfitbeta,\bfGamma,\bfXi)$ \\
%       bold-style=French & $(\bfa,\bfz,\bfB,\bfX)$ & $(\bfalpha,\bfbeta,\bfGamma,\bfXi)$ \\
%     \bottomrule
%   \end{tabular}
% \end{table}
%
% \subsection{Other upright vs.\ italic symbols}
%
% \paragraph{Nabla} The symbol $\nabla$ comes in the six forms shown in \tabref{nabla}.
%  We want an individual option to specify whether we want upright or italic nabla by default (when either upright or italic nabla is used in the source). \TeX\ classically uses an upright nabla, but \textsc{iso} standards differ (I think). The package options |[Nabla=upright]| and |[Nabla=italic]| switch between the two choices. This is then inherited through \cmd\mathbf; \cmd\mathit\ and \cmd\mathup\ can be used to force one way or the other.
%
% |Nabla=italic| is implicit when using |math-style=ISO| and |nabla=upright| follows both |math-style=TeX| and |math-style=French|.
%
% \begin{table}
%   \centering
%   \topcaption{The various forms of nabla.}
%   \tablabel{nabla}
%   \let \tmpshow\empty
%   \begin{tabular}{@{}llc@{}}
%       \toprule
%     \multicolumn{2}{l}{Description} & Glyph
%      \\ \cmidrule(r){1-2}\cmidrule(l){3-3}
%     Upright & Serif & $\nabla$ \\
%     & Bold serif & $\bfnabla$ \\
%     & Bold sans & $\bfsansnabla$ \\
%       \cmidrule(lr){1-2}\cmidrule(lr){3-3}
%     Italic & Serif & $\itnabla$ \\
%     & Bold serif & $\bfitnabla$ \\
%     & Bold sans & $\bfitsansnabla$ \\
%       \bottomrule
%   \end{tabular}
% \end{table}
%
% \paragraph{Partial}
% Ditto with $\partial$: |partial=upright| and |partial=italic| package options. Similarly with the |math-style| defaults.
%
%
% \begin{figure}
% \immediate\write18{xelatex unicode-math-test-iso.ltx}
% \immediate\write18{xelatex unicode-math-test-tex.ltx}
% \immediate\write18{xelatex unicode-math-test-french.ltx}
% \centering
% \subfloat[Package option \texttt{[math-style=ISO]}]{\includegraphics{unicode-math-test-iso.pdf}}\\
% \subfloat[Package option \texttt{[math-style=TeX]}]{\includegraphics{unicode-math-test-tex.pdf}}\\
% \subfloat[Package option \texttt{[math-style=French]}]{\includegraphics{unicode-math-test-french.pdf}}
% \caption{Example maths output demonstrating the \texttt{math-style} package option}.}
% \label{fig:math-style-check}
% \end{figure}
%
% \begin{figure}
% \immediate\write18{xelatex unicode-math-testbf-iso.ltx}
% \immediate\write18{xelatex unicode-math-testbf-tex.ltx}
% \immediate\write18{xelatex unicode-math-testbf-french.ltx}
% \centering
% \subfloat[Package option \texttt{[bold-style=ISO]}]{\includegraphics{unicode-math-testbf-iso.pdf}}\\
% \subfloat[Package option \texttt{[bold-style=TeX]}]{\includegraphics{unicode-math-testbf-tex.pdf}}\\
% \subfloat[Package option \texttt{[bold-style=French]}]{\includegraphics{unicode-math-testbf-french.pdf}}
% \caption{Example maths output demonstrating the \texttt{bold-style} package option.}
% \label{fig:bold-style-check}
% \end{figure}
%
%
% \StopEventually{}
%
% \part{The \pkg{unicode-math} package}
%\iffalse
%<*package>
%\fi
% This is the package.
%    \begin{macrocode}
\ProvidesPackage{unicode-math}
  [2007/01/03 v0.2 Unicode maths in XeLaTeX]  
%    \end{macrocode}
%
% \section{Things we need}
%
% \paragraph{Packages}
%    \begin{macrocode}
\RequirePackage{fontspec}
%    \end{macrocode}
%
% \paragraph{Counters and conditionals}
%    \begin{macrocode}
\newcounter{um@fam}
\newif\if@um@fontspec@feature
\newif\if@um@init
%    \end{macrocode} 
% For \opt{math-style}:
%    \begin{macrocode}
\newif\if@um@literal
\newif\if@um@upGreek
\newif\if@um@upgreek
\newif\if@um@upLatin
\newif\if@um@uplatin
%    \end{macrocode}
% For \opt{bold-style}:
%    \begin{macrocode}
\newif\if@um@bfliteral
\newif\if@um@bfupGreek
\newif\if@um@bfupgreek
\newif\if@um@bfupLatin
\newif\if@um@bfuplatin
%    \end{macrocode}
% For \opt{nabla} and \opt{partial}:
%    \begin{macrocode}
\newif\if@um@upNabla
\newif\if@um@uppartial
%    \end{macrocode}
%
% \paragraph{Programming niceties}
% \begin{macro}{\def@cn}
%    \begin{macrocode}
\providecommand\def@cn[2]{%
  \expandafter\def\csname#1\endcsname{#2}}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\um@Loop}
% \begin{macro}{\um@Break}
% See Kees van der Laan's various articles on \TeX\ programming:
%    \begin{macrocode}
\def\um@Loop#1\um@Pool{#1\um@Loop#1\um@Pool} 
\def\um@Break#1\um@Pool{} 
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\um@FOR}
% A simple `for' loop implemented with the above.
% Takes a (predefined) counter control sequence and increments it between two integers, iterating as we go.
%    \begin{macrocode}
\long\def\um@FOR#1=[#2:#3]\do#4{%
   #1=#2\relax
   \um@Loop #4%
     \advance#1\@ne
     \ifnum#1>#3\relax
       \expandafter\um@Break
     \fi 
   \um@Pool}
%    \end{macrocode}
% \end{macro}
%
% \begin{example}{}
%   \newcount\@ii
%   \um@FOR\@ii=[7:13]\do{\@alph\@ii/}
% \end{example}
%
% \paragraph{Shortcuts}
%    \begin{macrocode}
\newcommand\um@PackageError[2]{\PackageError{unicode-math}{#1}{#2}}
\newcommand\um@PackageWarning[1]{\PackageWarning{unicode-math}{#1}}
\newcommand\um@PackageInfo[1]{\PackageInfo{unicode-math}{#1}}
%    \end{macrocode}
%
% \subsection{Package options}
% xkeyval's package support is used here.
%
% \paragraph{math-style}
%    \begin{macrocode}
\define@choicekey*{unicode-math.sty}
    {math-style}[\@tempa\@tempb]{iso,tex,french,literal}{%
  \ifcase\@tempb\relax
    \@um@upGreekfalse
    \@um@upgreekfalse
    \@um@upLatinfalse
    \@um@uplatinfalse
    \@um@bfupGreekfalse
    \@um@bfupgreekfalse
    \@um@bfupLatinfalse
    \@um@bfuplatinfalse
    \@um@upNablafalse
    \@um@uppartialfalse
  \or
    \@um@upGreektrue
    \@um@upgreekfalse
    \@um@upLatinfalse
    \@um@uplatinfalse
    \@um@bfupGreektrue
    \@um@bfupgreekfalse
    \@um@bfupLatintrue
    \@um@bfuplatintrue
    \@um@upNablatrue
    \@um@uppartialtrue
  \or
    \@um@upGreektrue
    \@um@upgreektrue
    \@um@upLatintrue  
    \@um@uplatinfalse
    \@um@bfupGreektrue
    \@um@bfupgreektrue
    \@um@bfupLatintrue  
    \@um@bfuplatintrue
    \@um@upNablatrue
    \@um@uppartialtrue
  \or
    \@um@literaltrue
  \fi}
%    \end{macrocode}
%
% \paragraph{bold-style}
%    \begin{macrocode}
\define@choicekey*{unicode-math.sty}{bold-style}[\@tempa\@tempb]{iso,tex,french,literal}{%
  \ifcase\@tempb\relax
    \@um@bfupGreekfalse
    \@um@bfupgreekfalse
    \@um@bfupLatinfalse
    \@um@bfuplatinfalse
  \or
    \@um@bfupGreektrue
    \@um@bfupgreekfalse
    \@um@bfupLatintrue
    \@um@bfuplatintrue
  \or
    \@um@bfupGreektrue
    \@um@bfupgreektrue
    \@um@bfupLatintrue  
    \@um@bfuplatintrue
  \or
    \@um@bfliteraltrue
  \fi}
%    \end{macrocode}
%
%    \begin{macrocode}
\define@choicekey*{unicode-math.sty}{Nabla}[\@tempa\@tempb]{upright,italic}{%
  \ifcase\@tempb\relax
    \@um@upNablatrue
  \or
    \@um@upNablafalse
  \fi}
%    \end{macrocode}
%
%    \begin{macrocode}
\define@choicekey*{unicode-math.sty}{partial}[\@tempa\@tempb]{upright,italic}{%
  \ifcase\@tempb\relax
    \@um@uppartialtrue
  \or
    \@um@uppartialfalse
  \fi}
%    \end{macrocode}
%
%
%    \begin{macrocode}
\ExecuteOptionsX{math-style=iso}
\ProcessOptionsX
%    \end{macrocode}
%
% \subsection{Overcoming \cmd\@onlypreamble}
%
%: TODO: onlypreamble fixup.
% This will be refined later! Sort out which macros actually have to be removed from the \cmd\@preamblecmds\ token list.
%    \begin{macrocode}
\def\@preamblecmds{}
%    \end{macrocode}
%
% \section{Fundamentals}
%
% \subsection{Enlarging the number of maths families}
%
% To start with, we've got a power of two as many \cmd\fam s as before. So (from |ltfssbas.dtx|) we want to redefine
%    \begin{macrocode}
\def\new@mathgroup{\alloc@8\mathgroup\chardef\@cclvi}
\let\newfam\new@mathgroup
%    \end{macrocode}
%
% This is sufficient for \LaTeX's \cmd\DeclareSymbolFont-type commands to be able
% to define 256 named maths fonts. Now we need a new \cmd\DeclareMathSymbol.
%
% \subsection{\cmd\DeclareMathSymbol\ for unicode ranges}
%
% This is mostly an adaptation from \LaTeX's definition.
%
% \begin{macro}{\DeclareUnicodeMathSymbol}
% \darg{Symbol, \eg, \cmd\alpha\ or |a|}
% \darg{Type, \eg, \cmd\mathalpha}
% \darg{Math font name, \eg, \texttt{operators}}
% \darg{Slot, \eg, \texttt{"221E}}
%    \begin{macrocode}
\def\DeclareUnicodeMathSymbol#1#2#3#4{%
%    \end{macrocode}
% First ensure the math font (\eg, |operators|) exists:
%    \begin{macrocode}
  \expandafter\in@\csname sym#3\expandafter\endcsname
     \expandafter{\group@list}%
  \ifin@
%    \end{macrocode}
% No longer need here to perform the obfuscated hex conversion, since
% \cmd\XeTeXmathchar\ (and friends) has a more simplified input than \TeX's \cmd\mathchar.
%    \begin{macrocode}
    \begingroup
%    \end{macrocode}
% The symbol to be defined can be either a command (|\alpha|) or a character (|a|).
% Branch for the former:
%    \begin{macrocode}
      \if\relax\noexpand#1% is command?
        \edef\reserved@a{\noexpand\in@{\string\XeTeXmathchar}{\meaning#1}}%
        \reserved@a
%    \end{macrocode}
% If the symbol command definition contains \cmd\XeTeXmathchar, then
% we can provide the info that a previous symbol definition is being overwritten:
%    \begin{macrocode}
        \ifin@
          \expandafter\um@set@mathsymbol
             \csname sym#3\endcsname#1#2{#4}%
          \@font@info{Redeclaring math symbol \string#1}%
%    \end{macrocode}
% Otherwise, overwrite it if the symbol command definition contains plain old \cmd\mathchar:
%    \begin{macrocode}
        \else
          %\edef\reserved@a{\noexpand\in@{\string\mathchar}{\meaning#1}}%
          %\reserved@a
          %\ifin@
          %  \expandafter\set@xmathsymbol
          %     \csname sym#3\endcsname#1#2{#4}%
%    \end{macrocode}
% Otherwise, throw an error if the command name is already taken by a non-symbol definition:
%    \begin{macrocode}
          %\else
            %\expandafter\ifx
            %\csname\expandafter\@gobble\string#1\endcsname
            %\relax
              \expandafter\um@set@mathsymbol
                 \csname sym#3\endcsname#1#2{#4}%
            %\else
            %  \@latex@error{Command `\string#1' already defined}\@eha
            %\fi
          %\fi
        \fi
%    \end{macrocode}
% And if the symbol input is a character:
%    \begin{macrocode}
      \else
        \expandafter\um@set@mathchar
          \csname sym#3\endcsname#1#2{#4}%
      \fi
    \endgroup
%    \end{macrocode}
% Everything previous was skipped if the maths font doesn't exist in the first place:
%    \begin{macrocode}
  \else
    \@latex@error{Symbol font `#3' is not defined}\@eha
  \fi}
%    \end{macrocode}
% \end{macro}
%
% The final macros that actually define the maths symbol with \XeTeX\ primitives.
%
% \begin{macro}{\um@set@mathsymbol}
% \label{mac:um@set@mathsymbol}
% \darg{Symbol font number}
% \darg{Symbol macro, \eg, \cmd\alpha}
% \darg{Type, \eg, \cmd\mathalpha}
% \darg{Slot, \eg, \texttt{"221E}}
% If the symbol definition is for a macro.
% There are a bunch of tests to perform to process the various characters.
%    \begin{macrocode}
\def\um@set@mathsymbol#1#2#3#4{%
%    \end{macrocode}
% \paragraph{Operators} Some of these require a \cmd\nolimits\ suffix. This is controlled by the \cmd\um@nolimits\ macro, which contains a list of such characters. This list is checked dynamically because we're not interested in efficiency. Or something. This allows the list to be updated in the middle of a document.
%    \begin{macrocode}
  \ifx\mathop#3\relax
    \expandafter\global\expandafter\XeTeXmathchardef
      \csname\expandafter\@gobble\string#2 op\endcsname
      ="\mathchar@type#3 #1 #4\relax
    \gdef#2{%
      \csname\expandafter\@gobble\string#2 op\endcsname
      \expandafter\in@\expandafter#2\expandafter{\um@nolimits}%
      \ifin@\expandafter\nolimits\fi}%
  \else
%    \end{macrocode}
% \paragraph{Radicals}
%    \begin{macrocode}
    \expandafter\in@\expandafter#2\expandafter{\um@radicals,}%
    \ifin@
      \gdef#2{\XeTeXradical#1 #4\relax}%
    \else
%    \end{macrocode}
% \paragraph{Delimiters}
%: TODO: sort out which of these three declarations are necessary!
%    \begin{macrocode}
      \ifx\mathopen#3\relax
        \gdef#2{\XeTeXdelimiter "\mathchar@type#3 #1 #4}%
        \global\XeTeXdelcode#4=#1 #4\relax        
        \global\XeTeXmathcode#4="\mathchar@type#3 #1 #4\relax
      \else
        \ifx\mathclose#3\relax
          \gdef#2{\XeTeXdelimiter "\mathchar@type#3 #1 #4}%
          \global\XeTeXdelcode#4=#1 #4\relax
          \global\XeTeXmathcode#4="\mathchar@type#3 #1 #4\relax
        \else
%    \end{macrocode}
% And finally, the general case. We define both the macro and the unicode mathcode for the character.
%    \begin{macrocode}
          \global\XeTeXmathcode#4="\mathchar@type#3 #1 #4\relax
          \global\XeTeXmathchardef#2="\mathchar@type#3 #1 #4\relax
        \fi
      \fi
    \fi
  \fi}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\um@set@mathchar}
% \darg{Symbol font number}
% \darg{Symbol, \eg, \cmd\alpha\ or |a|}
% \darg{Type, \eg, \cmd\mathalpha}
% \darg{Slot, \eg, \texttt{"221E}}
% Or if it's for a character:
%    \begin{macrocode}
\def\um@set@mathchar#1#2#3#4{%
  \global\XeTeXmathcode`#2="\mathchar@type#3 #1 #4\relax}
%    \end{macrocode}
% \end{macro}
%
% \begin{example}{firstline=2}
%   \Huge
%   \zf@fontspec{}{Cambria Math}
%   \let\glb@currsize\relax
%   \DeclareSymbolFont{test}{EU1}{\zf@family}{m}{n}
%   \DeclareUnicodeMathSymbol{\infinity}{\mathord}{test}{"221E}
%   $\infinity$
% \end{example}
%
% \begin{macro}{\SetMathCode}
% [For later] or if it's for a character code (just  a wrapper around the primitive).
% Note that this declaration \emph{isn't} global so that it can be constrained by grouping.
%    \begin{macrocode}
\newcommand\SetMathCode[4]{%
  \XeTeXmathcode#1=
    "\mathchar@type#2 \csname sym#3\endcsname #4\relax}
%    \end{macrocode}
% \end{macro}
%
% \begin{example}{firstline=2}
%   \Huge
%   \zf@fontspec{}{Cambria Math}
%   \let\glb@currsize\relax
%   \DeclareSymbolFont{test2}{EU1}{\zf@family}{m}{n}
%   \SetMathCode{65}{\mathalpha}{test2}{119860}
%   $A$
% \end{example}
%
% \subsection{User interface to \cmd\DeclareSymbolFont}
%
% Here's the simplest usage:
% \begin{example}{}
%   \setmathfont{Cambria Math}
%   $Ax \eqdef \nabla \times \scrZ$
% \end{example}
%
% And an example of the \feat{Range} feature:
% \begin{example}{}
%   \setmathfont{Cambria Math}
%   $(a, \ita, \mathbf{a}, \bfa, \alpha)$
%   \setmathfont[Range={"2133-"2135,\alpha}]{Lucida Sans}
%   $(a, \ita, \mathbf{a}, \bfa, \alpha)$
% \end{example}
%
% A less useful (perhaps) example of the \feat{Range} feature:
% \begin{example}{}
%   \setmathfont[Colour=000000]{Cambria Math}
%   \setmathfont[Range={\mathop}, Colour=FF0000]{Cambria Math}
%   \setmathfont[Range={\equal}, Colour=009900]{Cambria Math}
%   \setmathfont[Range={\mathopen,\mathclose}, 
%             Colour=0000FF]{Cambria Math}
%   \[ 
%   F(s)=\scrL\{f(t)\}=\int_0^\infty e^{-st}f(t)\,\upd t 
%   \]
% \end{example}
%
% Using a |Range| including large character sets such as \cmd\mathrel, \cmd\mathalpha, \etc, is \emph{very slow}! I hope to improve the performance somehow.
%
% \begin{macro}{\setmathfont}
% \doarg{font features}
% \darg{font name}
%    \begin{macrocode}
\newcommand\setmathfont[2][]{%
%    \end{macrocode}
% \paragraph{Init}
% \begin{itemize}
% \item Erase any conception \LaTeX\ has of previously defined math symbol fonts;
% this allows \cmd\DeclareSymbolFont\ at any point in the document.
%    \begin{macrocode}
  \let\glb@currsize\relax
%    \end{macrocode}
% \item To start with, assume we're defining the font for every math symbol character.
%    \begin{macrocode}
  \let\um@char@range\@empty
  \let\um@char@num@range\@empty
  \@um@initfalse
%    \end{macrocode}
% \item Tell \pkg{fontspec} that maths font features are actually allowed.
%    \begin{macrocode}
  \@um@fontspec@featuretrue
%    \end{macrocode}
% \item Grab the current size information (is this robust enough? Maybe it should be preceded by \cmd\normalsize\dots).
%    \begin{macrocode}
  \csname S@\f@size\endcsname
%    \end{macrocode}
% \item Set the name of the math version being defined
% \end{itemize}
%    \begin{macrocode}
  \def\um@mversion{normal}%
  \DeclareMathVersion{\um@mversion}%
%    \end{macrocode}
% \item Define default font features for the script and scriptscript font.
%    \begin{macrocode}
  \def\um@ScriptFeatures{ScriptStyle}%
  \def\um@ScriptScriptFeatures{ScriptScriptStyle}%
  \def\um@ScriptFont{#2}%
  \def\um@ScriptScriptFont{#2}%
%    \end{macrocode}
%
% Use \pkg{fontspec} to select a font to use. The macro \cmd\S@\meta{size} 
% contains the definitions of the sizes used for maths letters, subscripts and subsubscripts in
% \cmd\tf@size, \cmd\sf@size, and \cmd\ssf@size, respectively.
%
% Probably in the future we want options to change the hard-coded \pkg{fontspec}
% maths-related features. 
%    \begin{macrocode}
  \setkeys*[um]{options}{#1}%
%\rule{1ex}{1ex}%
  \edef\@tempa{\noexpand\zf@fontspec{%
    Script=Math,SizeFeatures={%
      {Size=\tf@size-},%
      {Size=\sf@size-\tf@size,%
        Font=\um@ScriptFont,%
        \um@ScriptFeatures},%
      {Size=-\sf@size,%
        Font=\um@ScriptScriptFont,%
        \um@ScriptScriptFeatures}},%
    \XKV@rm}{#2}}\@tempa
%\rule{1ex}{1ex}%
%    \end{macrocode}
% Probably want to check there that we're not creating multiple symbol fonts
% with the same NFSS declaration. On that note, \pkg{fontspec} doesn't seem to
% be keeping track of that, either |:(| (check that out!)
%    \begin{macrocode}
  \ifx\um@char@range\@empty
    \def\um@symfont{um@allsym}%
    \um@PackageInfo{Defining the default maths font as '#2'}%
    \let\UnicodeMathSymbol\um@mathsymbol@noparse
  \else
    \stepcounter{um@fam}%
    \edef\um@symfont{um@fam\theum@fam}%
    \let\UnicodeMathSymbol\um@mathsymbol@parse
  \fi
%\rule{1ex}{1ex}%
  \DeclareSymbolFont{\um@symfont}
    {\encodingdefault}{\zf@family}{\mddefault}{\updefault}%
%    \end{macrocode}
% And now we input every single maths char. See File~\ref{part:awk-script} for
% the source to |unicode-math.tex|. There is an added space somewhere in here.
%    \begin{macrocode}
  \if@um@init
    \input unicode-math.tex
    \input unicode-math-add.tex
  \fi
  \unless\ifx\um@char@range\@empty
    \input unicode-math.tex
    \input unicode-math-add.tex
  \fi
%    \end{macrocode}
% 
%    \begin{macrocode}
%\rule{1ex}{1ex}%
  \ifx\um@char@range\@empty
    \let\um@mathbb\@empty
    \let\um@mathbf\@empty
    \let\um@mathfrak\@empty
    \let\um@mathup\@empty
    \let\um@mathit\@empty
    \let\um@mathscr\@empty
    \let\um@mathsf\@empty
    \let\um@mathsfit\@empty
    \let\um@mathtt\@empty
    \let\um@mathbf\@empty
    \let\um@mathbfit\@empty
    \let\um@mathbffrak\@empty
    \let\um@mathbfscr\@empty
    \let\um@mathbfsf\@empty
    \let\um@mathbfsfit\@empty
    \let\SetMathAlphChar\um@mathmap@noparse
  \else
    \let\SetMathAlphChar\um@mathmap@parse
  \fi
%    \end{macrocode}
%
% \subsection{Maths alphabets' character mapping}
% \seclabel{mathmap}
%
% We want it to be convenient for users to actually type in maths.
% The \ascii\ Latin characters should be used for italic maths,
% and the text Greek characters should be used for upright/italic
% (depending on preference) Greek, if desired.
%
%
% Numbers:
%    \begin{macrocode}
  \ifx\um@char@range\@empty
    \um@def@numbers
%    \end{macrocode}
% \paragraph{Normal weight}
%    \begin{macrocode}
    \if@um@literal
      \um@setmathcodes{\um@usv@upLatin}{26}{\um@usv@upLatin}%
      \um@setmathcodes{\um@usv@itLatin}{26}{\um@usv@itLatin}%
      \um@setmathcodes{\um@usv@itlatin}{26}{\um@usv@itlatin}%
      \SetMathCode{\um@usv@ith}{\mathalpha}{\um@symfont}{\um@usv@ith}%
      \um@setmathcodes{\um@usv@uplatin}{26}{\um@usv@uplatin}%
      \um@setmathcodes{\um@usv@upGreek}{25}{\um@usv@upGreek}%
      \SetMathCode{\um@usv@varTheta}{\mathalpha}{\um@symfont}{\um@usv@varTheta}%
      \um@setmathcodes{\um@usv@itGreek}{25}{\um@usv@itGreek}%
      \um@setmathcodes{\um@usv@upgreek}{25}{\um@usv@upgreek}%
%    \end{macrocode}
%: TODO: other literal symbols? or are these redundant?
%    \begin{macrocode}
      \SetMathCode{\um@usv@Nabla}{\mathalpha}{\um@symfont}{\um@usv@Nabla}%
      \SetMathCode{\um@usv@itNabla}{\mathalpha}{\um@symfont}{\um@usv@itNabla}%
      \SetMathCode{\um@usv@partial}{\mathalpha}{\um@symfont}{\um@usv@partial}%
      \SetMathCode{\um@usv@itpartial}{\mathalpha}{\um@symfont}{\um@usv@itpartial}%      
    \else
%    \end{macrocode}
% Latin letters:
%    \begin{macrocode}
      \if@um@upLatin\um@def@upLatin\else\um@def@itLatin\fi
      \if@um@uplatin\um@def@uplatin\else\um@def@itlatin\fi
%    \end{macrocode}
%
% \begin{example}{}
%   \setmathfont{Cambria Math}
%   $0123456789$ \\
%   $ABCDEFGHIJKLMNOPQRSTUVWXYZ$ \\
%   $abcdefghijklmnopqrstuvwxyz$ \\
% \end{example}
%
% Normal weight Greek, italic uppercase and lowercase respectively:
%    \begin{macrocode}
      \if@um@upGreek\um@def@upGreek\else\um@def@itGreek\fi
      \if@um@upgreek\um@def@upgreek\else\um@def@itgreek\fi
%    \end{macrocode}
% Nabla and partial:
%    \begin{macrocode}  
      \if@um@upNabla
        \SetMathCode{\um@usv@Nabla}{\mathalpha}{\um@symfont}{\um@usv@Nabla}%
        \SetMathCode{\um@usv@itNabla}{\mathalpha}{\um@symfont}{\um@usv@Nabla}%
      \else
        \SetMathCode{\um@usv@Nabla}{\mathalpha}{\um@symfont}{\um@usv@itNabla}%    
        \SetMathCode{\um@usv@itNabla}{\mathalpha}{\um@symfont}{\um@usv@itNabla}%    
      \fi
      \if@um@uppartial
        \SetMathCode{\um@usv@partial}{\mathalpha}{\um@symfont}{\um@usv@partial}%
        \SetMathCode{\um@usv@itpartial}{\mathalpha}{\um@symfont}{\um@usv@partial}%
      \else
        \SetMathCode{\um@usv@partial}{\mathalpha}{\um@symfont}{\um@usv@itpartial}%    
        \SetMathCode{\um@usv@itpartial}{\mathalpha}{\um@symfont}{\um@usv@itpartial}%    
      \fi
    \fi
%    \end{macrocode}
% \paragraph{Bold}
%: TODO: finish this off for the `var' symbols.
%    \begin{macrocode}
    \if@um@bfliteral
      \um@setmathcodes{\um@usv@bfLatin}{26}{\um@usv@bfLatin}
      \um@setmathcodes{\um@usv@bflatin}{26}{\um@usv@bflatin}
      \um@setmathcodes{\um@usv@bfitLatin}{26}{\um@usv@bfitLatin}
      \um@setmathcodes{\um@usv@bfitlatin}{26}{\um@usv@bfitlatin}
      \um@setmathcodes{\um@usv@bfGreek}{25}{\um@usv@bfGreek}
      \um@setmathcodes{\um@usv@bfgreek}{25}{\um@usv@bfgreek}
      \um@setmathcodes{\um@usv@bfitGreek}{25}{\um@usv@bfitGreek}
      \um@setmathcodes{\um@usv@bfitgreek}{25}{\um@usv@bfitgreek}
    \else
      \um@setmathcodes{\um@usv@bfLatin,\um@usv@bfitLatin}{26}{%
        \if@um@bfupLatin\um@usv@bfLatin\else\um@usv@bfitLatin\fi}
      \um@setmathcodes{\um@usv@bflatin,\um@usv@bfitlatin}{26}{%
        \if@um@bfupLatin\um@usv@bflatin\else\um@usv@bfitlatin\fi}
      \um@setmathcodes{\um@usv@bfGreek,\um@usv@bfitGreek}{25}{%
        \if@um@bfupLatin\um@usv@bfGreek\else\um@usv@bfitGreek\fi}
      \um@setmathcodes{\um@usv@bfGreek,\um@usv@bfitGreek}{25}{%
        \if@um@bfupLatin\um@usv@bfGreek\else\um@usv@bfitGreek\fi}
%    \end{macrocode}
% Bold nabla and partial symbols:
%    \begin{macrocode}
      \if@um@upNabla
        \SetMathCode{\um@usv@bfNabla}{\mathalpha}{\um@symfont}{\um@usv@bfNabla}%
        \SetMathCode{\um@usv@bfitNabla}{\mathalpha}{\um@symfont}{\um@usv@bfNabla}%
        \SetMathCode{\um@usv@bfsfNabla}{\mathalpha}{\um@symfont}{\um@usv@bfsfNabla}%
        \SetMathCode{\um@usv@bfsfitNabla}{\mathalpha}{\um@symfont}{\um@usv@bfsfNabla}%
      \else
        \SetMathCode{\um@usv@bfNabla}{\mathalpha}{\um@symfont}{\um@usv@bfitNabla}%    
        \SetMathCode{\um@usv@bfitNabla}{\mathalpha}{\um@symfont}{\um@usv@bfitNabla}%    
        \SetMathCode{\um@usv@bfsfitNabla}{\mathalpha}{\um@symfont}{\um@usv@bfsfitNabla}%
        \SetMathCode{\um@usv@bfsfitNabla}{\mathalpha}{\um@symfont}{\um@usv@bfsfitNabla}%
      \fi
      \if@um@uppartial
        \SetMathCode{\um@usv@bfpartial}{\mathalpha}{\um@symfont}{\um@usv@bfpartial}%
        \SetMathCode{\um@usv@bfitpartial}{\mathalpha}{\um@symfont}{\um@usv@bfpartial}%
        \SetMathCode{\um@usv@bfsfpartial}{\mathalpha}{\um@symfont}{\um@usv@bfsfpartial}%
        \SetMathCode{\um@usv@bfsfitpartial}{\mathalpha}{\um@symfont}{\um@usv@bfsfpartial}%
      \else
        \SetMathCode{\um@usv@bfpartial}{\mathalpha}{\um@symfont}{\um@usv@bfitpartial}%    
        \SetMathCode{\um@usv@bfitpartial}{\mathalpha}{\um@symfont}{\um@usv@bfitpartial}%    
        \SetMathCode{\um@usv@bfsfpartial}{\mathalpha}{\um@symfont}{\um@usv@bfsfitpartial}%    
        \SetMathCode{\um@usv@bfsfitpartial}{\mathalpha}{\um@symfont}{\um@usv@bfsfitpartial}%    
      \fi
    \fi
%    \end{macrocode}
% %: TODO: implement behaviour when char@range is NOT empty
%    \begin{macrocode}
  \fi
%    \end{macrocode}
%
% \begin{example}{}
%   \setmathfont{Cambria Math}
%   $ΑΒΓΔΕΖΗΘΙΚΛΜΝΞΟΠΡΣΤΥΦΧΨΩ$\quad$ϴ$ \\
%   $αβγδεζηθικλμνξοπρστυφχψω$\quad$ϵϑϰϕϱϖ$ \\
% \end{example}
%
% Set up the maths alphabets:
%    \begin{macrocode}
  \um@setup@alphabets
%    \end{macrocode}
% End of the \cmd\setmathfont\ macro.
%    \begin{macrocode}
}
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\um@mathsymbol@noparse}
%    \begin{macrocode}
\newcommand\um@mathsymbol@noparse[4]{%
  \DeclareUnicodeMathSymbol{#2}{#3}{\um@symfont}{#1}}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\um@mathsymbol@parse}
% If the \feat{Range} font feature has been used, then only
% a subset of the unicode glyphs are to be defined.
% See \secref{rangeproc} for the code that enables this.
%    \begin{macrocode}
\newcommand\um@mathsymbol@parse[4]{%
  \um@parse@term{#1}{#2}{#3}{%
    %\um@PackageInfo{Defining \string#2 as mathchar #1}%
    \DeclareUnicodeMathSymbol{#2}{#3}{\um@symfont}{#1}}}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\um@mk@alph}
% Wrapper to define maths alphabets.
%    \begin{macrocode}
\newcommand\um@mk@math[1]{%
  \expandafter\def\csname math#1\endcsname##1{%
    \begingroup
      \csname um@math#1\endcsname
      ##1
    \endgroup}}
%    \end{macrocode}
% \end{macro}
%  
% Maths alphabets' base definition. See \secref{mathmap} for the internal definitions.
%    \begin{macrocode}
\um@mk@math{up}
\um@mk@math{it}
\um@mk@math{scr}
\um@mk@math{bb}
\um@mk@math{frak}
\um@mk@math{sf}
\um@mk@math{sfit}
\um@mk@math{tt}    
%    \end{macrocode}
% And bold maths alphabets. See \secref{bfmathmap} for the internal definitions.
%    \begin{macrocode}
\um@mk@math{bf}
\um@mk@math{bfit}
\um@mk@math{bfscr}
\um@mk@math{bffrak}
\um@mk@math{bfsf}
\um@mk@math{bfsfit}
%    \end{macrocode}
%
% \begin{macro}{\mathcal}
%    \begin{macrocode}
\let\mathcal\mathscr
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\um@mathmap@noparse}
% \darg{Maths alphabet, \eg, \cmd\mathbb}
% \darg{Input slot(s), \eg, the slot for `A' (comma separated)}
% \darg{Output slot, \eg, the slot for `$\mathbb{A}$'}
% Adds \cmd\SetMathCode\ declaractions to the specified maths alphabet's definition (\eg, \cmd\um@mathscr).
% Uses \cmd\um@addto@mathmap\ (below) to expand the name of the current symbol font.
%    \begin{macrocode}
\newcommand\um@mathmap@noparse[3]{%
  \@for\@ii:=#2\do{%
    \expandafter\expandafter 
    \expandafter\um@addto@mathmap 
    \expandafter\expandafter 
    \expandafter{%
    \expandafter\um@symfont
    \expandafter}%
    \expandafter{\@ii}{#1}{#3}%
   }}%
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\um@mathmap@parse}
% \darg{Maths alphabet, \eg, \cmd\mathbb}
% \darg{Input slot(s), \eg, the slot for `A' (comma separated)}
% \darg{Output slot, \eg, the slot for `$\mathbb{A}$'}
% When \cmd\um@parse@term\ is executed, it populates the \cmd\um@char@num@range\
% macro with slot numbers corresponding to the specified range. This range is used to
% conditionally add \cmd\SetMathCode\ declaractions to the maths alphabet definition (\eg, \cmd\um@mathscr).
%    \begin{macrocode}
\newcommand\um@mathmap@parse[3]{%
  \@for\@ii:=\um@char@num@range\do{%
    \ifnum\@ii=#3\relax
      \@for\@jj:=#2\do{
        \expandafter\expandafter 
        \expandafter\um@addto@mathmap 
        \expandafter\expandafter 
        \expandafter{%
        \expandafter\um@symfont
        \expandafter}%
        \expandafter{\@jj}{#1}{#3}}%
    \fi}}%
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\um@addto@mathmap}
% \darg{Math symbol font, always/usually the expansion of \cmd\um@symfont}
% \darg{Input slot, \eg, the slot for `A'}
% \darg{Maths alphabet, \eg, \cmd\mathbb}
% \darg{Output slot, \eg, the slot for `$\mathbb{A}$'}
% This macro is used so that \cmd\um@symfont\ can be expanded before entering the \cmd\g@addto@macro\ command.
%    \begin{macrocode}
\newcommand\um@addto@mathmap[4]{%
  \expandafter\g@addto@macro\csname um@\expandafter\@gobble\string#3\endcsname{%
    \SetMathCode{#2}{\mathalpha}{#1}{#4}}}
%    \end{macrocode}
% \end{macro}
%
% \subsection{(Big) operators}
%
% Turns out that \XeTeX\ is clever enough to deal with big operators for us automatically
% with \cmd\XeTeXmathchardef. Amazing!
%
% However, the limits aren't set automatically; that is, we want to define, a la Plain \TeX\ \etc, \verb|\def\int{\intop\nolimits}|, so there needs to be a transformation from \cmd\int\ to \cmd\intop\ during the expansion of \cmd\UnicodeMathSymbol\ in the appropriate contexts.
%
%: TODO use |\mathchar| |"8000| to create active operators that have \cmd\nolimits\ suffices.
%
% Following is a table of every math operator (\cmd\mathop) defined in |unicode-maths.tex|, from which a subset need to be flagged for \cmd\nolimits\ adjustments. The limits as specified by \pkg{unicode-math} are shown (in grey).
% 
% \begingroup
% \setmathfont[SizeFeatures={
%     {Size=-10, Colour=888888},
%     {Size=10-, Colour=FF0000}}]{Code2000}
% \def\UnicodeMathSymbol#1#2#3#4{\ifx\mathop#3\relax
%     \def\@tempa{\scshape\MakeLowercase{u+\@gobble#1} & 
%       $\displaystyle#2_0^1$ & 
%       \small\cmd#2 & 
%       \scshape#4 \\}\expandafter\@tempa
%   \fi}
% \begin{longtable}[l]{@{}cccp{6cm}@{}}
% \toprule
% USV & Ex. & Macro & Description \\
% \midrule
% \input unicode-math.tex
% \bottomrule
% \end{longtable}
% \endgroup
%
% \begin{macro}{\um@nolimits}
% This macro is a commalist containing those maths operators that require a \cmd\nolimits\ suffix. This list is used when processing |unicode-math.tex| to define such commands automatically (see the macro \cmd\um@set@mathsymbol\ on page~\pageref{mac:um@set@mathsymbol}). I've chosen essentially just the operators that look like integrals; hopefully a better mathematician can help me out here. I've a feeling that it's more useful \emph{not} to include the multiple integrals such as $\iiiint$, but that might be a matter of preference.
%    \begin{macrocode}
\def\um@nolimits{%
  \@elt\int\@elt\iint\@elt\iiint\@elt\iiiint\@elt\oint\@elt\oiint\@elt\oiiint
  \@elt\intclockwise\@elt\varointclockwise\@elt\ointctrclockwise\@elt\sumint
  \@elt\intbar\@elt\intBar\@elt\fint\@elt\cirfnint\@elt\awint\@elt\rppolint
  \@elt\scpolint\@elt\npolint\@elt\pointint\@elt\sqint\@elt\intlarhk\@elt\intx
  \@elt\intcap\@elt\intcup\@elt\upint\@elt\lowint}
%    \end{macrocode}
% \changes{v0.01}{2006/11/26}{Implemented for \cmd\nolimits\ processing}
% \end{macro}
%
% \begin{macro}{\addnolimits}
% This macro appends material to the macro containing the list of operators that don't take limits. See example following for usage. Note at present that this command must have taken effect before \cmd\setmathfont.
%    \begin{macrocode}
\newcommand\addnolimits[1]{%
  \expandafter\def 
  \expandafter\um@nolimits 
  \expandafter{\um@nolimits\@elt#1}}
%    \end{macrocode}
% \changes{v0.01}{2006/11/26}{Implemented for \cmd\nolimits\ processing}
% \end{macro}
%
% \begin{macro}{\removenolimits}
% Can this macro be given a better name? It removes (globally) an item from the nolimits list. See example following for usage. 
%    \begin{macrocode}
\def\removenolimits#1{%
  \begingroup
    \def\@elt##1{%
      \ifx##1#1\else
        \noexpand\@elt\noexpand##1
     \fi}
    \xdef\um@nolimits{\um@nolimits}%
  \endgroup}
%    \end{macrocode}
% \changes{v0.2}{2007/01/22}{Implemented for \cmd\nolimits\ processing}
% \end{macro}
%
% \begin{example}{}
%   \setmathfont{Cambria Math} \[\iiint_V\]
%   \removenolimits\iiint
%   \setmathfont{Cambria Math} \[\iiint_V\]
%   \addnolimits\iiint
%   \setmathfont{Cambria Math} \[\iiint_V\]
% \end{example}
%
% \subsection{Radicals}
%
% The radical for square root is organised in \cmd\um@set@mathsymbol\ on page~\pageref{page:radical}. I think it's the only radical ever. But what about right-to-left square roots?
%
% \begin{macro}{\um@radicals}
% We organise radicals in the same way as nolimits-operators; that is, in a comma-list.
%    \begin{macrocode}
\def\um@radicals{\sqrt}
%    \end{macrocode}
% \changes{v0.01}{2006/11/27}{Implemented for more general radicals processing.}
% \end{macro}
%
% \iffalse
% \begin{example}{}
%   \setmathfont{Cambria Math}
%   \[ \sqrt{1+\sqrt{1+
%    \sqrt{1+ \sqrt{1+
%    \sqrt{1+\sqrt{1+
%    \sqrt{1+x}}}}}}} \]
% \end{example}
% \fi
%
% \begin{example}{}
%   \setmathfont{Cambria Math}
%   \[ \sqrt{1+\sqrt{1+x}} \]
% \end{example}
%
% \subsection{Delimiters}
% \begin{macro}{\left} We redefine the primitive to be preceded by \cmd\mathopen; this gives much better spacing in cases such as \cmd\sin\cmd\left\dots. Courtesy of Frank Mittelbach:
%
% {\small |http://www.latex-project.org/cgi-bin/ltxbugs2html?pr=latex/3853&prlatex/3754|}
%    \begin{macrocode}
\let\left@primitive\left
\def\left{\mathopen{}\left@primitive}
%    \end{macrocode}
% \end{macro}
% No re-definition is made for \cmd\right\ because I don't believe it to be necessary\dots
%
%: TODO: `fences', e.g., \cmd\vert
%
% \begin{example}{}
%   \setmathfont{Cambria Math}
%   \[ \left(\left(\left(\left(\left( x
%      \right)^1\right)^2\right)^3\right)^4\right)^5 \]
%   \[ \left[\left[\left[\left[\left[ y
%      \right]^1\right]^2\right]^3\right]^4\right]^5 \]
%   \[ \left\{\left\{\left\{\left\{\left\{ z
%      \right\}^1\right\}^2\right\}^3\right\}^4\right\}^5 \]
% \end{example}
%
% Here are all \cmd\mathopen\ characters:
% \begingroup
% \setmathfont[SizeFeatures={
%     {Size=-10, Colour=888888},
%     {Size=10-, Colour=FF0000}}]{Code2000}
% \let\sqrt@old\sqrt
% \def\sqrt{\sqrt@old{}}
% \def\UnicodeMathSymbol#1#2#3#4{%
%   \ifx\mathopen#3\relax
%     \def\@tempa{\scshape\MakeLowercase{u+\@gobble#1} & $\displaystyle#2$ & \small\cmd#2 & \scshape#4 \\}\expandafter\@tempa
%   \fi}
% \begin{longtable}[l]{@{}cccp{6cm}@{}}
% \toprule
% USV & Ex. & Macro & Description \\
% \midrule
% \input unicode-math.tex
% \bottomrule
% \end{longtable}
% \endgroup
%
% And \cmd\mathclose:
% \begingroup
% \setmathfont[SizeFeatures={
%     {Size=-10, Colour=888888},
%     {Size=10-, Colour=FF0000}}]{Code2000}
% \renewcommand\UnicodeMathSymbol[4]{%
%   \ifx\mathclose#3\relax
%     \def\@tempa{\scshape\MakeLowercase{u+\@gobble#1} & $\displaystyle#2$ & \small\cmd#2 & \scshape#4 \\}\expandafter\@tempa
%   \fi}
% \begin{longtable}[l]{@{}cccp{6cm}@{}}
% \toprule
% USV & Ex. & Macro & Description \\
% \midrule
% \input unicode-math.tex
% \bottomrule
% \end{longtable}
% \endgroup
%
%
% \subsection{Maths accents}
%: TODO: maths accents
%
% \section{Font features}
%
% \begin{macro}{\um@zf@feature}
% Use the same method as \pkg{fontspec} for feature definition
% (\ie, using \pkg{xkeyval}) but with a conditional to restrict
% the scope of these features to \pkg{unicode-math} commands.
%    \begin{macrocode}
\newcommand\um@zf@feature[2]{%
  \define@key[zf]{options}{#1}[]{%
    \if@um@fontspec@feature
      #2
    \else
      \PackageError{fontspec/unicode-math}
        {The ‘#1’ font feature can only be used for maths fonts}
        {The feature you tried to use can only be in commands
          like \protect\setmathfont}%
    \fi}}
%    \end{macrocode}
% \end{macro}
%
% \subsection{OpenType maths font features}
%    \begin{macrocode}
\um@zf@feature{ScriptStyle}{%
  \zf@update@ff{+ssty=0}}
\um@zf@feature{ScriptScriptStyle}{%
  \zf@update@ff{+ssty=1}}
%    \end{macrocode}
%
% \subsection{Script and scriptscript font options}
%    \begin{macrocode}
\define@cmdkey[um]{options}[um@]{ScriptFeatures}{}
\define@cmdkey[um]{options}[um@]{ScriptScriptFeatures}{}
\define@cmdkey[um]{options}[um@]{ScriptFont}{}
\define@cmdkey[um]{options}[um@]{ScriptScriptFont}{}
%    \end{macrocode}
%
% \subsection{Range processing}\seclabel{rangeproc}
%
%    \begin{macrocode}
\define@choicekey+[um]{options}{Range}[\@tempa\@tempb]{ALL}{%
  \ifcase\@tempb\relax
    \@um@inittrue
  \fi}{% else:
    \xdef\um@char@range{\zap@space#1 \@empty}}
%    \end{macrocode}
%
% Pretty basic comma separated range processing.
% Donald Arseneau's \pkg{selectp} package has a cleverer technique.
%
% \begin{macro}{\um@parse@term}
% \darg{unicode character slot}
% \darg{control sequence (character macro)}
% \darg{control sequence (math type)}
% \darg{code to execute}
% This macro expands to \verb|#4| \note{Unless I've got my terminology twisted again.}
% if any of its arguments are contained in the commalist \cmd\um@char@range. 
% This list can contain either character ranges (for checking with \verb|#1|) or control sequences. 
% These latter can either be the command name of a specific character, \emph{or} the math 
% type of one (\eg, \cmd\mathbin).
%
% Character ranges are passed to \cmd\um@parse@range, which accepts input in the form shown in \tabref{ranges}.
%
% \begin{table}[htbp]
% \centering
% \topcaption{Ranges accepted by \cmd\um@parse@range.}
% \label{tab:ranges}
% \begin{tabular}{>{\ttfamily}cc}
% \textrm{Input} & Range \\
% \hline
% x & $r=x$ \\
% x- & $r\geq x$ \\
% -y & $r\leq y$ \\
% x-y & $x \leq r \leq y$ \\
% \end{tabular}
% \end{table}
%
% Start by iterating over the commalist, ignoring empties, and initialising the scratch conditional:
%    \begin{macrocode}
\newcommand\um@parse@term[4]{%
  \@for\@ii:=\um@char@range\do{%
    \unless\ifx\@ii\@empty
      \@tempswafalse
%    \end{macrocode}
% |\if\relax\noexpand##| is true if |##| is a control sequence;
% then match to either the character macro (\cmd\alpha) or the math type (\cmd\mathbin):
%    \begin{macrocode}
      \expandafter\if\expandafter\relax\expandafter\noexpand\@ii
        \expandafter\ifx\@ii#2
          \@tempswatrue
        \else
          \expandafter\ifx\@ii#3
            \@tempswatrue
          \fi
        \fi
%    \end{macrocode}
% Otherwise, we have a number range, which is passed to another macro:
%    \begin{macrocode}
      \else
        \expandafter\um@parse@range\@ii-\@marker-\@nil#1\@nil
      \fi
%    \end{macrocode}
% If we have a match, execute the code!
% It also populates the
% \cmd\um@char@num@range\ macro, which is used when defining
% \cmd\mathbf\ (\etc) \cmd\mathchar\ remappings.
%    \begin{macrocode}
      \if@tempswa
        \ifx\um@char@num@range\@empty
          \g@addto@macro\um@char@num@range{#1}%        
        \else
          \g@addto@macro\um@char@num@range{,#1}%
        \fi
        #4%
      \fi
    \fi}}
%    \end{macrocode}
% \end{macro}
%
% \begin{example}{}
%   \def\um@char@range{\a,2-4,\c}
%   \um@parse@term{1}{\a}{\b}
%      {`1' or `\string\a' or `\string\b' is included}
%   \um@parse@term{1}{\b}{\c}
%      {`1' or `\string\b' or `\string\c' is included}
%   \um@parse@term{3}{\a}{\b}
%      {`3' or `\string\a' or `\string\b' is included}
% \end{example}
%
% \begin{macro}{\um@parse@range}
% Weird syntax. 
% As shown previously in \tabref{ranges}, this macro can be passed four different input types via \cmd\um@parse@term.
%    \begin{macrocode}
\def\um@parse@range#1-#2-#3\@nil#4\@nil{%
  \def\@tempa{#1}%
  \def\@tempb{#2}%
%    \end{macrocode}
% \begin{tabular}{@{}ll}
% \hline
% Range & $r=x$ \\
% C-list input & \cmd\@ii=|X| \\
% Macro input & |\um@parse@range X-\@marker-\@nil#1\@nil| \\
% Arguments & 
%     \texttt{\textcolor{red}{\char`\#1}-\textcolor{blue}{\char`\#2}-\textcolor{Green}{\char`\#3}}
%   = \texttt{\textcolor{red}{X}-\textcolor{blue}{\cmd\@marker}-\textcolor{Green}{\char`\{\char`\}}} \\
% \hline
% \end{tabular}
%    \begin{macrocode}
  \ifx\@marker\@tempb\relax
    \ifnum#4=#1\relax
      \@tempswatrue
    \fi
  \else
%    \end{macrocode}
% \begin{tabular}{@{}ll}
% \hline
% Range & $r\geq x$ \\
% C-list input & \cmd\@ii=|X-| \\
% Macro input & |\um@parse@range X--\@marker-\@nil#1\@nil|\\
% Arguments & 
%    \texttt{\textcolor{red}{\char`\#1}-\textcolor{blue}{\char`\#2}-\textcolor{Green}{\char`\#3}}
% = \texttt{\textcolor{red}{X}-\textcolor{blue}{\char`\{\char`\}}-\textcolor{Green}{\cmd\@marker-}} \\
% \hline
% \end{tabular}
%    \begin{macrocode}
    \ifx\@empty\@tempb
      \ifnum#4>\numexpr#1-1\relax
        \@tempswatrue
      \fi
    \else
%    \end{macrocode}
% \begin{tabular}{@{}ll}
% \hline
% Range & $r\leq y$ \\
% C-list input & \cmd\@ii=|-Y|  \\
% Macro input & |\um@parse@range -Y-\@marker-\@nil#1\@nil|\\
% Arguments & 
%    \texttt{\textcolor{red}{\char`\#1}-\textcolor{blue}{\char`\#2}-\textcolor{Green}{\char`\#3}}
% = \texttt{\textcolor{red}{\char`\{\char`\}}-\textcolor{blue}{Y}-\textcolor{Green}{\cmd\@marker-}}\\
% \hline
% \end{tabular}
%    \begin{macrocode}
      \ifx\@empty\@tempa
        \ifnum#4<\numexpr#2+1\relax
          \@tempswatrue
        \fi
%    \end{macrocode}
% \begin{tabular}{@{}ll}
% \hline
% Range & $x \leq r \leq y$  \\
% C-list input & \cmd\@ii=|X-Y|  \\
% Macro input & |\um@parse@range X-Y-\@marker-\@nil#1\@nil|\\
% Arguments & 
%     \texttt{\textcolor{red}{\char`\#1}-\textcolor{blue}{\char`\#2}-\textcolor{Green}{\char`\#3}}
% =  \texttt{\textcolor{red}{X}-\textcolor{blue}{Y}-\textcolor{Green}{\cmd\@marker-}}\\
% \hline
% \end{tabular}
%    \begin{macrocode}
      \else
        \ifnum#4>\numexpr#1-1\relax
          \ifnum#4<\numexpr#2+1\relax
            \@tempswatrue
          \fi\fi\fi\fi\fi}
%    \end{macrocode}
% \end{macro}
%
% \subsection{Resolving Greek letters}
%
% \paragraph{Alphabet unicode positions}
% Before we begin, let's define the positions of the various unicode
% alphabets so that our code is a little more readable.
%    \begin{macrocode}
\def\um@usv@num{`\0}
\def\um@usv@upLatin{`\A}
\def\um@usv@uplatin{`\a}
\def\um@usv@itLatin{"1D434}
\def\um@usv@itlatin{"1D44E}
\def\um@usv@upGreek{"391}
\def\um@usv@upgreek{"3B1}
\def\um@usv@itGreek{"1D6E2}
\def\um@usv@itgreek{"1D6FC}
\def\um@usv@bbnum{"1D7D8}
\def\um@usv@bbLatin{"1D538}
\def\um@usv@bblatin{"1D552}
\def\um@usv@scrLatin{"1D49C}
\def\um@usv@scrlatin{"1D4B6}
\def\um@usv@frakLatin{"1D504}
\def\um@usv@fraklatin{"1D51E}
\def\um@usv@sfnum{"1D7E2}
\def\um@usv@sfLatin{"1D5A0}
\def\um@usv@sflatin{"1D5BA}
\def\um@usv@sfitLatin{"1D608}
\def\um@usv@sfitlatin{"1D622}
\def\um@usv@ttnum{"1D7F6}
\def\um@usv@ttLatin{"1D670}
\def\um@usv@ttlatin{"1D68A}
%    \end{macrocode}
% Bold:
%    \begin{macrocode}
\def\um@usv@bfnum{"1D7CE}
\def\um@usv@bfLatin{"1D400}
\def\um@usv@bflatin{"1D41A}
\def\um@usv@bfGreek{"1D6A8}
\def\um@usv@bfgreek{"1D6C2}
\def\um@usv@bfitLatin{"1D468}
\def\um@usv@bfitlatin{"1D482}
\def\um@usv@bfitGreek{"1D71C}
\def\um@usv@bfitgreek{"1D736}
\def\um@usv@bffrakLatin{"1D56C}
\def\um@usv@bffraklatin{"1D586}
\def\um@usv@bfscrLatin{"1D4D0}
\def\um@usv@bfscrlatin{"1D4EA}
\def\um@usv@bfsfnum{"1D7EC}
\def\um@usv@bfsfLatin{"1D5D4}
\def\um@usv@bfsflatin{"1D5EE}
\def\um@usv@bfsfGreek{"1D756}
\def\um@usv@bfsfgreek{"1D770}
\def\um@usv@bfsfitLatin{"1D63C}
\def\um@usv@bfsfitlatin{"1D656}
\def\um@usv@bfsfitGreek{"1D790}
\def\um@usv@bfsfitgreek{"1D7AA}
%    \end{macrocode}
% Greek variants:
%    \begin{macrocode}
\def\um@usv@varTheta{"3F4}
\def\um@usv@Digamma{"3DC}
\def\um@usv@varepsilon{"3F5}
\def\um@usv@vartheta{"3D1}
\def\um@usv@varkappa{"3F0}
\def\um@usv@varphi{"3D5}
\def\um@usv@varrho{"3F1}
\def\um@usv@varpi{"3D6}
\def\um@usv@digamma{"3DD}
%    \end{macrocode}
% Italic Greek variants:
%    \begin{macrocode}
\def\um@usv@ith{"210E}
\def\um@usv@itvarTheta{"1D6F3}
\def\um@usv@itvarepsilon{"1D716}
\def\um@usv@itvartheta{"1D717}
\def\um@usv@itvarkappa{"1D718}
\def\um@usv@itvarphi{"1D719}
\def\um@usv@itvarrho{"1D71A}
\def\um@usv@itvarpi{"1D71B}
%    \end{macrocode}
% Nabla:
%    \begin{macrocode}
\def\um@usv@Nabla{"2207}
\def\um@usv@itNabla{"1D6FB}
\def\um@usv@bfNabla{"1D6C1}
\def\um@usv@bfitNabla{"1D735}
\def\um@usv@bfsfNabla{"1D76F}
\def\um@usv@bfsfitNabla{"1D7A9}
%    \end{macrocode}
% Partial:
%    \begin{macrocode}
\def\um@usv@partial{"2202}
\def\um@usv@itpartial{"1D715}
\def\um@usv@bfpartial{"1D6DB}
\def\um@usv@bfitpartial{"1D74F}
\def\um@usv@bfsfpartial{"1D789}
\def\um@usv@bfsfitpartial{"1D7C3}
%    \end{macrocode}
%
% \begin{macro}{\um@setmathcodes}
% \darg{Starting input char(s)}
% \darg{Number of iterations}
% \darg{Starting output char}
% Loops through character ranges setting \cmd\mathcode.
%    \begin{macrocode}
\newcommand\um@setmathcodes[3]{%
  \@for\um@inp:=#1\do{%
    \um@FOR\@tempcnta=[1:#2]\do{%
      \SetMathCode{\numexpr\um@inp+\@tempcnta-1\relax}
        {\mathalpha}{\um@symfont}{\numexpr#3+\@tempcnta-1\relax}}}}
%    \end{macrocode}
% \changes{v0.2}{2007/02/25}{Beginning to sort out the input encoding.}
% \end{macro}
%
% \begin{macro}{\um@setmathcodes}
% \darg{Maths alphabet}
% \darg{Starting input char(s)}
% \darg{Number of iterations}
% \darg{Starting output char}
% Loops through character ranges setting \cmd\mathcode.
%    \begin{macrocode}
\newcommand\um@setmathalphs[4]{%
  \@for\um@inp:=#2\do{%
    \um@FOR\@tempcnta=[1:#3]\do{%
      \edef\@tempa{%
        \noexpand\SetMathAlphChar{\noexpand#1}{\number\numexpr\um@inp+\@tempcnta-1\relax}
          {\number\numexpr#4+\@tempcnta-1\relax}}\@tempa}}}
%    \end{macrocode}
% \changes{v0.2}{2007/02/25}{Beginning to sort out the input encoding.}
% \end{macro}
%
% 
% \begin{example}{}
%   {\um@setmathcodes{`\A,`\D}{3}{`\B}
%   $ABCDEF$} $ABCDEF$
% \end{example}
%
% \begin{macro}{\um@resolve@greek}
% This macro defines \cmd\Alpha\dots\cmd\omega\ as their corresponding 
% unicode (mathematical italic) character. Remember that the mapping
% to upright or italic happens with the mathcode definitions, whereas these macros
% just stand for the literal unicode characters.
%    \begin{macrocode}
\AtBeginDocument{\um@resolve@greek}%
\newcommand\um@resolve@greek{%
  \def\Alpha{\itAlpha}%
  \def\Beta{\itBeta}%
  \def\Gamma{\itGamma}%
  \def\Delta{\itDelta}%
  \def\Epsilon{\itEpsilon}%
  \def\Zeta{\itZeta}%
  \def\Eta{\itEta}%
  \def\Theta{\itTheta}%
  \def\Iota{\itIota}%
  \def\Kappa{\itKappa}%
  \def\Lambda{\itLambda}%
  \def\Mu{\itMu}%
  \def\Nu{\itNu}%
  \def\Xi{\itXi}%
  \def\Omicron{\itOmicron}%
  \def\Pi{\itPi}%
  \def\Rho{\itRho}%
  \def\varTheta{\itvarTheta}%
  \def\Sigma{\itSigma}%
  \def\Tau{\itTau}%
  \def\Upsilon{\itUpsilon}%
  \def\Phi{\itPhi}%
  \def\Chi{\itChi}%
  \def\Psi{\itPsi}%
  \def\Omega{\itOmega}%
%    \end{macrocode}
% Lowercase:
%    \begin{macrocode}
  \def\alpha{\italpha}%
  \def\beta{\itbeta}%
  \def\gamma{\itgamma}%
  \def\delta{\itdelta}%
  \def\varepsilon{\itvarepsilon}%
  \def\zeta{\itzeta}%
  \def\eta{\iteta}%
  \def\theta{\ittheta}%
  \def\iota{\itiota}%
  \def\kappa{\itkappa}%
  \def\lambda{\itlambda}%
  \def\mu{\itmu}%
  \def\nu{\itnu}%
  \def\xi{\itxi}%
  \def\omicron{\itomicron}%
  \def\pi{\itpi}%
  \def\rho{\itrho}%
  \def\varsigma{\itvarsigma}%
  \def\sigma{\itsigma}%
  \def\tau{\ittau}%
  \def\upsilon{\itupsilon}%
  \def\phi{\itphi}%
  \def\chi{\itchi}%
  \def\psi{\itpsi}%
  \def\omega{\itomega}%
  \def\partial{\uppartial}%
  \def\varepsilon{\itvarepsilon}%
  \def\vartheta{\itvartheta}%
  \def\varkappa{\itvarkappa}%
  \def\varphi{\itvarphi}%
  \def\varrho{\itvarrho}%
  \def\varrho{\itvarsigma}%
  \def\varpi{\itvarpi}}
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\um@def@numbers}
%    \begin{macrocode}
\newcommand\um@def@numbers{%
  \um@setmathcodes{\um@usv@num}{10}{\um@usv@num}}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\um@def@upLatin}
%    \begin{macrocode}
\newcommand\um@def@upLatin{%
    \um@setmathcodes{\um@usv@upLatin,\um@usv@itLatin}{26}{\um@usv@upLatin}}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\um@def@itLatin}
%    \begin{macrocode}
\newcommand\um@def@itLatin{%
    \um@setmathcodes{\um@usv@upLatin,\um@usv@itLatin}{26}{\um@usv@itLatin}}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\um@def@itlatin}
% Don't overlook `h', which maps to \unichar{210E}{PLANCK CONSTANT}
% instead of the expected \unichar{1D455}{MATHEMATICAL ITALIC SMALL H}.
%    \begin{macrocode}
\newcommand\um@def@itlatin{%
  \um@setmathcodes{\um@usv@uplatin,\um@usv@itlatin}{26}{\um@usv@itlatin}%
  \SetMathCode{`\h}{\mathalpha}{\um@symfont}{\um@usv@ith}%
  \SetMathCode{\um@usv@ith}{\mathalpha}{\um@symfont}{\um@usv@ith}%
}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\um@def@uplatin}
%    \begin{macrocode}
\newcommand\um@def@uplatin{%
  \um@setmathcodes{\um@usv@uplatin,\um@usv@itlatin}{26}{\um@usv@uplatin}%
  \SetMathCode{\um@usv@ith}{\mathalpha}{\um@symfont}{`\h}%
}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\um@def@upGreek}
%    \begin{macrocode}
\newcommand\um@def@upGreek{%
    \um@setmathcodes{\um@usv@upGreek,\um@usv@itGreek}{25}{\um@usv@upGreek}%
    \SetMathCode{\um@usv@varTheta}{\mathalpha}{\um@symfont}{\um@usv@varTheta}%
    \SetMathCode{"1D6F3}{\mathalpha}{\um@symfont}{\um@usv@varTheta}%
}
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\um@def@itGreek}
%    \begin{macrocode}
\newcommand\um@def@itGreek{%
    \um@setmathcodes{\um@usv@upGreek,\um@usv@itGreek}{25}{\um@usv@itGreek}%
    \SetMathCode{\um@usv@varTheta}{\mathalpha}{\um@symfont}{"1D6F3}%    
}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\um@def@upgreek}
%    \begin{macrocode}
\newcommand\um@def@upgreek{%
    \um@setmathcodes{\um@usv@upgreek,\um@usv@itgreek}{25}{\um@usv@upgreek}%
    \SetMathCode{\um@usv@varepsilon}{\mathalpha}{\um@symfont}{\um@usv@varepsilon}%
    \SetMathCode{\um@usv@vartheta}{\mathalpha}{\um@symfont}{\um@usv@vartheta}%
    \SetMathCode{\um@usv@varkappa}{\mathalpha}{\um@symfont}{\um@usv@varkappa}%
    \SetMathCode{\um@usv@varphi}{\mathalpha}{\um@symfont}{\um@usv@varphi}%
    \SetMathCode{\um@usv@varrho}{\mathalpha}{\um@symfont}{\um@usv@varrho}%
    \SetMathCode{\um@usv@varpi}{\mathalpha}{\um@symfont}{\um@usv@varpi}%
}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\um@def@itgreek}
%    \begin{macrocode}
\newcommand\um@def@itgreek{%
    \um@setmathcodes{\um@usv@upgreek,\um@usv@itgreek}{25}{\um@usv@itgreek}%
    \SetMathCode{\um@usv@varepsilon}{\mathalpha}{\um@symfont}{"1D716}%
    \SetMathCode{\um@usv@vartheta}{\mathalpha}{\um@symfont}{"1D717}%
    \SetMathCode{\um@usv@varkappa}{\mathalpha}{\um@symfont}{"1D718}%
    \SetMathCode{\um@usv@varphi}{\mathalpha}{\um@symfont}{"1D719}%
    \SetMathCode{\um@usv@varrho}{\mathalpha}{\um@symfont}{"1D71A}%
    \SetMathCode{\um@usv@varpi}{\mathalpha}{\um@symfont}{"1D71B}%
}
%    \end{macrocode}
% \end{macro}
%
%
%
% \part{Maths alphabets mapping definitions}\label{part:mathmap}
%
%    \begin{macrocode}
\newcommand\um@setup@alphabets{%
%    \end{macrocode}
%
%: TODO: nested alphabets?
%
% \subsubsection{Upright: \cmd\mathup}
%
% Can't call it \cmd\mathrm\ any more because it contains Greek as well!
%
% \begin{example}{}
%   \setmathfont{Cambria Math}
%   $\mathup{ABCDEFGHIJKLMNOPQRSTUVWXYZ}$ \\
%   $\mathup{abcdefghijklmnopqrstuvwxyz}$ \\
%   $\mathup{ΑΒΓΔΕΖΗΘΙΚΛΜΝΞΟΠΡΣΤΥΦΧΨΩ}$\quad$\mathup{ϴ}$ \\
%   $\mathup{αβγδεζηθικλμνξοπρστυφχψω}$\quad$\mathup{ϵϑϰϕϱϖ}$ \\
% \end{example}
%
% Takes both upright and italic characters to be typeset as upright symbols.
%
%    \begin{macrocode}
  \um@setmathalphs{\mathup}{\um@usv@upLatin,\um@usv@itLatin}{26}{\um@usv@upLatin}%
  \um@setmathalphs{\mathup}{\um@usv@uplatin,\um@usv@itlatin}{26}{\um@usv@uplatin}%
  \um@setmathalphs{\mathup}{\um@usv@upGreek,\um@usv@itGreek}{25}{\um@usv@upGreek}%
  \um@setmathalphs{\mathup}{\um@usv@upgreek,\um@usv@itgreek}{25}{\um@usv@upgreek}%
  \SetMathAlphChar{\mathup}{\um@usv@Nabla,\um@usv@itNabla}{\um@usv@Nabla}%
  \SetMathAlphChar{\mathup}{\um@usv@partial,\um@usv@itpartial}{\um@usv@partial}%
  \SetMathAlphChar{\mathup}{\um@usv@varTheta,\um@usv@itvarTheta}{\um@usv@varTheta}%
  \SetMathAlphChar{\mathup}{\um@usv@varepsilon,\um@usv@itvarepsilon}{\um@usv@varepsilon}%
  \SetMathAlphChar{\mathup}{\um@usv@vartheta,\um@usv@itvartheta}{\um@usv@vartheta}%
  \SetMathAlphChar{\mathup}{\um@usv@varkappa,\um@usv@itvarkappa}{\um@usv@varkappa}%
  \SetMathAlphChar{\mathup}{\um@usv@varphi,\um@usv@itvarphi}{\um@usv@varphi}%
  \SetMathAlphChar{\mathup}{\um@usv@varrho,\um@usv@itvarrho}{\um@usv@varrho}%
  \SetMathAlphChar{\mathup}{\um@usv@varpi,\um@usv@itvarpi}{\um@usv@varpi}%
%    \end{macrocode}
%
% \subsubsection{Italic: \cmd\mathit}
%
% \begin{example}{}
%   \setmathfont{Cambria Math}
%   $\mathit{ABCDEFGHIJKLMNOPQRSTUVWXYZ}$ \\
%   $\mathit{abcdefghijklmnopqrstuvwxyz}$ \\
%   $\mathit{ΑΒΓΔΕΖΗΘΙΚΛΜΝΞΟΠΡΣΤΥΦΧΨΩ}$\quad$\mathit{ϴ}$ \\
%   $\mathit{αβγδεζηθικλμνξοπρστυφχψω}$\quad$\mathit{ϵϑϰϕϱϖ}$ \\
% \end{example}
%
% Roman:
%    \begin{macrocode}
  \um@setmathalphs{\mathit}{\um@usv@upLatin,\um@usv@itLatin}{26}{\um@usv@itLatin}%
  \um@setmathalphs{\mathit}{\um@usv@uplatin,\um@usv@itlatin}{26}{\um@usv@itlatin}%
  \SetMathAlphChar{\mathit}{`\h}{\um@usv@ith}%
  \SetMathAlphChar{\mathit}{\um@usv@ith}{\um@usv@ith}%
%    \end{macrocode}
% Greek:
%    \begin{macrocode}
  \um@setmathalphs{\mathit}{\um@usv@upGreek,\um@usv@itGreek}{25}{\um@usv@itGreek}%
  \um@setmathalphs{\mathit}{\um@usv@upgreek,\um@usv@itgreek}{25}{\um@usv@itgreek}%
  \SetMathAlphChar{\mathup}{\um@usv@Nabla,\um@usv@itNabla}{\um@usv@itNabla}%
  \SetMathAlphChar{\mathup}{\um@usv@partial,\um@usv@itpartial}{\um@usv@itpartial}%
  \SetMathAlphChar{\mathup}{\um@usv@varTheta,\um@usv@itvarTheta}{\um@usv@itvarTheta}%
  \SetMathAlphChar{\mathup}{\um@usv@varepsilon,\um@usv@itvarepsilon}{\um@usv@itvarepsilon}%
  \SetMathAlphChar{\mathup}{\um@usv@vartheta,\um@usv@itvartheta}{\um@usv@itvartheta}%
  \SetMathAlphChar{\mathup}{\um@usv@varkappa,\um@usv@itvarkappa}{\um@usv@itvarkappa}%
  \SetMathAlphChar{\mathup}{\um@usv@varphi,\um@usv@itvarphi}{\um@usv@itvarphi}%
  \SetMathAlphChar{\mathup}{\um@usv@varrho,\um@usv@itvarrho}{\um@usv@itvarrho}%
  \SetMathAlphChar{\mathup}{\um@usv@varpi,\um@usv@itvarpi}{\um@usv@itvarpi}%
%    \end{macrocode}
%
% \subsubsection{Blackboard or double-struck: \cmd\mathbb}
% \begin{example}{}
%   \setmathfont{Cambria Math}
%   $\mathbb{0123456789}$ \\
%   $\mathbb{ABCDEFGHIJKLMNOPQRSTUVWXYZ}$ \\
%   $\mathbb{abcdefghijklmnopqrstuvwxyz}$ \\
% \end{example}
%    \begin{macrocode}
%    \end{macrocode}
% Numbers: (always upright)
%    \begin{macrocode}
  \um@setmathalphs{\mathbb}{\um@usv@num}{10}{\um@usv@bbnum}%
%    \end{macrocode}
% Letters:
%    \begin{macrocode}
\um@setmathalphs{\mathbb}{\um@usv@upLatin,\um@usv@itLatin}{26}{\um@usv@bbLatin}%
\SetMathAlphChar{\mathbb}{`\C,"1D60A}{"2102}%
\SetMathAlphChar{\mathbb}{`\H,"1D60F}{"210D}%
\SetMathAlphChar{\mathbb}{`\N,"1D60F}{"2115}%
\SetMathAlphChar{\mathbb}{`\P,"1D617}{"2119}%
\SetMathAlphChar{\mathbb}{`\Q,"1D618}{"211A}%
\SetMathAlphChar{\mathbb}{`\R,"1D619}{"211D}%
\SetMathAlphChar{\mathbb}{`\Z,"1D621} {"2124}%
%    \end{macrocode}
% Roman lowercase:
%    \begin{macrocode}
\um@setmathalphs{\mathbb}{\um@usv@uplatin,\um@usv@itlatin}{26}{\um@usv@bblatin}%
%    \end{macrocode}
%
% \subsubsection{Script or caligraphic: \cmd\mathscr\ and \cmd\mathcal}
% \cmd\mathcal\ and \cmd\mathscr\ are aliases.
% \begin{example}{}
%   \setmathfont{Cambria Math}
%   $\mathscr{ABCDEFGHIJKLMNOPQRSTUVWXYZ}$ \\
%   $\mathscr{abcdefghijklmnopqrstuvwxyz}$ \\
% \end{example}
%    \begin{macrocode}
\um@setmathalphs{\mathscr}{\um@usv@upLatin,\um@usv@itLatin}{26}{\um@usv@scrLatin}%
\SetMathAlphChar{\mathscr}{`\B,"1D435}{"212C}%
\SetMathAlphChar{\mathscr}{`\E,"1D438}{"2130}%
\SetMathAlphChar{\mathscr}{`\F,"1D439}{"2131}%
\SetMathAlphChar{\mathscr}{`\H,"1D43B}{"210B}%
\SetMathAlphChar{\mathscr}{`\I,"1D43C}{"2110}%
\SetMathAlphChar{\mathscr}{`\L,"1D43F}{"2112}%
\SetMathAlphChar{\mathscr}{`\M,"1D440}{"2133}%
\SetMathAlphChar{\mathscr}{`\R,"1D445}{"211B}%
\um@setmathalphs{\mathscr}{\um@usv@uplatin,\um@usv@itlatin}{26}{\um@usv@scrlatin}%
\SetMathAlphChar{\mathscr}{`\e,"1D452}{"212F}%
\SetMathAlphChar{\mathscr}{`\g,"1D454}{"210A}%
\SetMathAlphChar{\mathscr}{`\o,"1D45C}{"2134}%
%    \end{macrocode}
%
% \subsubsection{Fractur or fraktur or blackletter: \cmd\mathfrak}
% \begin{example}{}
%   \setmathfont{Cambria Math}
%   $\mathfrak{ABCDEFGHIJKLMNOPQRSTUVWXYZ}$ \\
%   $\mathfrak{abcdefghijklmnopqrstuvwxyz}$ \\
% \end{example}
%
% Letters, with exceptions $\{\mathfrak{C,H,I,R,Z}\}$:
%    \begin{macrocode}
\um@setmathalphs{\mathfrak}{\um@usv@upLatin,\um@usv@itLatin}{26}{\um@usv@frakLatin}%
\SetMathAlphChar{\mathfrak}{`\C,"1D436}{"212D}%
\SetMathAlphChar{\mathfrak}{`\H,"1D43B}{"210C}%
\SetMathAlphChar{\mathfrak}{`\I,"1D43C}{"2111}%
\SetMathAlphChar{\mathfrak}{`\R,"1D445}{"211C}%
\SetMathAlphChar{\mathfrak}{`\Z,"1D44D}{"2128}%
\um@setmathalphs{\mathfrak}{\um@usv@uplatin,\um@usv@itlatin}{26}{\um@usv@fraklatin}%
%    \end{macrocode}
%
% \subsubsection{Sans serif: \cmd\mathsf}
% \begin{example}{}
%   \setmathfont{Cambria Math}
%   $\mathsf{0123456789}$ \\
%   $\mathsf{ABCDEFGHIJKLMNOPQRSTUVWXYZ}$ \\
%   $\mathsf{abcdefghijklmnopqrstuvwxyz}$ \\
% \end{example}
%    \begin{macrocode}
\um@setmathalphs{\mathsf}{\um@usv@num}{10}{\um@usv@sfnum}%
\um@setmathalphs{\mathsf}{\um@usv@upLatin,\um@usv@itLatin}{26}{\um@usv@sfLatin}%
\um@setmathalphs{\mathsf}{\um@usv@uplatin,\um@usv@itlatin}{26}{\um@usv@sflatin}%
%    \end{macrocode}
%
% \subsubsection{Sans serif italic: \cmd\mathsfit}
% \begin{example}{}
%   \setmathfont{Cambria Math}
%   $\mathsfit{0123456789}$ \\
%   $\mathsfit{ABCDEFGHIJKLMNOPQRSTUVWXYZ}$ \\
%   $\mathsfit{abcdefghijklmnopqrstuvwxyz}$ \\
% \end{example}
%    \begin{macrocode}
\um@setmathalphs{\mathsfit}{\um@usv@num}{10}{\um@usv@sfnum}%
\um@setmathalphs{\mathsfit}{\um@usv@upLatin,\um@usv@itLatin}{26}{\um@usv@sfitLatin}%
\um@setmathalphs{\mathsfit}{\um@usv@uplatin,\um@usv@itlatin}{26}{\um@usv@sfitlatin}%
%    \end{macrocode}
%
% \subsubsection{Typewriter or monospaced: \cmd\mathtt}
% \begin{example}{}
%   \setmathfont{Code2001}% ugly
%   $\mathtt{0123456789}$ \\
%   $\mathtt{ABCDEFGHIJKLMNOPQRSTUVWXYZ}$ \\
%   $\mathtt{abcdefghijklmnopqrstuvwxyz}$ \\
% \end{example}
%    \begin{macrocode}
\um@setmathalphs{\mathtt}{\um@usv@num}{10}{\um@usv@ttnum}%
\um@setmathalphs{\mathtt}{\um@usv@upLatin,\um@usv@itLatin}{26}{\um@usv@ttLatin}%
\um@setmathalphs{\mathtt}{\um@usv@uplatin,\um@usv@itlatin}{26}{\um@usv@ttlatin}%
%    \end{macrocode}
%
% \subsection{Bold alphabets' character mappings}
% \seclabel{bfmathmap}
%
% \subsubsection{Bold: \cmd\mathbf}
% \begin{example}{}
%   \setmathfont{Cambria Math}
%   $\mathbf{0123456789}$ \\
%   $\mathbf{ABCDEFGHIJKLMNOPQRSTUVWXYZ}$ \\
%   $\mathbf{abcdefghijklmnopqrstuvwxyz}$ \\
%   $\mathbf{ΑΒΓΔΕΖΗΘΙΚΛΜΝΞΟΠΡΣΤΥΦΧΨΩ}$\quad$\mathbf{ϴϜ}$ \\
%   $\mathbf{αβγδεζηθικλμνξοπρστυφχψω}$\quad$\mathbf{ϵϑϰϕϱϖϝ}$ \\
% \end{example}
%
%    \begin{macrocode}
  \um@setmathalphs{\mathbf}{\um@usv@num}{10}{\um@usv@bfnum}%
  \SetMathAlphChar{\mathbf}{\um@usv@Digamma}{"1D7CA}%
  \SetMathAlphChar{\mathbf}{\um@usv@digamma}{"1D7CB}%
\if@um@bfliteral
  \um@setmathalphs{\mathbf}{\um@usv@upLatin}{26}{\um@usv@bfLatin}%
  \um@setmathalphs{\mathbf}{\um@usv@itLatin}{26}{\um@usv@bfitLatin}%
  \um@setmathalphs{\mathbf}{\um@usv@uplatin}{26}{\um@usv@bflatin}%
  \um@setmathalphs{\mathbf}{\um@usv@itlatin}{26}{\um@usv@bfitlatin}%
  \um@setmathalphs{\mathbf}{\um@usv@upGreek}{25}{\um@usv@bfGreek}%
  \um@setmathalphs{\mathbf}{\um@usv@itGreek}{25}{\um@usv@bfitGreek}%
  \um@setmathalphs{\mathbf}{\um@usv@upgreek}{25}{\um@usv@bfgreek}%
  \um@setmathalphs{\mathbf}{\um@usv@itgreek}{25}{\um@usv@bfitgreek}%
  \SetMathAlphChar{\mathbf}{\um@usv@ith}{"1D489}%
  \SetMathAlphChar{\mathbf}{\um@usv@varTheta}{"1D6B9}%
  \SetMathAlphChar{\mathbf}{\um@usv@Nabla}{"1D6C1}%
  \SetMathAlphChar{\mathbf}{\um@usv@Digamma}{"1D7CA}%
  \SetMathAlphChar{\mathbf}{\um@usv@partial}{"1D6DB}%
  \SetMathAlphChar{\mathbf}{\um@usv@varepsilon}{"1D6DC}%
  \SetMathAlphChar{\mathbf}{\um@usv@vartheta}{"1D6DD}%
  \SetMathAlphChar{\mathbf}{\um@usv@varkappa}{"1D6DE}%
  \SetMathAlphChar{\mathbf}{\um@usv@varphi}{"1D6DF}%
  \SetMathAlphChar{\mathbf}{\um@usv@varrho}{"1D6E0}%
  \SetMathAlphChar{\mathbf}{\um@usv@varpi}{"1D6E1}%
  \SetMathAlphChar{\mathbf}{\um@usv@digamma}{"1D7CB}%
\else
  \if@um@bfupLatin
    \um@setmathalphs{\mathbf}{\um@usv@upLatin,\um@usv@itLatin}{26}{\um@usv@bfLatin}%
  \else
    \um@setmathalphs{\mathbf}{\um@usv@upLatin,\um@usv@itLatin}{26}{\um@usv@bfitLatin}%  
  \fi
  \if@um@bfuplatin
    \um@setmathalphs{\mathbf}{\um@usv@uplatin,\um@usv@itlatin}{26}{\um@usv@bflatin}%
    \SetMathAlphChar{\mathbf}{\um@usv@ith}{"1D421}%
  \else
    \um@setmathalphs{\mathbf}{\um@usv@uplatin,\um@usv@itlatin}{26}{\um@usv@bfitlatin}%
    \SetMathAlphChar{\mathbf}{\um@usv@ith}{"1D489}%
  \fi  
  \if@um@bfupGreek
    \um@setmathalphs{\mathbf}{\um@usv@upGreek,\um@usv@itGreek}{25}{\um@usv@bfGreek}%
    \SetMathAlphChar{\mathbf}{\um@usv@varTheta,\um@usv@itvarTheta}{"1D6B9}%
  \else
    \um@setmathalphs{\mathbf}{\um@usv@upGreek,\um@usv@itGreek}{25}{\um@usv@bfitGreek}%  
    \SetMathAlphChar{\mathbf}{\um@usv@varTheta,\um@usv@itvarTheta}{"1D72D}%
  \fi
  \if@um@bfupgreek
    \um@setmathalphs{\mathbf}{\um@usv@upgreek,\um@usv@itgreek}{25}{\um@usv@bfgreek}%
    \SetMathAlphChar{\mathbf}{\um@usv@varepsilon,\um@usv@itvarepsilon}{"1D6DC}%
    \SetMathAlphChar{\mathbf}{\um@usv@vartheta,\um@usv@itvartheta}{"1D6DD}%
    \SetMathAlphChar{\mathbf}{\um@usv@varkappa,\um@usv@itvarkappa}{"1D6DE}%
    \SetMathAlphChar{\mathbf}{\um@usv@varphi,\um@usv@itvarphi}{"1D6DF}%
    \SetMathAlphChar{\mathbf}{\um@usv@varrho,\um@usv@itvarrho}{"1D6E0}%
    \SetMathAlphChar{\mathbf}{\um@usv@varpi,\um@usv@itvarpi}{"1D6E1}%
  \else
    \um@setmathalphs{\mathbf}{\um@usv@upgreek,\um@usv@itgreek}{25}{\um@usv@bfitgreek}%
    \SetMathAlphChar{\mathbf}{\um@usv@varepsilon,\um@usv@itvarepsilon}{"1D750}%
    \SetMathAlphChar{\mathbf}{\um@usv@vartheta,\um@usv@itvartheta}{"1D751}%
    \SetMathAlphChar{\mathbf}{\um@usv@varkappa,\um@usv@itvarkappa}{"1D752}%
    \SetMathAlphChar{\mathbf}{\um@usv@varphi,\um@usv@itvarphi}{"1D753}%
    \SetMathAlphChar{\mathbf}{\um@usv@varrho,\um@usv@itvarrho}{"1D754}%
    \SetMathAlphChar{\mathbf}{\um@usv@varpi,\um@usv@itvarpi}{"1D755}%
  \fi  
\fi
%  \SetMathAlphChar{\mathbf}{\um@usv@Nabla}{"1D6C1}%
%  \SetMathAlphChar{\mathbf}{\um@usv@partial}{"1D6DB}%
%  \SetMathAlphChar{\mathbf}{\um@usv@itNabla}{"1D6C1}%
%  \SetMathAlphChar{\mathbf}{\um@usv@itpartial}{"1D6DB}%
%    \end{macrocode}
%
%
%
% \subsubsection{Bold Italic: \cmd\mathbfit}
% \begin{example}{}
%   \setmathfont{Cambria Math}
%   $\mathbfit{0123456789}$ \\
%   $\mathbfit{ABCDEFGHIJKLMNOPQRSTUVWXYZ}$ \\
%   $\mathbfit{abcdefghijklmnopqrstuvwxyz}$ \\
%   $\mathbfit{ΑΒΓΔΕΖΗΘΙΚΛΜΝΞΟΠΡΣΤΥΦΧΨΩ}$\quad$\mathbfit{ϴ}$ \\
%   $\mathbfit{αβγδεζηθικλμνξοπρστυφχψω}$\quad$\mathbfit{ϵϑϰϕϱϖ}$ \\
% \end{example}
%
%    \begin{macrocode}
\um@setmathalphs{\mathbfit}{\um@usv@num}{10}{\um@usv@bfnum}%
\um@setmathalphs{\mathbfit}{\um@usv@upLatin,\um@usv@itLatin}{26}{\um@usv@bfitLatin}%
\um@setmathalphs{\mathbfit}{\um@usv@uplatin,\um@usv@itlatin}{26}{\um@usv@bfitlatin}%
\um@setmathalphs{\mathbfit}{\um@usv@upGreek,\um@usv@itGreek}{25}{\um@usv@bfitGreek}%
\um@setmathalphs{\mathbfit}{\um@usv@upgreek,\um@usv@itgreek}{25}{\um@usv@bfitgreek}%
\um@setmathalphs{\mathbfit}{\um@usv@bfLatin}{26}{\um@usv@bfitLatin}%
\um@setmathalphs{\mathbfit}{\um@usv@bflatin}{26}{\um@usv@bfitlatin}%
\um@setmathalphs{\mathbfit}{\um@usv@bfGreek}{25}{\um@usv@bfitGreek}%
\um@setmathalphs{\mathbfit}{\um@usv@bfgreek}{25}{\um@usv@bfitgreek}%
\SetMathAlphChar{\mathbfit}{\um@usv@varTheta}{"1D72D}%
\SetMathAlphChar{\mathbfit}{\um@usv@Nabla}{\um@usv@bfitNabla}%
\SetMathAlphChar{\mathbfit}{\um@usv@partial}{"1D74F}%
\SetMathAlphChar{\mathbfit}{\um@usv@varepsilon}{"1D750}%
\SetMathAlphChar{\mathbfit}{\um@usv@vartheta}{"1D751}%
\SetMathAlphChar{\mathbfit}{\um@usv@varkappa}{"1D752}%
\SetMathAlphChar{\mathbfit}{\um@usv@varphi}{"1D753}%
\SetMathAlphChar{\mathbfit}{\um@usv@varrho}{"1D754}%
\SetMathAlphChar{\mathbfit}{\um@usv@varpi}{"1D755}%
%    \end{macrocode}
%: TODO: bold symbols to bold+ symbols
%
% \subsubsection{Bold fractur or fraktur or blackletter: \cmd\mathbffrak}
%
% \begin{example}{}
%   \setmathfont{Cambria Math}
%   $\mathbffrak{ABCDEFGHIJKLMNOPQRSTUVWXYZ}$ \\
%   $\mathbffrak{abcdefghijklmnopqrstuvwxyz}$ \\
% \end{example}
%
%    \begin{macrocode}
\um@setmathalphs{\mathbffrak}{\um@usv@num}{10}{\um@usv@bfnum}%
\um@setmathalphs{\mathbffrak}{\um@usv@upLatin, \um@usv@itLatin,\um@usv@frakLatin}{26}{\um@usv@bffrakLatin}%
\um@setmathalphs{\mathbffrak}{\um@usv@uplatin,\um@usv@itlatin,\um@usv@fraklatin}{26}{\um@usv@bffraklatin}%
%    \end{macrocode}
%
% \subsubsection{Bold script or calligraphic: \cmd\mathbfscr}
% \begin{example}{}
%   \setmathfont{Cambria Math}
%   $\mathbfscr{ABCDEFGHIJKLMNOPQRSTUVWXYZ}$ \\
%   $\mathbfscr{abcdefghijklmnopqrstuvwxyz}$ \\
% \end{example}
%    \begin{macrocode}
\um@setmathalphs{\mathbfscr}{\um@usv@num}{10}{\um@usv@bfnum}%
\um@setmathalphs{\mathbfscr}{\um@usv@upLatin,\um@usv@itLatin}{26}{\um@usv@bfscrLatin}%
\um@setmathalphs{\mathbfscr}{\um@usv@uplatin,\um@usv@itlatin}{26}{\um@usv@bfscrlatin}%
%    \end{macrocode}
%
% \subsubsection{Bold sans serif: \cmd\mathbfsf}
% \begin{example}{}
%   \setmathfont{Cambria Math}
%   $\mathbfsf{0123456789}$ \\
%   $\mathbfsf{ABCDEFGHIJKLMNOPQRSTUVWXYZ}$ \\
%   $\mathbfsf{abcdefghijklmnopqrstuvwxyz}$ \\
%   $\mathbfsf{ΑΒΓΔΕΖΗΘΙΚΛΜΝΞΟΠΡΣΤΥΦΧΨΩ}$\quad$\mathbfsf{ϴ}$ \\
%   $\mathbfsf{αβγδεζηθικλμνξοπρστυφχψω}$\quad$\mathbfsf{ϵϑϰϕϱϖ}$ \\
% \end{example}
%
% Numbers: (always upright)
%    \begin{macrocode}
\um@setmathalphs{\mathbfsf}{\um@usv@num}{10}{\um@usv@bfnum}%
\um@setmathalphs{\mathbfsf}{\um@usv@upLatin,\um@usv@itLatin}{26}{\um@usv@bfsfLatin}%
\um@setmathalphs{\mathbfsf}{\um@usv@uplatin,\um@usv@itlatin}{26}{\um@usv@bfsflatin}%
\um@setmathalphs{\mathbfsf}{\um@usv@upGreek,\um@usv@itGreek}{25}{\um@usv@bfsfGreek}%
\um@setmathalphs{\mathbfsf}{\um@usv@upgreek,\um@usv@itgreek}{25}{\um@usv@bfsfgreek}%
%    \end{macrocode}
% Theta symbol:
%    \begin{macrocode}
\SetMathAlphChar{\mathbfsf}{\um@usv@varTheta}{"1D767}%
%    \end{macrocode}
% Nabla:
%    \begin{macrocode}
\SetMathAlphChar{\mathbfsf}{\um@usv@Nabla}{"1D76F}%
%    \end{macrocode}
% Partial, epsilon symbol, theta symbol, kappa symbol, phi symbol, rho symbol, pi symbol:
%    \begin{macrocode}
\SetMathAlphChar{\mathbfsf}{\um@usv@partial}{"1D789}%
\SetMathAlphChar{\mathbfsf}{\um@usv@varepsilon}{"1D78A}%
\SetMathAlphChar{\mathbfsf}{\um@usv@vartheta}{"1D78B}%
\SetMathAlphChar{\mathbfsf}{\um@usv@varkappa}{"1D78C}%
\SetMathAlphChar{\mathbfsf}{\um@usv@varphi}{"1D78D}%
\SetMathAlphChar{\mathbfsf}{\um@usv@varrho}{"1D78E}%
\SetMathAlphChar{\mathbfsf}{\um@usv@varpi}{"1D78F}%
%    \end{macrocode}
%
%
% \subsubsection{Bold italic sans serif: \cmd\mathbfsfit}
% \begin{example}{}
%   \setmathfont{Cambria Math}
%   $\mathbfsfit{0123456789}$ \\
%   $\mathbfsfit{ABCDEFGHIJKLMNOPQRSTUVWXYZ}$ \\
%   $\mathbfsfit{abcdefghijklmnopqrstuvwxyz}$ \\
%   $\mathbfsfit{ΑΒΓΔΕΖΗΘΙΚΛΜΝΞΟΠΡΣΤΥΦΧΨΩ}$\quad$\mathbfsfit{ϴ}$ \\
%   $\mathbfsfit{αβγδεζηθικλμνξοπρστυφχψω}$\quad$\mathbfsfit{ϵϑϰϕϱϖ}$ \\
% \end{example}
%    \begin{macrocode}
\um@setmathalphs{\mathbfsfit}{\um@usv@num}{10}{\um@usv@bfnum}%
\um@setmathalphs{\mathbfsfit}{\um@usv@upLatin,\um@usv@itLatin}{26}{\um@usv@bfsfitLatin}%
\um@setmathalphs{\mathbfsfit}{\um@usv@uplatin,\um@usv@itlatin}{26}{\um@usv@bfsfitlatin}%
\um@setmathalphs{\mathbfsfit}{\um@usv@upGreek,\um@usv@itGreek}{25}{\um@usv@bfsfitGreek}%
\um@setmathalphs{\mathbfsfit}{\um@usv@upgreek,\um@usv@itgreek}{25}{\um@usv@bfsfitgreek}%
%    \end{macrocode}
% Other symbols:
%    \begin{macrocode}
\SetMathAlphChar{\mathbfsfit}{\um@usv@varTheta}{"1D7A1}%
\SetMathAlphChar{\mathbfsfit}{\um@usv@Nabla}{"1D7A9}%
\SetMathAlphChar{\mathbfsfit}{\um@usv@partial}{"1D7C3}%
\SetMathAlphChar{\mathbfsfit}{\um@usv@varepsilon}{"1D7C4}%
\SetMathAlphChar{\mathbfsfit}{\um@usv@vartheta}{"1D7C5}%
\SetMathAlphChar{\mathbfsfit}{\um@usv@varkappa}{"1D7C6}%
\SetMathAlphChar{\mathbfsfit}{\um@usv@varphi}{"1D7C7}%
\SetMathAlphChar{\mathbfsfit}{\um@usv@varrho}{"1D7C8}%
\SetMathAlphChar{\mathbfsfit}{\um@usv@varpi}{"1D7C9}%
%    \end{macrocode}
%
%
%    \begin{macrocode}
}
%    \end{macrocode}
%
%
%    \begin{macrocode}
\AtBeginDocument{\setmathfont[Range=ALL]{Cambria Math}}
%    \end{macrocode}
%
%\iffalse
%</package>
%\fi
%
%
% 
% \iffalse
% \section{Verification}
%
% \renewcommand\DeclareUnicodeMathSymbol[4]{
%   \scshape\addfontfeature{Numbers=Monospaced}\MakeLowercase{#1} &
%   #2 & \cmd#2 & \scshape#4\\}
%
% \subsection{Plane 0}
% \setmathfont{Code2000}
% \begin{longtable}[l]{@{}cccp{6cm}@{}}
% \input unicode-math.tex
% \end{longtable}
% \fi
%
%
% \part{\STIX\ table data extraction}\label{part:awk-script}
%\iffalse
%<*awk-script>
%\fi
%
% The source for the \TeX\ names for the very large number of mathematical
% glyphs are provided via Barbara Beeton's table file for the \STIX\ project
% (|ams.org/STIX|). A version is located at
% |http://www.ams.org/STIX/bnb/stix-tbl.asc|
% but check |http://www.ams.org/STIX/| for more up-to-date info.
%
% A single file is produced containing all (more than 3298) symbols.
% Future optimisations might include generating various (possibly overlapping) subsets
% so not all definitions must be read just to redefine a small range of symbols.
% Performance for now seems to be acceptable without such measures.
%
%    \begin{macrocode}
#!/bin/sh

cat stix-tbl.asc |
awk '
%    \end{macrocode}
% If the USV isn't repeated (TODO: check this is valid!) and the entry isn't one of the weird ones in the big block at the end of the \STIX\ table (TODO: check that out!)\dots
% \changes{v0.1}{2007/01/21}{Ignore \cmd\text.. STIX commands.}
%    \begin{macrocode}
 {if (usv != substr($0,2,5) && substr($0,2,1) != " ")
    {usv = substr($0,2,5);
     texname = substr($0,84,25);
     class = substr($0,57,1);
     description = tolower(substr($0,233,350));
%    \end{macrocode}
% If the USV has a macro name, which isn't \cs{text...}, and isn't a single character macro (e.g., \cmd\#, \cmd\S, \dots), and has a class, and it isn't reserved (\ie, doubled up with a previously assigned glyph):
%    \begin{macrocode}
     if (texname      ~ /[\\]/ && 
         substr(texname,0,5) != "\\text"    && 
         substr(texname,3,1) != " "    &&
         class       != " "    && 
         description !~ /<reserved>/ )
%    \end{macrocode}
% Print the actual entry corresponding to the unicode character:
%    \begin{macrocode}
     print "\\UnicodeMathSymbol{\"" \
           usv "}{" \
           texname "}{" \
           class "}{" \
           description "}%";
    }}' - |
%    \end{macrocode}
% Now replace the \STIX\ class abbreviations with their \TeX\ macro names.
%    \begin{macrocode}
sed -e ' s/{N}/{\\mathord}/   ' \
%    \end{macrocode}
% A `fence' defined by the \STIX\ table is something like \cmd\vert; in \XeTeX\ this is just a \cmd\mathord\ that will grow with the magic of \cmd\XeTeXmathchardef.
%    \begin{macrocode}
    -e ' s/{F}/{\\mathord}/   ' \
    -e ' s/{A}/{\\mathalpha}/ ' \
    -e ' s/{P}/{\\mathpunct}/ ' \
    -e ' s/{B}/{\\mathbin}/   ' \
    -e ' s/{R}/{\\mathrel}/   ' \
    -e ' s/{L}/{\\mathop}/    ' \
    -e ' s/{O}/{\\mathopen}/  ' \
    -e ' s/{C}/{\\mathclose}/ ' > unicode-math.tex
%    \end{macrocode}
% \changes{v0.01}{2006/12/19}{Tidied up awk code}
%\iffalse
%</awk-script>
%\fi
%
% \appendix
%
% \section{Documenting maths support in the NFSS}
% \subsection{Overview}
% 
% In the following, \meta{NFSS decl.} stands for something like |{T1}{lmr}{m}{n}|.
%
% \begin{description}
% \item[Maths symbol fonts] Fonts for symbols: $\propto$, $\leq$, $\rightarrow$
%
% \cmd\DeclareSymbolFont\marg{name}\meta{NFSS decl.}\\
% Declares a named maths font such as |operators| from which symbols are defined with \cmd\DeclareMathSymbol.
%
% \item[Maths alphabet fonts] Fonts for {\font\1=cmmi10 at 10pt\1 ABC}\,–\,{\font\1=cmmi10 at 10pt\1 xyz}, {\font\1=eufm10 at 10pt\1 ABC}\,–\,{\font\1=cmsy10 at 10pt\1 XYZ}, etc.
%
% \cmd\DeclareMathAlphabet\marg{cmd}\meta{NFSS decl.}
%
% For commands such as \cmd\mathbf, accessed
% through maths mode that are unaffected by the current text font, and which are used for
% alphabetic symbols in the \ascii\ range.
%
% \cmd\DeclareSymbolFontAlphabet\marg{cmd}\marg{name}
%
% Alternative (and optimisation) for \cmd\DeclareMathAlphabet\ if a single font is being used
% for both alphabetic characters (as above) and symbols.
%
% \item[Maths `versions'] Different maths weights can be defined with the following, switched
% in text with the \cmd\mathversion\marg{maths version} command.
%
% \cmd\SetSymbolFont\marg{name}\marg{maths version}\meta{NFSS decl.}\\
% \cmd\SetMathAlphabet\marg{cmd}\marg{maths version}\meta{NFSS decl.}
%
% \item[Maths symbols] Symbol definitions in maths for both characters (=) and macros (\cmd\eqdef):
% \cmd\DeclareMathSymbol\marg{symbol}\marg{type}\marg{named font}\marg{slot}
% This is the macro that actually defines which font each symbol comes from and how they behave.
% \end{description}
% Delimiters and radicals use wrappers around \TeX's \cmd\delimiter/\cmd\radical\ primitives,
% which are re-designed in \XeTeX. The syntax used in \LaTeX's NFSS is therefore not so relevant here.
% \begin{description}
% \item[Delimiters] A special class of maths symbol which enlarge themselves in certain contexts.
%
% \cmd\DeclareMathDelimiter\marg{symbol}\marg{type}\marg{sym.\ font}\marg{slot}\marg{sym.\ font}\marg{slot}
%
% \item[Radicals] Similar to delimiters (\cmd\DeclareMathRadical\ takes the same syntax) but
% behave `weirdly'. \cmd\sqrt\ might very well be the only one.
% \end{description}
% In those cases, glyph slots in \emph{two} symbol fonts are required; one for the small (`regular') case,
% the other for situations when the glyph is larger. This is not the case in \XeTeX.
%
% Accents are not included yet.
%
% \subsection{Detailed code investigation}
% 
% This section contains an abridged and documented version
% of (bits and pieces of) \LaTeX's NFSS. Changes are mostly
% cosmetic and omission of irrelevant things.
% 
%
% \iffalse
%<*neveroutput>
% \fi
%
% \subsection{Maths symbols}
%
% \begin{macro}{\DeclareMathSymbol}
% \darg{Symbol, e.g., \cmd\alpha\ or `a'}
% \darg{Type, e.g., \cmd\mathalpha}
% \darg{Math font name, e.g., \texttt{operators}}
% \darg{Slot, e.g., \texttt{F1}}
%
 %   \begin{macrocode}
\def\DeclareMathSymbol#1#2#3#4{%
%    \end{macrocode}
% First ensure the math font (e.g., |operators|) exists:
%    \begin{macrocode}
  \expandafter\in@\csname sym#3\expandafter\endcsname
     \expandafter{\group@list}%
  \ifin@
%    \end{macrocode}
% Convert the slot number to two hex digits stored in 
% \cmd\count\cmd\z@\ and \cmd\count\cmd\tw@, respectively:
%    \begin{macrocode}
    \begingroup
      \count\z@=#4\relax
      \count\tw@\count\z@
      \divide\count\z@\sixt@@n
      \count@\count\z@
      \multiply\count@\sixt@@n
      \advance\count\tw@-\count@
%    \end{macrocode}
% The symbol to be defined can be either a command (|\alpha|) or a character (|a|).
% Branch for the former:
%    \begin{macrocode}
      \if\relax\noexpand#1% is command?
        \edef\reserved@a{\noexpand\in@{\string\mathchar}{\meaning#1}}%
        \reserved@a
%    \end{macrocode}
% If the symbol command definition contains \cmd\mathchar, then
% we can provide the info that a previous symbol definition is being overwritten:
%    \begin{macrocode}
        \ifin@
          \expandafter\set@mathsymbol
             \csname sym#3\endcsname#1#2%
             {\hexnumber@{\count\z@}\hexnumber@{\count\tw@}}%
          \@font@info{Redeclaring math symbol \string#1}%
%    \end{macrocode}
% Otherwise, throw an error if the command name is already taken by a non-symbol definition:
%    \begin{macrocode}
        \else
            \expandafter\ifx
            \csname\expandafter\@gobble\string#1\endcsname
            \relax
            \expandafter\set@mathsymbol
               \csname sym#3\endcsname#1#2%
               {\hexnumber@{\count\z@}\hexnumber@{\count\tw@}}%
          \else
            \@latex@error{Command `\string#1' already defined}\@eha
          \fi
        \fi
%    \end{macrocode}
% And if the symbol input is a character:
%    \begin{macrocode}
      \else
        \expandafter\set@mathchar
          \csname sym#3\endcsname#1#2
          {\hexnumber@{\count\z@}\hexnumber@{\count\tw@}}%
      \fi
    \endgroup
%    \end{macrocode}
% Everything previous was skipped if the maths font doesn't exist in the first place:
%    \begin{macrocode}
  \else
    \@latex@error{Symbol font `#3' is not defined}\@eha
  \fi}
%    \end{macrocode}
% \end{macro}
% The final macros that actually define the maths symbol with \TeX\ primitives.
% If the symbol definition is for a macro:
%    \begin{macrocode}
\def\set@mathsymbol#1#2#3#4{%
  \global\mathchardef#2"\mathchar@type#3\hexnumber@#1#4\relax}
%    \end{macrocode}
% Or if it's for a character:
%    \begin{macrocode}
\def\set@mathchar#1#2#3#4{%
  \global\mathcode‘#2="\mathchar@type#3\hexnumber@#1#4\relax}
%    \end{macrocode}
%
% \paragraph{Summary}
% For symbols, something like:
% \begin{verbatim}
% \def\DeclareMathSymbol#1#2#3#4{%
%   \global\mathchardef#1"\mathchar@type#2
%     \expandafter\hexnumber@\csname sym#2\endcsname
%     {\hexnumber@{\count\z@}\hexnumber@{\count\tw@}}}
% \end{verbatim}
% For characters, something like:
% \begin{verbatim}
% \def\DeclareMathSymbol#1#2#3#4{%
%   \global\mathcode`#1"\mathchar@type#2
%     \expandafter\hexnumber@\csname sym#2\endcsname
%     {\hexnumber@{\count\z@}\hexnumber@{\count\tw@}}}
% \end{verbatim}
%
% \subsection{Delimiters}
% The code here is slightly better documented originally than the other maths commands.
%
% \begin{macro}{\DeclareMathDelimiter}
%    \begin{macrocode}
\def\DeclareMathDelimiter#1{%
  \if\relax\noexpand#1%
    \expandafter\@DeclareMathDelimiter
  \else
    \expandafter\@xxDeclareMathDelimiter
  \fi
  #1}
\@onlypreamble\DeclareMathDelimiter
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\@xxDeclareMathDelimiter}
%    This macro checks if the second arg is a ``math type'' such 
%    as |\mathopen|. The undocumented original code didn't use math
%    types when the delimiter was a single letter.
%    For this reason the coding is a bit strange as it tries to
%    support the undocumented syntax for compatibility reasons.
%    \begin{macrocode}
\def\@xxDeclareMathDelimiter#1#2#3#4{%
%    \end{macrocode}
%    7 is the default value returned in the case that |\mathchar@type|
%    is passed something unexpected, like a math symbol font name.
%    We locally move |\mathalpha| out of the way so if you use that
%    the right branch is taken. This will still fail if an explicit
%    number |7| is used!
%    \begin{macrocode}
   \begingroup
    \let\mathalpha\mathord
    \ifnum7=\mathchar@type{#2}%
      \endgroup
%    \end{macrocode}
%    If this branch is taken we have old syntax (5 arguments).
%    \begin{macrocode}
      \expandafter\@firstofone
    \else
%    \end{macrocode}
%    If this branch is taken |\mathchar@type| is different from 7 so
%    we assume new syntax. In this case we also use the arguments to
%    set up the letter as a math symbol for the case where it is not
%    used as a delimiter.
%    \begin{macrocode}
      \endgroup
      \DeclareMathSymbol#1{#2}{#3}{#4}%
%    \end{macrocode}
%    Then we arrange that |\@xDeclareMathDelimiter| only gets |#1|, 
%    |#3|, |#4| \ldots\ as it does not expect a math type as argument.
%    \begin{macrocode}
      \expandafter\@firstoftwo
    \fi
    {\@xDeclareMathDelimiter#1}{#2}{#3}{#4}}
\@onlypreamble\@xxDeclareMathDelimiter
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\@DeclareMathDelimiter}
%    \begin{macrocode}
\def\@DeclareMathDelimiter#1#2#3#4#5#6{%
  \expandafter\in@\csname sym#3\expandafter\endcsname
     \expandafter{\group@list}%
  \ifin@
    \expandafter\in@\csname sym#5\expandafter\endcsname
       \expandafter{\group@list}%
    \ifin@
      \begingroup
        \count\z@=#4\relax
        \count\tw@\count\z@
        \divide\count\z@\sixt@@n
        \count@\count\z@
        \multiply\count@\sixt@@n
        \advance\count\tw@-\count@
        \edef\reserved@c{\hexnumber@{\count\z@}\hexnumber@{\count\tw@}}%
      %
        \count\z@=#6\relax
        \count\tw@\count\z@
        \divide\count\z@\sixt@@n
        \count@\count\z@
        \multiply\count@\sixt@@n
        \advance\count\tw@-\count@
        \edef\reserved@d{\hexnumber@{\count\z@}\hexnumber@{\count\tw@}}%
      %
        \edef\reserved@a{\noexpand\in@{\string\delimiter}{\meaning#1}}%
        \reserved@a
        \ifin@
          \expandafter\set@mathdelimiter
             \csname sym#3\expandafter\endcsname
             \csname sym#5\endcsname#1#2%
             \reserved@c\reserved@d
          \@font@info{Redeclaring math delimiter \string#1}%
        \else
            \expandafter\ifx
            \csname\expandafter\@gobble\string#1\endcsname
            \relax
            \expandafter\set@mathdelimiter
              \csname sym#3\expandafter\endcsname
              \csname sym#5\endcsname#1#2%
              \reserved@c\reserved@d
          \else
            \@latex@error{Command `\string#1' already defined}\@eha
          \fi
        \fi
      \endgroup
    \else
      \@latex@error{Symbol font `#5' is not defined}\@eha
    \fi
  \else
    \@latex@error{Symbol font `#3' is not defined}\@eha
  \fi
}
\@onlypreamble\@DeclareMathDelimiter
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\@xDeclareMathDelimiter}
%    \begin{macrocode}
\def\@xDeclareMathDelimiter#1#2#3#4#5{%
  \expandafter\in@\csname sym#2\expandafter\endcsname
     \expandafter{\group@list}%
  \ifin@
    \expandafter\in@\csname sym#4\expandafter\endcsname
       \expandafter{\group@list}%
    \ifin@
      \begingroup
        \count\z@=#3\relax
        \count\tw@\count\z@
        \divide\count\z@\sixt@@n
        \count@\count\z@
        \multiply\count@\sixt@@n
        \advance\count\tw@-\count@
        \edef\reserved@c{\hexnumber@{\count\z@}\hexnumber@{\count\tw@}}%
      %
        \count\z@=#5\relax
        \count\tw@\count\z@
        \divide\count\z@\sixt@@n
        \count@\count\z@
        \multiply\count@\sixt@@n
        \advance\count\tw@-\count@
        \edef\reserved@d{\hexnumber@{\count\z@}\hexnumber@{\count\tw@}}%
        \expandafter\set@@mathdelimiter
           \csname sym#2\expandafter\endcsname\csname sym#4\endcsname#1%
           \reserved@c\reserved@d
      \endgroup
    \else
      \@latex@error{Symbol font `#4' is not defined}\@eha
    \fi
  \else
    \@latex@error{Symbol font `#2' is not defined}\@eha
  \fi
}
\@onlypreamble\@xDeclareMathDelimiter
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\set@mathdelimiter}
%    We have to end the definition of a math delimiter like |\lfloor|
%    with a space and not with |\relax| as we did before, because
%    otherwise contructs involving |\abovewithdelims| will prematurely
%    end (pr/1329)
%    \begin{macrocode}
\def\set@mathdelimiter#1#2#3#4#5#6{%
  \xdef#3{\delimiter"\mathchar@type#4\hexnumber@#1#5%
                                     \hexnumber@#2#6 }}
\@onlypreamble\set@mathdelimiter
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\set@@mathdelimiter}
%    \begin{macrocode}
\def\set@@mathdelimiter#1#2#3#4#5{%
  \global\delcode`#3="\hexnumber@#1#4\hexnumber@#2#5\relax}
\@onlypreamble\set@@mathdelimiter
%    \end{macrocode}
% \end{macro}
%
%
% \subsection{Symbol fonts}
%
% \begin{macro}{\DeclareSymbolFont}
% \darg{font name, \eg, \texttt{letters}}
% \darg{font encoding, \eg, \texttt{OT1}}
% \darg{font family, \eg, \texttt{cmr}}
% \darg{font series, \eg, \texttt{m}}
% \darg{font shape, \eg, \texttt{n}}
%    \begin{macrocode}
\def\DeclareSymbolFont#1#2#3#4#5{%
%    \end{macrocode}
% First check that the font encoding is defined.
%    \begin{macrocode}
 \@tempswafalse
 \edef\reserved@b{#2}%
 \def\cdp@elt##1##2##3##4{\def\reserved@c{##1}%
      \ifx\reserved@b\reserved@c \@tempswatrue\fi}%
 \cdp@list
%    \end{macrocode}
% So far so good. Now branch depending if this symbol font has been declared yet or not. If not,
% the symbol font is defined as the macro |\sym#1|; \ie, for the |letters| symbol font,
% the associated command name is |\symletters|. (Funny it's not |\sym@#1|.)
%    \begin{macrocode}
 \if@tempswa
   \@ifundefined{sym#1}{%
      \expandafter\new@mathgroup\csname sym#1\endcsname
      \expandafter\new@symbolfont\csname sym#1\endcsname{#2}{#3}{#4}{#5}%
   }%
%    \end{macrocode}
% If the symbol font has been already declared:
%    \begin{macrocode}
     {\@font@info{Redeclaring symbol font `#1'}%
%    \end{macrocode}
% 
% [Update the group list.]
%    \begin{macrocode}
      \def\group@elt##1##2{%
           \noexpand\group@elt\noexpand##1%
           \expandafter\ifx\csname sym#1\endcsname##1%
             \expandafter\noexpand\csname#2/#3/#4/#5\endcsname
           \else
               \noexpand##2%
           \fi}%
      \xdef\group@list{\group@list}%
%    \end{macrocode}
% [Update the version list.]
%    \begin{macrocode}
      \def\version@elt##1{%
          \expandafter
          \SetSymbolFont@\expandafter##1\csname#2/#3/#4/#5\expandafter
              \endcsname \csname sym#1\endcsname
          }%
      \version@list
     }%
%    \end{macrocode}
% If the font encoding wasn't defined, all of the above was skipped.
%    \begin{macrocode}
  \else
    \@latex@error{Encoding scheme  `#2' unknown}\@eha
  \fi}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\new@symbolfont}
% \darg{internal symbol font name, \eg, \cmd\symletters}
% \darg{font encoding, \eg, \texttt{OT1}}
% \darg{font family, \eg, \texttt{cmr}}
% \darg{font series, \eg, \texttt{m}}
% \darg{font shape, \eg, \texttt{n}}
%    \begin{macrocode}
\def\new@symbolfont#1#2#3#4#5{%
%    \end{macrocode}
% Update the group list:
%    \begin{macrocode}
    \toks@\expandafter{\group@list}%
    \edef\group@list{\the\toks@\noexpand\group@elt\noexpand#1%
                     \expandafter\noexpand\csname#2/#3/#4/#5\endcsname}%
%    \end{macrocode}
% 
%    \begin{macrocode}
    \def\version@elt##1{\toks@\expandafter{##1}%
                   \edef##1{\the\toks@\noexpand\getanddefine@fonts
                   #1\expandafter\noexpand\csname#2/#3/#4/#5\endcsname}%
                  \global\advance\csname c@\expandafter
                                 \@gobble\string##1\endcsname\@ne
                 }%
    \version@list}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\SetSymbolFont}
% \darg{math font version, \eg, \texttt{normal}}
% \darg{font name, \eg, \texttt{letters}}
% \darg{font encoding, \eg, \texttt{OT1}}
% \darg{font family, \eg, \texttt{cmr}}
% \darg{font series, \eg, \texttt{m}}
% \darg{font shape, \eg, \texttt{n}}
%    \begin{macrocode}
\def\SetSymbolFont#1#2#3#4#5#6{%
 \@tempswafalse
 \edef\reserved@b{#3}%
 \def\cdp@elt##1##2##3##4{\def\reserved@c{##1}%
      \ifx\reserved@b\reserved@c \@tempswatrue\fi}%
 \cdp@list
 \if@tempswa
  \expandafter\SetSymbolFont@
    \csname mv@#2\expandafter\endcsname\csname#3/#4/#5/#6\expandafter
    \endcsname \csname sym#1\endcsname
 \else
  \@latex@error{Encoding scheme  `#3' unknown}\@eha
 \fi
}
%    \end{macrocode}
% \end{macro}
%
%
%
% \begin{macro}{\SetSymbolFont@}
% \darg{internal math font version, \eg, \cmd\mv@normal}
% \darg{NFSS font, \eg, \cs{OT1/cmr/m/n}}
% \darg{internal symbol name, \eg, \cmd\symletters}
%    \begin{macrocode}
\def\SetSymbolFont@#1#2#3{%
%    \end{macrocode}
% If the maths version has been defined:
%    \begin{macrocode}
  \expandafter\in@\expandafter#1\expandafter{\version@list}%
  \ifin@
%    \end{macrocode}
% If the symbol font has been defined:
%    \begin{macrocode}
    \expandafter\in@\expandafter#3\expandafter{\group@list}%
    \ifin@
      \begingroup
        \expandafter\get@cdp\string#2\@nil\reserved@a
        \toks@{}%
        \def\install@mathalphabet##1##2{%
             \addto@hook\toks@{\install@mathalphabet##1{##2}}%
            }%
        \def\getanddefine@fonts##1##2{%
          \ifnum##1=#3%
             \addto@hook\toks@{\getanddefine@fonts#3#2}%
             \expandafter\get@cdp\string##2\@nil\reserved@b
             \ifx\reserved@a\reserved@b\else
                \@font@warning{Encoding `\reserved@b' has changed
                    to `\reserved@a' for symbol font\MessageBreak
                   `\expandafter\@gobblefour\string#3' in the
                    math version `\expandafter
                    \@gobblefour\string#1'}%
             \fi
             \@font@info{%
                Overwriting symbol font
                `\expandafter\@gobblefour\string#3' in
                 version `\expandafter
                \@gobblefour\string#1'\MessageBreak
                \@spaces \expandafter\@gobble\string##2 -->
                         \expandafter\@gobble\string#2}%
          \else
             \addto@hook\toks@{\getanddefine@fonts##1##2}%
          \fi}%
         #1%
         \xdef#1{\the\toks@}%
      \endgroup
%    \end{macrocode}
% If the symbol font wasn't defined, all of the above was skipped:
%    \begin{macrocode}
    \else
       \@latex@error{Symbol font `\expandafter\@gobblefour\string#3' 
                  not defined}\@eha
    \fi
%    \end{macrocode}
% If the maths version wasn't defined, all of the above was skipped:
%    \begin{macrocode}
  \else
    \@latex@error{Math version ‘\expandafter\@gobblefour\string#1’
       is not
       defined}{You probably mispelled the name of the math
       version.^^JOr you have to specify an additional package.}%
  \fi}
%    \end{macrocode}
% \end{macro}
%
%
% \iffalse
%</neveroutput>
% \fi
%
% \clearpage
% \PrintChanges
%
% \clearpage
% \PrintIndex
%
% \Finale
%
%\iffalse
%
%<*test>
%    \begin{macrocode}
\documentclass{article}
\usepackage[a6paper]{geometry}
\usepackage{fontspec}
\setmainfont{FPL Neu}
\usepackage{unicode-math}
\def\uplatin{abcdefghijklmnopqrstuvwxyz}
\def\upLatin{ABCDEFGHIJKLMNOPQRSTUVWXYZ}
\def\upGreek{ΑΒΓΔΕΖΗΘΙΚΛΜΝΞΟΠΡΣΤΥΦΧΨΩϴ}
\def\upgreek{αβγδεζηθικλμνξοπρςστυφχψωϵϑϰϕϱϖ}
\def\itLatin{𝐴𝐵𝐶𝐷𝐸𝐹𝐺𝐻𝐼𝐽𝐾𝐿𝑀𝑁𝑂𝑃𝑄𝑅𝑆𝑇𝑈𝑉𝑊𝑋𝑌𝑍}
\def\itlatin{𝑎𝑏𝑐𝑑𝑒𝑓𝑔ℎ𝑖𝑗𝑘𝑙𝑚𝑛𝑜𝑝𝑞𝑟𝑠𝑡𝑢𝑣𝑤𝑥𝑦𝑧}
\def\itGreek{𝛢𝛣𝛤𝛥𝛦𝛧𝛨𝛩𝛪𝛫𝛬𝛭𝛮𝛯𝛰𝛱𝛲𝛴𝛵𝛶𝛷𝛸𝛹𝛺𝛳}
\def\itgreek{𝛼𝛽𝛾𝛿𝜀𝜁𝜂𝜃𝜄𝜅𝜆𝜇𝜈𝜉𝜊𝜋𝜌𝜍𝜎𝜏𝜐𝜑𝜒𝜓𝜔𝜖𝜗𝜘𝜙𝜚𝜛}
\providecommand\mathalphabet[1]{#1}
\def\testmath#1{%
  \makebox[\linewidth][l]{%
    \makebox[0pt][l]{$\mathalphabet{\csname up#1\endcsname}$}%
    \makebox[0pt][l]{$\mathalphabet{\csname it#1\endcsname}$}}}
\begin{document}
\setmathfont[Colour=2255FF55]{Cambria Math}
\parindent=0pt
\voffset=-1in
\hoffset=-1in
\setbox0=\vbox{%
\testmath{Latin}\\
\testmath{latin}\\
\testmath{Greek}\\
\testmath{greek}}
\dimen0=\ht0
\advance\dimen0\dp0
\edef\papersize{papersize=\the\wd0,\the\dimen0}
\setbox255=\vbox{\special{\papersize}\box0}
\shipout\box255
\end{document}
%    \end{macrocode}
%</test>
%
%<*test-iso>
%    \begin{macrocode}
\PassOptionsToPackage{math-style=ISO}{unicode-math}
\input unicode-math-test.ltx
%    \end{macrocode}
%</test-iso>
%
%<*test-tex>
%    \begin{macrocode}
\PassOptionsToPackage{math-style=TeX}{unicode-math}
\input unicode-math-test.ltx
%    \end{macrocode}
%</test-tex>
%
%<*test-french>
%    \begin{macrocode}
\PassOptionsToPackage{math-style=French}{unicode-math}
\input unicode-math-test.ltx
%    \end{macrocode}
%</test-french>
%
%<*testbf-iso>
%    \begin{macrocode}
\PassOptionsToPackage{bold-style=ISO}{unicode-math}
\def\mathalphabet{\mathbf}
\input unicode-math-test.ltx
%    \end{macrocode}
%</testbf-iso>
%
%<*testbf-tex>
%    \begin{macrocode}
\PassOptionsToPackage{bold-style=TeX}{unicode-math}
\def\mathalphabet{\mathbf}
\input unicode-math-test.ltx
%    \end{macrocode}
%</testbf-tex>
%
%<*testbf-french>
%    \begin{macrocode}
\PassOptionsToPackage{bold-style=French}{unicode-math}
\def\mathalphabet{\mathbf}
\input unicode-math-test.ltx
%    \end{macrocode}
%</testbf-french>
%
%
%
%
%<*dtx-style>
%    \begin{macrocode}
\ProvidesPackage{dtx-style}

\errorcontextlines=999

\def\@dotsep{1000}
\setcounter{tocdepth}{2}
\setlength\columnseprule{0.4pt}
\renewcommand\tableofcontents{\relax
  \begin{multicols}{2}[\section*{\contentsname}]\relax
    \@starttoc{toc}\relax
  \end{multicols}}

\setcounter{IndexColumns}{2}
\renewenvironment{theglossary}
  {\small\list{}{}
     \item\relax
     \glossary@prologue\GlossaryParms 
     \let\item\@idxitem \ignorespaces 
     \def\pfill{\hspace*{\fill}}}
  {\endlist}

\usepackage[svgnames]{xcolor}
\usepackage{array,booktabs,calc,enumitem,fancyvrb,graphicx,ifthen,longtable,refstyle,subfig,topcapt,varioref}
\usepackage{fontspec,xltxtra,xunicode,unicode-math}

%\usepackage[rm,small]{titlesec}

\setromanfont[Mapping=tex-text,Numbers=Lowercase]{FPL Neu}
\setsansfont[Scale=MatchLowercase,Mapping=tex-text]{Lucida Sans}
\setmonofont[Scale=MatchLowercase]{Lucida Sans Typewriter}

\linespread{1.069}      % A bit more space between lines
\frenchspacing         % Remove ugly extra space after punctuation
  
\definecolor{niceblue}{rgb}{0.2,0.4,0.8}
\newenvironment{example}[1]
  {\VerbatimEnvironment
   \def\Options{#1}%
   \begin{VerbatimOut}[gobble=4]{\examplefilename}}
  {\end{VerbatimOut}\relax
   \typesetexample}

\def\theCodelineNo{\textcolor{niceblue}{\sffamily\tiny\arabic{CodelineNo}}}

\let\examplesize\normalsize
\let\auxwidth\relax

\newlength\examplewidth\newlength\verbatimwidth
\newlength\exoutdent   \newlength\exverbgap
\setlength\exverbgap{1em}
\setlength\exoutdent{-0.15\textwidth}
\newsavebox\verbatimbox
\edef\examplefilename{\jobname.example}

\newcommand\typesetexample{\relax
   \smallskip
   \noindent
   \begin{minipage}{\linewidth}
   \color{niceblue}
   \hrulefill\par
   \edef\@tempa{[gobble=0,fontsize=\noexpand\scriptsize,\Options]}%
   \begin{lrbox}{\verbatimbox}\relax
     \expandafter\BVerbatimInput\@tempa{\examplefilename}%
   \end{lrbox}
   \begin{list}{}{\setlength\itemindent{0pt}
                  \setlength\leftmargin\exoutdent
                  \setlength\rightmargin{0pt}}\item
   \ifx\auxwidth\relax
     \setlength\verbatimwidth{\wd\verbatimbox}%
   \else
     \setlength\verbatimwidth{\auxwidth}%
   \fi
   \begin{minipage}[c]{\textwidth-\exoutdent-\verbatimwidth-\exverbgap}
     \catcode`\%=14\centering\input\examplefilename\relax
   \end{minipage}\hfill
   \begin{minipage}[c]{\verbatimwidth}
     \usebox\verbatimbox
   \end{minipage}
   \end{list}
   \par\noindent\hrulefill
   \end{minipage}
   \smallskip}

\newcommand*\setverbwidth[1]{\def\auxwidth{#1}}

\newcommand*\name[1]{{#1}}
\newcommand*\pkg[1]{\textsf{#1}}
\newcommand*\feat[1]{\texttt{#1}}
\newcommand*\opt[1]{\texttt{#1}}

\newcommand*\note[1]{\unskip\footnote{#1}}

\let\latin\textit
\def\eg{\latin{e.g.}}
\def\Eg{\latin{E.g.}}
\def\ie{\latin{i.e.}}
\def\etc{\@ifnextchar.{\latin{etc}}{\latin{etc.}\@}}

\def\STIX{\textsc{stix}}
\def\MacOSX{Mac~OS~X}
\def\ascii{\textsc{ascii}}
\def\OMEGA{Omega}

\makeatletter
\newcounter{argument}
\g@addto@macro\endmacro{\setcounter{argument}{0}}
\newcommand*\darg[1]{%
  \stepcounter{argument}%
  {\ttfamily\char`\#\theargument~:~}#1\par\noindent\ignorespaces}
\newcommand*\doarg[1]{%
  \stepcounter{argument}%
  {\ttfamily\makebox[0pt][r]{[}\char`\#\theargument]:~}#1\par\noindent\ignorespaces}
\makeatother
\newcommand\codeline[1]{\par{\hspace{2\parindent}#1\par\noindent}\ignorespaces}

\newcommand\unichar[2]{\textsc{\MakeLowercase{u+#1: #2}}}

\setlength\parindent{2em}

%    \end{macrocode}
%</dtx-style>
%\fi
%
% \typeout{*************************************************************}
% \typeout{*}
% \typeout{* To finish the installation you have to move the following}
% \typeout{* file into a directory searched by XeTeX:}
% \typeout{*}
% \typeout{* \space\space\space unicode-math.sty}
% \typeout{* \space\space\space unicode-math.tex}
% \typeout{*}
% \typeout{*************************************************************}
%
\endinput
 